{"mappings":"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","sources":["node_modules/twgl.js/dist/4.x/twgl-full.module.js"],"sourcesContent":["/* @license twgl.js 4.21.2 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\nAvailable via the MIT license.\nsee: http://github.com/greggman/twgl.js for details */\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */\n\nlet VecType = Float32Array;\n\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */\n\n/**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */\nfunction setDefaultType(ctor) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param {number} [x] Initial x value.\n * @param {number} [y] Initial y value.\n * @param {number} [z] Initial z value.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\nfunction create(x, y, z) {\n  const dst = new VecType(3);\n  if (x) {\n    dst[0] = x;\n  }\n  if (y) {\n    dst[1] = y;\n  }\n  if (z) {\n    dst[2] = z;\n  }\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.\n * @memberOf module:twgl/v3\n */\nfunction add(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.\n * @memberOf module:twgl/v3\n */\nfunction subtract(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerp(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} the linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerpV(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The max components vector.\n * @memberOf module:twgl/v3\n */\nfunction max(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The min components vector.\n * @memberOf module:twgl/v3\n */\nfunction min(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction mulScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n\n  return dst;\n}\n\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction divScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n\n  return dst;\n}\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of a cross b.\n * @memberOf module:twgl/v3\n */\nfunction cross(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */\nfunction dot(a, b) {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */\nfunction length$1(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distance(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distanceSq(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */\nfunction normalize(a, dst) {\n  dst = dst || new VecType(3);\n\n  const lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n  const len = Math.sqrt(lenSq);\n  if (len > 0.00001) {\n    dst[0] = a[0] / len;\n    dst[1] = a[1] / len;\n    dst[2] = a[2] / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */\nfunction negate(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n\n  return dst;\n}\n\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */\nfunction copy(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction multiply(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction divide(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n\n  return dst;\n}\n\nvar v3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  add: add,\n  copy: copy,\n  create: create,\n  cross: cross,\n  distance: distance,\n  distanceSq: distanceSq,\n  divide: divide,\n  divScalar: divScalar,\n  dot: dot,\n  lerp: lerp,\n  lerpV: lerpV,\n  length: length$1,\n  lengthSq: lengthSq,\n  max: max,\n  min: min,\n  mulScalar: mulScalar,\n  multiply: multiply,\n  negate: negate,\n  normalize: normalize,\n  setDefaultType: setDefaultType,\n  subtract: subtract\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */\nlet MatType = Float32Array;\n\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */\nfunction setDefaultType$1(ctor) {\n  const oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */\nfunction negate$1(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = -m[ 0];\n  dst[ 1] = -m[ 1];\n  dst[ 2] = -m[ 2];\n  dst[ 3] = -m[ 3];\n  dst[ 4] = -m[ 4];\n  dst[ 5] = -m[ 5];\n  dst[ 6] = -m[ 6];\n  dst[ 7] = -m[ 7];\n  dst[ 8] = -m[ 8];\n  dst[ 9] = -m[ 9];\n  dst[10] = -m[10];\n  dst[11] = -m[11];\n  dst[12] = -m[12];\n  dst[13] = -m[13];\n  dst[14] = -m[14];\n  dst[15] = -m[15];\n\n  return dst;\n}\n\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */\nfunction copy$1(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m[ 0];\n  dst[ 1] = m[ 1];\n  dst[ 2] = m[ 2];\n  dst[ 3] = m[ 3];\n  dst[ 4] = m[ 4];\n  dst[ 5] = m[ 5];\n  dst[ 6] = m[ 6];\n  dst[ 7] = m[ 7];\n  dst[ 8] = m[ 8];\n  dst[ 9] = m[ 9];\n  dst[10] = m[10];\n  dst[11] = m[11];\n  dst[12] = m[12];\n  dst[13] = m[13];\n  dst[14] = m[14];\n  dst[15] = m[15];\n\n  return dst;\n}\n\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */\n function transpose(m, dst) {\n  dst = dst || new MatType(16);\n  if (dst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  dst[ 0] = m00;\n  dst[ 1] = m10;\n  dst[ 2] = m20;\n  dst[ 3] = m30;\n  dst[ 4] = m01;\n  dst[ 5] = m11;\n  dst[ 6] = m21;\n  dst[ 7] = m31;\n  dst[ 8] = m02;\n  dst[ 9] = m12;\n  dst[10] = m22;\n  dst[11] = m32;\n  dst[12] = m03;\n  dst[13] = m13;\n  dst[14] = m23;\n  dst[15] = m33;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp_0  = m22 * m33;\n  const tmp_1  = m32 * m23;\n  const tmp_2  = m12 * m33;\n  const tmp_3  = m32 * m13;\n  const tmp_4  = m12 * m23;\n  const tmp_5  = m22 * m13;\n  const tmp_6  = m02 * m33;\n  const tmp_7  = m32 * m03;\n  const tmp_8  = m02 * m23;\n  const tmp_9  = m22 * m03;\n  const tmp_10 = m02 * m13;\n  const tmp_11 = m12 * m03;\n  const tmp_12 = m20 * m31;\n  const tmp_13 = m30 * m21;\n  const tmp_14 = m10 * m31;\n  const tmp_15 = m30 * m11;\n  const tmp_16 = m10 * m21;\n  const tmp_17 = m20 * m11;\n  const tmp_18 = m00 * m31;\n  const tmp_19 = m30 * m01;\n  const tmp_20 = m00 * m21;\n  const tmp_21 = m20 * m01;\n  const tmp_22 = m00 * m11;\n  const tmp_23 = m10 * m01;\n\n  const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n      (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n      (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n      (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n      (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n  const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  dst[ 0] = d * t0;\n  dst[ 1] = d * t1;\n  dst[ 2] = d * t2;\n  dst[ 3] = d * t3;\n  dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\n          (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\n          (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\n          (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\n          (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\n          (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\n          (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\n          (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\n          (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\n          (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\n          (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\n          (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\n          (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n\n  return dst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */\nfunction multiply$1(a, b, dst) {\n  dst = dst || new MatType(16);\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return dst;\n}\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with translation set.\n * @memberOf module:twgl/m4\n */\nfunction setTranslation(a, v, dst) {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 3] = a[ 3];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n    dst[ 7] = a[ 7];\n    dst[ 8] = a[ 8];\n    dst[ 9] = a[ 9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */\nfunction getTranslation(m, dst) {\n  dst = dst || create();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */\nfunction getAxis(m, axis, dst) {\n  dst = dst || create();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with axis set.\n * @memberOf module:twgl/m4\n */\nfunction setAxis(a, v, axis, dst) {\n  if (dst !== a) {\n    dst = copy$1(a, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n  dst = dst || new MatType(16);\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n  const rangeInv = 1.0 / (zNear - zFar);\n\n  dst[0]  = f / aspect;\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = f;\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = (zNear + zFar) * rangeInv;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = zNear * zFar * rangeInv * 2;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction ortho(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0]  = 2 / (right - left);\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = 2 / (top - bottom);\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = (far + near) / (near - far);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n\n  return dst;\n}\n\nlet xAxis;\nlet yAxis;\nlet zAxis;\n\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */\nfunction lookAt(eye, target, up, dst) {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || create();\n  yAxis = yAxis || create();\n  zAxis = zAxis || create();\n\n  normalize(\n      subtract(eye, target, zAxis), zAxis);\n  normalize(cross(up, zAxis, xAxis), xAxis);\n  normalize(cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];\n  dst[ 1] = xAxis[1];\n  dst[ 2] = xAxis[2];\n  dst[ 3] = 0;\n  dst[ 4] = yAxis[0];\n  dst[ 5] = yAxis[1];\n  dst[ 6] = yAxis[2];\n  dst[ 7] = 0;\n  dst[ 8] = zAxis[0];\n  dst[ 9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = eye[0];\n  dst[13] = eye[1];\n  dst[14] = eye[2];\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */\nfunction translation(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translated matrix.\n * @memberOf module:twgl/m4\n */\nfunction translate(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 3] = m03;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n    dst[ 7] = m13;\n    dst[ 8] = m20;\n    dst[ 9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationX(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = c;\n  dst[ 6] = s;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateX(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[4]  = c * m10 + s * m20;\n  dst[5]  = c * m11 + s * m21;\n  dst[6]  = c * m12 + s * m22;\n  dst[7]  = c * m13 + s * m23;\n  dst[8]  = c * m20 - s * m10;\n  dst[9]  = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[ 0] = m[ 0];\n    dst[ 1] = m[ 1];\n    dst[ 2] = m[ 2];\n    dst[ 3] = m[ 3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationY(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = 0;\n  dst[ 2] = -s;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = s;\n  dst[ 9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateY(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 - s * m20;\n  dst[ 1] = c * m01 - s * m21;\n  dst[ 2] = c * m02 - s * m22;\n  dst[ 3] = c * m03 - s * m23;\n  dst[ 8] = c * m20 + s * m00;\n  dst[ 9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[ 4] = m[ 4];\n    dst[ 5] = m[ 5];\n    dst[ 6] = m[ 6];\n    dst[ 7] = m[ 7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationZ(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = s;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = -s;\n  dst[ 5] = c;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateZ(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n  dst[ 3] = c * m03 + s * m13;\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n  dst[ 7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  dst[ 0] = xx + (1 - xx) * c;\n  dst[ 1] = x * y * oneMinusCosine + z * s;\n  dst[ 2] = x * z * oneMinusCosine - y * s;\n  dst[ 3] = 0;\n  dst[ 4] = x * y * oneMinusCosine - z * s;\n  dst[ 5] = yy + (1 - yy) * c;\n  dst[ 6] = y * z * oneMinusCosine + x * s;\n  dst[ 7] = 0;\n  dst[ 8] = x * z * oneMinusCosine + y * s;\n  dst[ 9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */\nfunction scaling(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v[0];\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = v[1];\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = v[2];\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaled matrix.\n * @memberOf module:twgl/m4\n */\nfunction scale(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n  dst[ 3] = v0 * m[0 * 4 + 3];\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n  dst[ 7] = v1 * m[1 * 4 + 3];\n  dst[ 8] = v2 * m[2 * 4 + 0];\n  dst[ 9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed point.\n * @memberOf module:twgl/m4\n */\nfunction transformPoint(m, v, dst) {\n  dst = dst || create();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n\n  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */\nfunction transformDirection(m, v, dst) {\n  dst = dst || create();\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed normal.\n * @memberOf module:twgl/m4\n */\nfunction transformNormal(m, v, dst) {\n  dst = dst || create();\n  const mi = inverse(m);\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\nvar m4 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  axisRotate: axisRotate,\n  axisRotation: axisRotation,\n  copy: copy$1,\n  frustum: frustum,\n  getAxis: getAxis,\n  getTranslation: getTranslation,\n  identity: identity,\n  inverse: inverse,\n  lookAt: lookAt,\n  multiply: multiply$1,\n  negate: negate$1,\n  ortho: ortho,\n  perspective: perspective,\n  rotateX: rotateX,\n  rotateY: rotateY,\n  rotateZ: rotateZ,\n  rotationX: rotationX,\n  rotationY: rotationY,\n  rotationZ: rotationZ,\n  scale: scale,\n  scaling: scaling,\n  setAxis: setAxis,\n  setDefaultType: setDefaultType$1,\n  setTranslation: setTranslation,\n  transformDirection: transformDirection,\n  transformNormal: transformNormal,\n  transformPoint: transformPoint,\n  translate: translate,\n  translation: translation,\n  transpose: transpose\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* DataType */\nconst BYTE                           = 0x1400;\nconst UNSIGNED_BYTE                  = 0x1401;\nconst SHORT                          = 0x1402;\nconst UNSIGNED_SHORT                 = 0x1403;\nconst INT                            = 0x1404;\nconst UNSIGNED_INT                   = 0x1405;\nconst FLOAT                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE]                           = Int8Array;\n  tt[UNSIGNED_BYTE]                  = Uint8Array;\n  tt[SHORT]                          = Int16Array;\n  tt[UNSIGNED_SHORT]                 = Uint16Array;\n  tt[INT]                            = Int32Array;\n  tt[UNSIGNED_INT]                   = Uint32Array;\n  tt[FLOAT]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;\n  tt[HALF_FLOAT]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n  tt[UNSIGNED_INT_24_8]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nvar typedarrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getGLTypeForTypedArray: getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,\n  isArrayBuffer: isArrayBuffer\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error(...args) {\n  console.error(...args);\n}\n\nfunction warn(...args) {\n  console.warn(...args);\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && t instanceof WebGLRenderbuffer;\n}\n\nfunction isShader(gl, t) {\n  return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;\n}\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE$1                         = 0x1400;\nconst UNSIGNED_BYTE$1                = 0x1401;\nconst SHORT$1                        = 0x1402;\nconst UNSIGNED_SHORT$1               = 0x1403;\nconst INT$1                          = 0x1404;\nconst UNSIGNED_INT$1                 = 0x1405;\nconst FLOAT$1                        = 0x1406;\nconst defaults = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults.attribPrefix = prefix;\n}\n\nfunction setDefaults(newDefaults) {\n  copyExistingProperties(newDefaults, defaults);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents(array, arrayName) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !isArrayBuffer(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let buffer;\n        let type;\n        let normalization;\n        let numComponents;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          buffer = array.buffer;\n          numComponents = array.numComponents || array.size;\n          type = array.type;\n          normalization = array.normalize;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          const numValues = array.data || array;\n          const arrayType = array.type || Float32Array;\n          const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n          type = getGLTypeForTypedArrayType(arrayType);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);\n          buffer = gl.createBuffer();\n          gl.bindBuffer(ARRAY_BUFFER, buffer);\n          gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);\n        } else {\n          const typedArray = makeTypedArray(array, arrayName);\n          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);\n          type = getGLTypeForTypedArray(typedArray);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);\n          numComponents = getNumComponents(array, arrayName);\n        }\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE$1)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE$1)  return 1;  // eslint-disable-line\n  if (type === SHORT$1)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT$1) return 2;  // eslint-disable-line\n  if (type === INT$1)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT$1)   return 4;  // eslint-disable-line\n  if (type === FLOAT$1)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray(array).length;\n  const numComponents = getNumComponents(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nvar attributes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttribsFromArrays: createAttribsFromArrays,\n  createBuffersFromArrays: createBuffersFromArrays,\n  createBufferFromArray: createBufferFromArray,\n  createBufferFromTypedArray: createBufferFromTypedArray,\n  createBufferInfoFromArrays: createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,\n  setAttributePrefix: setAttributePrefix,\n  setAttributeDefaults_: setDefaults,\n  getNumComponents_: getNumComponents,\n  getArray_: getArray\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst getArray$1 = getArray;  // eslint-disable-line\nconst getNumComponents$1 = getNumComponents;  // eslint-disable-line\n\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */\n\n/**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */\nfunction augmentTypedArray(typedArray, numComponents) {\n  let cursor = 0;\n  typedArray.push = function() {\n    for (let ii = 0; ii < arguments.length; ++ii) {\n      const value = arguments[ii];\n      if (value instanceof Array || isArrayBuffer(value)) {\n        for (let jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n  typedArray.reset = function(opt_index) {\n    cursor = opt_index || 0;\n  };\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, 'numElements', {\n    get: function() {\n      return this.length / this.numComponents | 0;\n    },\n  });\n  return typedArray;\n}\n\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */\nfunction createAugmentedTypedArray(numComponents, numElements, opt_type) {\n  const Type = opt_type || Float32Array;\n  return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\n\nfunction allButIndices(name) {\n  return name !== \"indices\";\n}\n\n/**\n * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */\nfunction deindexVertices(vertices) {\n  const indices = vertices.indices;\n  const newVertices = {};\n  const numElements = indices.length;\n\n  function expandToUnindexed(channel) {\n    const srcBuffer = vertices[channel];\n    const numComponents = srcBuffer.numComponents;\n    const dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n    for (let ii = 0; ii < numElements; ++ii) {\n      const ndx = indices[ii];\n      const offset = ndx * numComponents;\n      for (let jj = 0; jj < numComponents; ++jj) {\n        dstBuffer.push(srcBuffer[offset + jj]);\n      }\n    }\n    newVertices[channel] = dstBuffer;\n  }\n\n  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n\n  return newVertices;\n}\n\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */\nfunction flattenNormals(vertices) {\n  if (vertices.indices) {\n    throw new Error('can not flatten normals of indexed vertices. deindex them first');\n  }\n\n  const normals = vertices.normal;\n  const numNormals = normals.length;\n  for (let ii = 0; ii < numNormals; ii += 9) {\n    // pull out the 3 normals for this triangle\n    const nax = normals[ii + 0];\n    const nay = normals[ii + 1];\n    const naz = normals[ii + 2];\n\n    const nbx = normals[ii + 3];\n    const nby = normals[ii + 4];\n    const nbz = normals[ii + 5];\n\n    const ncx = normals[ii + 6];\n    const ncy = normals[ii + 7];\n    const ncz = normals[ii + 8];\n\n    // add them\n    let nx = nax + nbx + ncx;\n    let ny = nay + nby + ncy;\n    let nz = naz + nbz + ncz;\n\n    // normalize them\n    const length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n    nx /= length;\n    ny /= length;\n    nz /= length;\n\n    // copy them back in\n    normals[ii + 0] = nx;\n    normals[ii + 1] = ny;\n    normals[ii + 2] = nz;\n\n    normals[ii + 3] = nx;\n    normals[ii + 4] = ny;\n    normals[ii + 5] = nz;\n\n    normals[ii + 6] = nx;\n    normals[ii + 7] = ny;\n    normals[ii + 8] = nz;\n  }\n\n  return vertices;\n}\n\nfunction applyFuncToV3Array(array, matrix, fn) {\n  const len = array.length;\n  const tmp = new Float32Array(3);\n  for (let ii = 0; ii < len; ii += 3) {\n    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n    array[ii    ] = tmp[0];\n    array[ii + 1] = tmp[1];\n    array[ii + 2] = tmp[2];\n  }\n}\n\nfunction transformNormal$1(mi, v, dst) {\n  dst = dst || create();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientDirections(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformDirection);\n  return array;\n}\n\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientNormals(array, matrix) {\n  applyFuncToV3Array(array, inverse(matrix), transformNormal$1);\n  return array;\n}\n\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientPositions(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformPoint);\n  return array;\n}\n\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */\n\n/**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */\nfunction reorientVertices(arrays, matrix) {\n  Object.keys(arrays).forEach(function(name) {\n    const array = arrays[name];\n    if (name.indexOf(\"pos\") >= 0) {\n      reorientPositions(array, matrix);\n    } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n      reorientDirections(array, matrix);\n    } else if (name.indexOf(\"norm\") >= 0) {\n      reorientNormals(array, matrix);\n    }\n  });\n  return arrays;\n}\n\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */\n\n/**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */\nfunction createXYQuadVertices(size, xOffset, yOffset) {\n  size = size || 2;\n  xOffset = xOffset || 0;\n  yOffset = yOffset || 0;\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [\n        xOffset + -1 * size, yOffset + -1 * size,\n        xOffset +  1 * size, yOffset + -1 * size,\n        xOffset + -1 * size, yOffset +  1 * size,\n        xOffset +  1 * size, yOffset +  1 * size,\n      ],\n    },\n    normal: [\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n    ],\n    texcoord: [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1,\n    ],\n    indices: [ 0, 1, 2, 2, 1, 3 ],\n  };\n}\n\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */\n\n/**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createPlaneVertices(\n    width,\n    depth,\n    subdivisionsWidth,\n    subdivisionsDepth,\n    matrix) {\n  width = width || 1;\n  depth = depth || 1;\n  subdivisionsWidth = subdivisionsWidth || 1;\n  subdivisionsDepth = subdivisionsDepth || 1;\n  matrix = matrix || identity();\n\n  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  for (let z = 0; z <= subdivisionsDepth; z++) {\n    for (let x = 0; x <= subdivisionsWidth; x++) {\n      const u = x / subdivisionsWidth;\n      const v = z / subdivisionsDepth;\n      positions.push(\n          width * u - width * 0.5,\n          0,\n          depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  const numVertsAcross = subdivisionsWidth + 1;\n  const indices = createAugmentedTypedArray(\n      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line\n    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (z + 0) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x,\n          (z + 0) * numVertsAcross + x + 1);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (z + 1) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x + 1,\n          (z + 0) * numVertsAcross + x + 1);\n    }\n  }\n\n  const arrays = reorientVertices({\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  }, matrix);\n  return arrays;\n}\n\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */\n\n/**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createSphereVertices(\n    radius,\n    subdivisionsAxis,\n    subdivisionsHeight,\n    opt_startLatitudeInRadians,\n    opt_endLatitudeInRadians,\n    opt_startLongitudeInRadians,\n    opt_endLongitudeInRadians) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n  opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);\n\n  const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n  const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;\n\n  // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let y = 0; y <= subdivisionsHeight; y++) {\n    for (let x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      const u = x / subdivisionsAxis;\n      const v = y / subdivisionsHeight;\n      const theta = longRange * u + opt_startLongitudeInRadians;\n      const phi = latRange * v + opt_startLatitudeInRadians;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  const numVertsAround = subdivisionsAxis + 1;\n  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line\n    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (y + 0) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (y + 1) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x + 1);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */\nconst CUBE_FACE_INDICES = [\n  [3, 7, 5, 1],  // right\n  [6, 2, 0, 4],  // left\n  [6, 7, 3, 2],  // ??\n  [0, 1, 5, 4],  // ??\n  [7, 6, 4, 5],  // front\n  [2, 3, 1, 0],  // back\n];\n\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */\n\n/**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createCubeVertices(size) {\n  size = size || 1;\n  const k = size / 2;\n\n  const cornerVertices = [\n    [-k, -k, -k],\n    [+k, -k, -k],\n    [-k, +k, -k],\n    [+k, +k, -k],\n    [-k, -k, +k],\n    [+k, -k, +k],\n    [-k, +k, +k],\n    [+k, +k, +k],\n  ];\n\n  const faceNormals = [\n    [+1, +0, +0],\n    [-1, +0, +0],\n    [+0, +1, +0],\n    [+0, -1, +0],\n    [+0, +0, +1],\n    [+0, +0, -1],\n  ];\n\n  const uvCoords = [\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [1, 1],\n  ];\n\n  const numVertices = 6 * 4;\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2 , numVertices);\n  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (let f = 0; f < 6; ++f) {\n    const faceIndices = CUBE_FACE_INDICES[f];\n    for (let v = 0; v < 4; ++v) {\n      const position = cornerVertices[faceIndices[v]];\n      const normal = faceNormals[f];\n      const uv = uvCoords[v];\n\n      // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n\n    }\n    // Two triangles make a square face.\n    const offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */\n\n/**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTruncatedConeVertices(\n    bottomRadius,\n    topRadius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    opt_topCap,\n    opt_bottomCap) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  const topCap = (opt_topCap === undefined) ? true : opt_topCap;\n  const bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n\n  const vertsAroundEdge = radialSubdivisions + 1;\n\n  // The slant of the cone is constant across its surface\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const cosSlant = Math.cos(slant);\n  const sinSlant = Math.sin(slant);\n\n  const start = topCap ? -2 : 0;\n  const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (let yy = start; yy <= end; ++yy) {\n    let v = yy / verticalSubdivisions;\n    let y = height * v;\n    let ringRadius;\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius +\n        (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n      texcoords.push((ii / radialSubdivisions), 1 - v);\n    }\n  }\n\n  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line\n    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 0) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii);\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 0 + ii);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */\nfunction expandRLEData(rleData, padding) {\n  padding = padding || [];\n  const data = [];\n  for (let ii = 0; ii < rleData.length; ii += 4) {\n    const runLength = rleData[ii];\n    const element = rleData.slice(ii + 1, ii + 4);\n    element.push.apply(element, padding);\n    for (let jj = 0; jj < runLength; ++jj) {\n      data.push.apply(data, element);\n    }\n  }\n  return data;\n}\n\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */\n\n/**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction create3DFVertices() {\n\n  const positions = [\n    // left column front\n    0,   0,  0,\n    0, 150,  0,\n    30,   0,  0,\n    0, 150,  0,\n    30, 150,  0,\n    30,   0,  0,\n\n    // top rung front\n    30,   0,  0,\n    30,  30,  0,\n    100,   0,  0,\n    30,  30,  0,\n    100,  30,  0,\n    100,   0,  0,\n\n    // middle rung front\n    30,  60,  0,\n    30,  90,  0,\n    67,  60,  0,\n    30,  90,  0,\n    67,  90,  0,\n    67,  60,  0,\n\n    // left column back\n      0,   0,  30,\n     30,   0,  30,\n      0, 150,  30,\n      0, 150,  30,\n     30,   0,  30,\n     30, 150,  30,\n\n    // top rung back\n     30,   0,  30,\n    100,   0,  30,\n     30,  30,  30,\n     30,  30,  30,\n    100,   0,  30,\n    100,  30,  30,\n\n    // middle rung back\n     30,  60,  30,\n     67,  60,  30,\n     30,  90,  30,\n     30,  90,  30,\n     67,  60,  30,\n     67,  90,  30,\n\n    // top\n      0,   0,   0,\n    100,   0,   0,\n    100,   0,  30,\n      0,   0,   0,\n    100,   0,  30,\n      0,   0,  30,\n\n    // top rung front\n    100,   0,   0,\n    100,  30,   0,\n    100,  30,  30,\n    100,   0,   0,\n    100,  30,  30,\n    100,   0,  30,\n\n    // under top rung\n    30,   30,   0,\n    30,   30,  30,\n    100,  30,  30,\n    30,   30,   0,\n    100,  30,  30,\n    100,  30,   0,\n\n    // between top rung and middle\n    30,   30,   0,\n    30,   60,  30,\n    30,   30,  30,\n    30,   30,   0,\n    30,   60,   0,\n    30,   60,  30,\n\n    // top of middle rung\n    30,   60,   0,\n    67,   60,  30,\n    30,   60,  30,\n    30,   60,   0,\n    67,   60,   0,\n    67,   60,  30,\n\n    // front of middle rung\n    67,   60,   0,\n    67,   90,  30,\n    67,   60,  30,\n    67,   60,   0,\n    67,   90,   0,\n    67,   90,  30,\n\n    // bottom of middle rung.\n    30,   90,   0,\n    30,   90,  30,\n    67,   90,  30,\n    30,   90,   0,\n    67,   90,  30,\n    67,   90,   0,\n\n    // front of bottom\n    30,   90,   0,\n    30,  150,  30,\n    30,   90,  30,\n    30,   90,   0,\n    30,  150,   0,\n    30,  150,  30,\n\n    // bottom\n    0,   150,   0,\n    0,   150,  30,\n    30,  150,  30,\n    0,   150,   0,\n    30,  150,  30,\n    30,  150,   0,\n\n    // left side\n    0,   0,   0,\n    0,   0,  30,\n    0, 150,  30,\n    0,   0,   0,\n    0, 150,  30,\n    0, 150,   0,\n  ];\n\n  const texcoords = [\n    // left column front\n    0.22, 0.19,\n    0.22, 0.79,\n    0.34, 0.19,\n    0.22, 0.79,\n    0.34, 0.79,\n    0.34, 0.19,\n\n    // top rung front\n    0.34, 0.19,\n    0.34, 0.31,\n    0.62, 0.19,\n    0.34, 0.31,\n    0.62, 0.31,\n    0.62, 0.19,\n\n    // middle rung front\n    0.34, 0.43,\n    0.34, 0.55,\n    0.49, 0.43,\n    0.34, 0.55,\n    0.49, 0.55,\n    0.49, 0.43,\n\n    // left column back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // middle rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // top rung front\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // under top rung\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // between top rung and middle\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // top of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // front of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom of middle rung.\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // front of bottom\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // left side\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n  ];\n\n  const normals = expandRLEData([\n    // left column front\n    // top rung front\n    // middle rung front\n    18, 0, 0, 1,\n\n    // left column back\n    // top rung back\n    // middle rung back\n    18, 0, 0, -1,\n\n    // top\n    6, 0, 1, 0,\n\n    // top rung front\n    6, 1, 0, 0,\n\n    // under top rung\n    6, 0, -1, 0,\n\n    // between top rung and middle\n    6, 1, 0, 0,\n\n    // top of middle rung\n    6, 0, 1, 0,\n\n    // front of middle rung\n    6, 1, 0, 0,\n\n    // bottom of middle rung.\n    6, 0, -1, 0,\n\n    // front of bottom\n    6, 1, 0, 0,\n\n    // bottom\n    6, 0, -1, 0,\n\n    // left side\n    6, -1, 0, 0,\n  ]);\n\n  const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n      18, 200,  70, 120,\n\n        // left column back\n        // top rung back\n        // middle rung back\n      18, 80, 70, 200,\n\n        // top\n      6, 70, 200, 210,\n\n        // top rung front\n      6, 200, 200, 70,\n\n        // under top rung\n      6, 210, 100, 70,\n\n        // between top rung and middle\n      6, 210, 160, 70,\n\n        // top of middle rung\n      6, 70, 180, 210,\n\n        // front of middle rung\n      6, 100, 70, 210,\n\n        // bottom of middle rung.\n      6, 76, 210, 100,\n\n        // front of bottom\n      6, 140, 210, 80,\n\n        // bottom\n      6, 90, 130, 110,\n\n        // left side\n      6, 160, 160, 220,\n  ], [255]);\n\n  const numVerts = positions.length / 3;\n\n  const arrays = {\n    position: createAugmentedTypedArray(3, numVerts),\n    texcoord: createAugmentedTypedArray(2,  numVerts),\n    normal: createAugmentedTypedArray(3, numVerts),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n  };\n\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (let ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return arrays;\n}\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCrescentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCrescentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n function createCrescentVertices(\n    verticalRadius,\n    outerRadius,\n    innerRadius,\n    thickness,\n    subdivisionsDown,\n    startOffset,\n    endOffset) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  startOffset = startOffset || 0;\n  endOffset   = endOffset || 1;\n\n  const subdivisionsThick = 2;\n\n  const offsetRange = endOffset - startOffset;\n  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n\n  function lerp(a, b, s) {\n    return a + (b - a) * s;\n  }\n\n  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n    for (let z = 0; z <= subdivisionsDown; z++) {\n      const uBack = x / (subdivisionsThick - 1);\n      const v = z / subdivisionsDown;\n      const xBack = (uBack - 0.5) * 2;\n      const angle = (startOffset + (v * offsetRange)) * Math.PI;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const radius = lerp(verticalRadius, arcRadius, s);\n      const px = xBack * thickness;\n      const py = c * verticalRadius;\n      const pz = s * radius;\n      positions.push(px, py, pz);\n      const n = add(multiply([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  }\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let x = 0; x < subdivisionsThick; x++) {\n    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  }\n\n  // Do outer surface.\n  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset, rightArcOffset) {\n    for (let z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(\n          leftArcOffset + z + 0,\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 0);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 1,\n          rightArcOffset + z + 0);\n    }\n  }\n\n  const numVerticesDown = subdivisionsDown + 1;\n  // front\n  createSurface(numVerticesDown * 0, numVerticesDown * 4);\n  // right\n  createSurface(numVerticesDown * 5, numVerticesDown * 7);\n  // back\n  createSurface(numVerticesDown * 6, numVerticesDown * 2);\n  // left\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */\n\n /**\n  * Creates cylinder buffers. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, WebGLBuffer>} The created buffers.\n  * @memberOf module:twgl/primitives\n  * @function createCylinderBuffers\n  */\n\n /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, TypedArray>} The created vertices.\n  * @memberOf module:twgl/primitives\n  */\nfunction createCylinderVertices(\n    radius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    topCap,\n    bottomCap) {\n  return createTruncatedConeVertices(\n      radius,\n      radius,\n      height,\n      radialSubdivisions,\n      verticalSubdivisions,\n      topCap,\n      bottomCap);\n}\n\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */\n\n/**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */\n\n/**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTorusVertices(\n    radius,\n    thickness,\n    radialSubdivisions,\n    bodySubdivisions,\n    startAngle,\n    endAngle) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n\n  startAngle = startAngle || 0;\n  endAngle = endAngle || Math.PI * 2;\n  const range = endAngle - startAngle;\n\n  const radialParts = radialSubdivisions + 1;\n  const bodyParts   = bodySubdivisions + 1;\n  const numVertices = radialParts * bodyParts;\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n\n  for (let slice = 0; slice < bodyParts; ++slice) {\n    const v = slice / bodySubdivisions;\n    const sliceAngle = v * Math.PI * 2;\n    const sliceSin = Math.sin(sliceAngle);\n    const ringRadius = radius + sliceSin * thickness;\n    const ny = Math.cos(sliceAngle);\n    const y = ny * thickness;\n    for (let ring = 0; ring < radialParts; ++ring) {\n      const u = ring / radialSubdivisions;\n      const ringAngle = startAngle + u * range;\n      const xSin = Math.sin(ringAngle);\n      const zCos = Math.cos(ringAngle);\n      const x = xSin * ringRadius;\n      const z = zCos * ringRadius;\n      const nx = xSin * sliceSin;\n      const nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line\n    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line\n      const nextRingIndex  = 1 + ring;\n      const nextSliceIndex = 1 + slice;\n      indices.push(radialParts * slice          + ring,\n                   radialParts * nextSliceIndex + ring,\n                   radialParts * slice          + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + ring,\n                   radialParts * nextSliceIndex + nextRingIndex,\n                   radialParts * slice          + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */\n\n/**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createDiscVertices(\n    radius,\n    divisions,\n    stacks,\n    innerRadius,\n    stackPower) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  stacks = stacks ? stacks : 1;\n  stackPower = stackPower ? stackPower : 1;\n  innerRadius = innerRadius ? innerRadius : 0;\n\n  // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n  const numVertices = (divisions + 1) * (stacks + 1);\n\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n  let firstIndex = 0;\n  const radiusSpan = radius - innerRadius;\n  const pointsPerStack = divisions + 1;\n\n  // Build the disk one stack at a time.\n  for (let stack = 0; stack <= stacks; ++stack) {\n    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (let i = 0; i <= divisions; ++i) {\n      const theta = 2.0 * Math.PI * i / divisions;\n      const x = stackRadius * Math.cos(theta);\n      const z = stackRadius * Math.sin(theta);\n\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - (i / divisions), stack / stacks);\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        const a = firstIndex + (i + 1);\n        const b = firstIndex + i;\n        const c = firstIndex + i - pointsPerStack;\n        const d = firstIndex + (i + 1) - pointsPerStack;\n\n        // Make a quad of the vertices a, b, c, d.\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */\nfunction randInt(range) {\n  return Math.random() * range | 0;\n}\n\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */\n\n/**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */\n\n/**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */\nfunction makeRandomVertexColors(vertices, options) {\n  options = options || {};\n  const numElements = vertices.position.numElements;\n  const vColors = createAugmentedTypedArray(4, numElements, Uint8Array);\n  const rand = options.rand || function(ndx, channel) {\n    return channel < 3 ? randInt(256) : 255;\n  };\n  vertices.color = vColors;\n  if (vertices.indices) {\n    // just make random colors if index\n    for (let ii = 0; ii < numElements; ++ii) {\n      vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    }\n  } else {\n    // make random colors per triangle\n    const numVertsPerColor = options.vertsPerColor || 3;\n    const numSets = numElements / numVertsPerColor;\n    for (let ii = 0; ii < numSets; ++ii) {  // eslint-disable-line\n      const color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];\n      for (let jj = 0; jj < numVertsPerColor; ++jj) {\n        vColors.push(color);\n      }\n    }\n  }\n  return vertices;\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */\nfunction createBufferFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    return createBuffersFromArrays(gl, arrays);\n  };\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */\nfunction createBufferInfoFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));\n    return createBufferInfoFromArrays(gl, arrays);\n  };\n}\n\nconst arraySpecPropertyNames = [\n  \"numComponents\",\n  \"size\",\n  \"type\",\n  \"normalize\",\n  \"stride\",\n  \"offset\",\n  \"attrib\",\n  \"name\",\n  \"attribName\",\n];\n\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */\nfunction copyElements(src, dst, dstNdx, offset) {\n  offset = offset || 0;\n  const length = src.length;\n  for (let ii = 0; ii < length; ++ii) {\n    dst[dstNdx + ii] = src[ii] + offset;\n  }\n}\n\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */\nfunction createArrayOfSameType(srcArray, length) {\n  const arraySrc = getArray$1(srcArray);\n  const newArray = new arraySrc.constructor(length);\n  let newArraySpec = newArray;\n  // If it appears to have been augmented make new one augmented\n  if (arraySrc.numComponents && arraySrc.numElements) {\n    augmentTypedArray(newArray, arraySrc.numComponents);\n  }\n  // If it was a full spec make new one a full spec\n  if (srcArray.data) {\n    newArraySpec = {\n      data: newArray,\n    };\n    copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n  }\n  return newArraySpec;\n}\n\n/**\n * Concatenates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primitives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatenated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction concatVertices(arrayOfArrays) {\n  const names = {};\n  let baseName;\n  // get names of all arrays.\n  // and numElements for each set of vertices\n  for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n    const arrays = arrayOfArrays[ii];\n    Object.keys(arrays).forEach(function(name) {  // eslint-disable-line\n      if (!names[name]) {\n        names[name] = [];\n      }\n      if (!baseName && name !== 'indices') {\n        baseName = name;\n      }\n      const arrayInfo = arrays[name];\n      const numComponents = getNumComponents$1(arrayInfo, name);\n      const array = getArray$1(arrayInfo);\n      const numElements = array.length / numComponents;\n      names[name].push(numElements);\n    });\n  }\n\n  // compute length of combined array\n  // and return one for reference\n  function getLengthOfCombinedArrays(name) {\n    let length = 0;\n    let arraySpec;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray$1(arrayInfo);\n      length += array.length;\n      if (!arraySpec || arrayInfo.data) {\n        arraySpec = arrayInfo;\n      }\n    }\n    return {\n      length: length,\n      spec: arraySpec,\n    };\n  }\n\n  function copyArraysToNewArray(name, base, newArray) {\n    let baseIndex = 0;\n    let offset = 0;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray$1(arrayInfo);\n      if (name === 'indices') {\n        copyElements(array, newArray, offset, baseIndex);\n        baseIndex += base[ii];\n      } else {\n        copyElements(array, newArray, offset);\n      }\n      offset += array.length;\n    }\n  }\n\n  const base = names[baseName];\n\n  const newArrays = {};\n  Object.keys(names).forEach(function(name) {\n    const info = getLengthOfCombinedArrays(name);\n    const newArraySpec = createArrayOfSameType(info.spec, info.length);\n    copyArraysToNewArray(name, base, getArray$1(newArraySpec));\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The duplicated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction duplicateVertices(arrays) {\n  const newArrays = {};\n  Object.keys(arrays).forEach(function(name) {\n    const arraySpec = arrays[name];\n    const srcArray = getArray$1(arraySpec);\n    const newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n    copyElements(srcArray, getArray$1(newArraySpec), 0);\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\nconst create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);\nconst create3DFBuffers = createBufferFunc(create3DFVertices);\nconst createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);\nconst createCubeBuffers = createBufferFunc(createCubeVertices);\nconst createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);\nconst createPlaneBuffers = createBufferFunc(createPlaneVertices);\nconst createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);\nconst createSphereBuffers = createBufferFunc(createSphereVertices);\nconst createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);\nconst createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);\nconst createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);\nconst createXYQuadBuffers = createBufferFunc(createXYQuadVertices);\nconst createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);\nconst createCrescentBuffers = createBufferFunc(createCrescentVertices);\nconst createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);\nconst createCylinderBuffers = createBufferFunc(createCylinderVertices);\nconst createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);\nconst createTorusBuffers = createBufferFunc(createTorusVertices);\nconst createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);\nconst createDiscBuffers = createBufferFunc(createDiscVertices);\n\n// these were mis-spelled until 4.12\nconst createCresentBufferInfo = createCrescentBufferInfo;\nconst createCresentBuffers = createCrescentBuffers;\nconst createCresentVertices = createCrescentVertices;\n\nvar primitives = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  create3DFBufferInfo: create3DFBufferInfo,\n  create3DFBuffers: create3DFBuffers,\n  create3DFVertices: create3DFVertices,\n  createAugmentedTypedArray: createAugmentedTypedArray,\n  createCubeBufferInfo: createCubeBufferInfo,\n  createCubeBuffers: createCubeBuffers,\n  createCubeVertices: createCubeVertices,\n  createPlaneBufferInfo: createPlaneBufferInfo,\n  createPlaneBuffers: createPlaneBuffers,\n  createPlaneVertices: createPlaneVertices,\n  createSphereBufferInfo: createSphereBufferInfo,\n  createSphereBuffers: createSphereBuffers,\n  createSphereVertices: createSphereVertices,\n  createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,\n  createTruncatedConeBuffers: createTruncatedConeBuffers,\n  createTruncatedConeVertices: createTruncatedConeVertices,\n  createXYQuadBufferInfo: createXYQuadBufferInfo,\n  createXYQuadBuffers: createXYQuadBuffers,\n  createXYQuadVertices: createXYQuadVertices,\n  createCresentBufferInfo: createCresentBufferInfo,\n  createCresentBuffers: createCresentBuffers,\n  createCresentVertices: createCresentVertices,\n  createCrescentBufferInfo: createCrescentBufferInfo,\n  createCrescentBuffers: createCrescentBuffers,\n  createCrescentVertices: createCrescentVertices,\n  createCylinderBufferInfo: createCylinderBufferInfo,\n  createCylinderBuffers: createCylinderBuffers,\n  createCylinderVertices: createCylinderVertices,\n  createTorusBufferInfo: createTorusBufferInfo,\n  createTorusBuffers: createTorusBuffers,\n  createTorusVertices: createTorusVertices,\n  createDiscBufferInfo: createDiscBufferInfo,\n  createDiscBuffers: createDiscBuffers,\n  createDiscVertices: createDiscVertices,\n  deindexVertices: deindexVertices,\n  flattenNormals: flattenNormals,\n  makeRandomVertexColors: makeRandomVertexColors,\n  reorientDirections: reorientDirections,\n  reorientNormals: reorientNormals,\n  reorientPositions: reorientPositions,\n  reorientVertices: reorientVertices,\n  concatVertices: concatVertices,\n  duplicateVertices: duplicateVertices\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);\n  };\n}());\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  glEnumToString: glEnumToString,\n  isWebGL1: isWebGL1,\n  isWebGL2: isWebGL2\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$1 = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer$1 = isArrayBuffer;\n\n// Should we make this on demand?\nconst getShared2DContext = function() {\n  let s_ctx;\n  return function getShared2DContext() {\n    s_ctx = s_ctx ||\n        ((typeof document !== 'undefined' && document.createElement)\n          ? document.createElement(\"canvas\").getContext(\"2d\")\n          : null);\n    return s_ctx;\n  };\n}();\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT                = 0x1902;\nconst DEPTH_STENCIL                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D                     = 0x0de1;\nconst TEXTURE_CUBE_MAP               = 0x8513;\nconst TEXTURE_3D                     = 0x806f;\nconst TEXTURE_2D_ARRAY               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\n\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1                      = 0x8057;\nconst RGBA4                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16            = 0x81A5;\nconst DEPTH_COMPONENT24            = 0x81A6;\nconst DEPTH_COMPONENT32F           = 0x8CAC;\nconst DEPTH32F_STENCIL8            = 0x8CAD;\nconst DEPTH24_STENCIL8             = 0x88F0;\n\n/* DataType */\nconst BYTE$2                         = 0x1400;\nconst UNSIGNED_BYTE$2                = 0x1401;\nconst SHORT$2                        = 0x1402;\nconst UNSIGNED_SHORT$2               = 0x1403;\nconst INT$2                          = 0x1404;\nconst UNSIGNED_INT$2                 = 0x1405;\nconst FLOAT$2                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5$1         = 0x8363;\nconst HALF_FLOAT$1                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;\nconst UNSIGNED_INT_24_8$1            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_5_6_5$1], };\n    t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_4_4_4_4$1, UNSIGNED_SHORT_5_5_5_1$1], };\n    t[DEPTH_COMPONENT]    = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT$2, UNSIGNED_SHORT$2], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE$2], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$2, HALF_FLOAT$1], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE$2], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$2], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT$2], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$2], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE$2], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$2], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE$2], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$2], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT$2], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$2], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$2], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_6_5$1], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE$2], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_10F_11F_11F_REV$1], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_5_9_9_9_REV$1], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$2], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE$2], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$2], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT$2], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$2], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$2], };\n    t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE$2], };\n    t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_5_5_1$1, UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_4_4_4_4$1], };\n    t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$2], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE$2], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$2], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT$2], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$2], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$2], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$2, UNSIGNED_INT$2], };\n    t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };\n    t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };\n    t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8$1], };\n    t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV$1], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer$1(src)) {\n    return getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE$2;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults$1(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$1);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setPackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setSkipStateToDefault(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\n  if (isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n  }\n}\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D || isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults$1.textureColor;\n  if (isArrayBuffer$1(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults$1.textureOptions;\n  internalFormat = internalFormat || RGBA;\n  const target = options.target || TEXTURE_2D;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    setSkipStateToDefault(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      error(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$2;\n  const target = options.target || TEXTURE_2D;\n  if (target !== TEXTURE_CUBE_MAP) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder().forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$2;\n  const target = options.target || TEXTURE_2D_ARRAY;\n  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        setPackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer$1(src)) {\n    const Type = getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  setSkipStateToDefault(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n}\n\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer$1(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer$1(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else { // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer$1(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nvar textures = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setTextureDefaults_: setDefaults$1,\n  createSampler: createSampler,\n  createSamplers: createSamplers,\n  setSamplerParameters: setSamplerParameters,\n  createTexture: createTexture,\n  setEmptyTexture: setEmptyTexture,\n  setTextureFromArray: setTextureFromArray,\n  loadTextureFromUrl: loadTextureFromUrl,\n  setTextureFromElement: setTextureFromElement,\n  setTextureFilteringForSize: setTextureFilteringForSize,\n  setTextureParameters: setTextureParameters,\n  setDefaultTextureColor: setDefaultTextureColor,\n  createTextures: createTextures,\n  resizeTexture: resizeTexture,\n  canGenerateMipmap: canGenerateMipmap,\n  canFilter: canFilter,\n  getNumComponentsForFormat: getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error$1 = error;\nconst warn$1 = warn;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER$1                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$1           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT$3                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT$3                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT$3                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D$1                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP$1              = 0x8513;\nconst TEXTURE_3D$1                    = 0x806F;\nconst TEXTURE_2D_ARRAY$1              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT$3]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };\ntypeMap[INT$3]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[UNSIGNED_INT$3]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT$3, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT$3, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT$3, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT$3;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index + i, b.divisor);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT$3]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT$3]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT$3]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\nfunction addLineNumbersWithError(src, log = '', lineOffset = 0) {\n  // Note: Error message formats are not defined by any spec so this may or may not work.\n  const matches = [...log.matchAll(errorRE)];\n  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\n    const lineNo = parseInt(m[1]);\n    const next = matches[ndx + 1];\n    const end = next ? next.index : log.length;\n    const msg = log.substring(m.index, end);\n    return [lineNo - 1, msg];\n  }));\n  return src.split('\\n').map((line, lineNo) => {\n    const err = lineNoToErrorMap.get(lineNo);\n    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\n  }).join('\\n');\n}\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Loads a shader.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} shaderSource The shader source.\n * @param {number} shaderType The type of shader.\n * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.\n * @return {WebGLShader} The created shader.\n * @private\n */\nfunction loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n  const errFn = opt_errorCallback || error$1;\n  // Create the shader object\n  const shader = gl.createShader(shaderType);\n\n  // Remove the first end of line because WebGL 2.0 requires\n  // #version 300 es\n  // as the first line. No whitespace allowed before that line\n  // so\n  //\n  // <script>\n  // #version 300 es\n  // </script>\n  //\n  // Has one line before it which is invalid according to GLSL ES 3.00\n  //\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n\n  // Load the shader source\n  gl.shaderSource(shader, shaderSource);\n\n  // Compile the shader\n  gl.compileShader(shader);\n\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    errFn(`${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${glEnumToString(gl, shaderType)}: ${lastError}`);\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    // If we have an errorCallback we can just return this object\n    // Otherwise we need to construct one with default errorCallback\n    if (opt_attribs.errorCallback) {\n      return opt_attribs;\n    }\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n  }\n\n  const options = {\n    errorCallback: opt_errorCallback || error$1,\n    transformFeedbackVaryings: transformFeedbackVaryings,\n    transformFeedbackMode: transformFeedbackMode,\n  };\n\n  if (opt_attribs) {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs;\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteShaders(gl, shaders) {\n  shaders.forEach(function(shader) {\n    gl.deleteShader(shader);\n  });\n}\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program and calls useProgram.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const realShaders = [];\n  const newShaders = [];\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof (shader) === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = loadShader(gl, src, type, progOptions.errorCallback);\n      newShaders.push(shader);\n    }\n    if (isShader(gl, shader)) {\n      realShaders.push(shader);\n    }\n  }\n\n  if (realShaders.length !== shaders.length) {\n    progOptions.errorCallback(\"not enough shaders for program\");\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n\n  const program = gl.createProgram();\n  realShaders.forEach(function(shader) {\n    gl.attachShader(program, shader);\n  });\n  if (progOptions.attribLocations) {\n    Object.keys(progOptions.attribLocations).forEach(function(attrib) {\n      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n    });\n  }\n  let varyings = progOptions.transformFeedbackVaryings;\n  if (varyings) {\n    if (varyings.attribs) {\n      varyings = varyings.attribs;\n    }\n    if (!Array.isArray(varyings)) {\n      varyings = Object.keys(varyings);\n    }\n    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);\n  }\n  gl.linkProgram(program);\n\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    progOptions.errorCallback(`${\n      realShaders.map(shader => {\n        const src = addLineNumbersWithError(gl.getShaderSource(shader), '', 0);\n        const type = gl.getShaderParameter(shader, gl.SHADER_TYPE);\n        return `${glEnumToString(gl, type)}\\n${src}}`;\n      }).join('\\n')\n    }\\nError in program linking: ${lastError}`);\n\n    gl.deleteProgram(program);\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n  return program;\n}\n\n/**\n * Loads a shader from a script tag.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} scriptId The id of the script tag.\n * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n *     be derived from the type of the script tag.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.\n * @return {WebGLShader?} The created shader or null if error.\n * @private\n */\nfunction createShaderFromScript(\n    gl, scriptId, opt_shaderType, opt_errorCallback) {\n  let shaderSource = \"\";\n  const shaderScript = getElementById(scriptId);\n  if (!shaderScript) {\n    throw new Error(`unknown script element: ${scriptId}`);\n  }\n  shaderSource = shaderScript.text;\n\n  const shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);\n  if (!shaderType) {\n    throw new Error('unknown shader type');\n  }\n\n  return loadShader(gl, shaderSource, shaderType, opt_errorCallback);\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderScriptIds.length; ++ii) {\n    const shader = createShaderFromScript(\n        gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n    if (!shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderSources.length; ++ii) {\n    const shader = loadShader(\n        gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n    if (!shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\nconst tokenRE = /(\\.|\\[|]|\\w+)/g;\nconst isDigit = s => s >= '0' && s <= '9';\nfunction addSetterToUniformTree(fullPath, setter, node, uniformSetters) {\n  const tokens = fullPath.split(tokenRE).filter(s => s !== '');\n  let tokenNdx = 0;\n  let path = '';\n\n  for (;;) {\n    const token = tokens[tokenNdx++];  // has to be name or number\n    path += token;\n    const isArrayIndex = isDigit(token[0]);\n    const accessor = isArrayIndex\n        ? parseInt(token)\n        : token;\n    if (isArrayIndex) {\n      path += tokens[tokenNdx++];  // skip ']'\n    }\n    const isLastToken = tokenNdx === tokens.length;\n    if (isLastToken) {\n      node[accessor] = setter;\n      break;\n    } else {\n      const token = tokens[tokenNdx++];  // has to be . or [\n      const isArray = token === '[';\n      const child = node[accessor] || (isArray ? [] : {});\n      node[accessor] = child;\n      node = child;\n      uniformSetters[path] = uniformSetters[path] || function(node) {\n        return function(value) {\n          setUniformTree(node, value);\n        };\n      }(child);\n      path += token;\n    }\n  }\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo, location) {\n    const isArray = uniformInfo.name.endsWith(\"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = {};\n  const uniformTree = {};\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.endsWith(\"[0]\")) {\n      name = name.substr(0, name.length - 3);\n    }\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    // the uniform will have no location if it's in a uniform block\n    if (location) {\n      const setter = createUniformSetter(program, uniformInfo, location);\n      uniformSetters[name] = setter;\n      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);\n    }\n  }\n\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {string} name The name of the uniform\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: gl.getUniformBlockIndex(program, name),\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\nconst pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;\n\nfunction createUniformBlockUniformSetter(view, isArray, rows, cols) {\n  if (isArray || rows) {\n    cols = cols || 1;\n    const numElements = view.length;\n    const totalRows = numElements / 4;\n    return function(value) {\n      let dst = 0;\n      let src = 0;\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < cols; ++col) {\n          view[dst++] = value[src++];\n        }\n        dst += 4 - cols;\n      }\n    };\n  } else {\n    return function(value) {\n      if (value.length) {\n        view.set(value);\n      } else {\n        view[0] = value;\n      }\n    };\n  }\n}\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn$1(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const array = new ArrayBuffer(blockSpec.size);\n  const buffer = gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  const setters = {};\n  const setterTree = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    let name = data.name;\n    if (name.startsWith(prefix)) {\n      name = name.substr(prefix.length);\n    }\n    const isArray = name.endsWith('[0]');\n    if (isArray) {\n      name = name.substr(0, name.length - 3);\n    }\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const byteLength = isArray\n        ? pad(typeInfo.size, 16) * data.size\n        : typeInfo.size * data.size;\n    const uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);\n    uniforms[name] = uniformView;\n    // Note: I'm not sure what to do here. The original\n    // idea was to create TypedArray views into each part\n    // of the block. This is useful, for example if you have\n    // a block with { mat4: model; mat4 view; mat4 projection; }\n    // you'll get a Float32Array for each one suitable for\n    // passing to most JS math libraries including twgl's and glMatrix.js.\n    //\n    // But, if you have a an array of structures, especially if that\n    // array is large, you get a whole bunch of TypedArray views.\n    // Every one of them has overhead and switching between them all\n    // is probably a cache miss. In that case it would really be better\n    // to just have one view (asFloat) and have all the setters\n    // just reference the correct portion. But, then you can't easily\n    // treat a matrix, or a vec4, as a standalone thing like you can\n    // with all the views.\n    //\n    // Another problem with the views is they are not shared. With\n    // uniforms you have one set of setters. With UniformBlockInfo\n    // you have a set of setters *pre block instance*. That's because\n    // TypedArray views can't be mapped to different buffers.\n    //\n    // My gut right now is if you really want the speed and compactness\n    // then you should probably roll your own solution. TWGL's goal\n    // here is ease of use as AFAICT there is no simple generic efficient\n    // solution.\n    const setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);\n    setters[name] = setter;\n    addSetterToUniformTree(name, setter, setterTree, setters);\n  });\n  return {\n    name: blockName,\n    array,\n    asFloat: new Float32Array(array),  // for debugging\n    buffer,\n    uniforms,\n    setters,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  You can also fill out structure and array values either via\n *  shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *     };\n *     uniform Lights {\n *       Light lights[2];\n *     };\n *\n *     // in JavaScript\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1] },\n *         { intensity: 2.0, color: [0, 0, 1, 1] },\n *       ],\n *     });\n *\n *     // or the more traditional way\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1]: { intensity: 5.0, color: [1, 0, 0, 1] },\n *     });\n *\n *   But you can not specify leaf array indices.\n *\n *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.\n *  For example the actual layout of `someVec3Array` above in memory\n *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values\n *  as shown about and copies them, skipping the padding. This might\n *  be confusing if you're already familiar with Uniform blocks.\n *\n *  If you want to deal with the padding yourself you can access the array\n *  buffer views directly. eg:\n *\n *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const setters = uniformBlockInfo.setters;\n  for (const name in values) {\n    const setter = setters[name];\n    if (setter) {\n      const value = values[name];\n      setter(value);\n    }\n  }\n}\n\nfunction setUniformTree(tree, values) {\n  for (const name in values) {\n    const prop = tree[name];\n    if (typeof prop === 'function') {\n      prop(values[name]);\n    } else {\n      setUniformTree(tree[name], values[name]);\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     var texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n *   You can also fill out structure and array values either via\n *   shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *     };\n *     uniform Light lights[2];\n *\n *     // in JavaScript\n *\n *     twgl.setUniforms(programInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1] },\n *         { intensity: 2.0, color: [0, 0, 1, 1] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setUniforms(programInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1]: { intensity: 5.0, color: [1, 0, 0, 1] },\n *     });\n *\n *   But you can not specify leaf array indices\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, ...args) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = args.length;\n  for (let aNdx = 0; aNdx < numArgs; ++aNdx) {\n    const values = args[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n      continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program,\n    uniformSetters,\n    attribSetters,\n  };\n\n  if (isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  let good = true;\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (source.indexOf(\"\\n\") < 0) {\n      const script = getElementById(source);\n      if (!script) {\n        progOptions.errorCallback(\"no element with id: \" + source);\n        good = false;\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n  if (!good) {\n    return null;\n  }\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n  return createProgramInfoFromProgram(gl, program);\n}\n\nvar programs = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttributeSetters: createAttributeSetters,\n  createProgram: createProgram,\n  createProgramFromScripts: createProgramFromScripts,\n  createProgramFromSources: createProgramFromSources,\n  createProgramInfo: createProgramInfo,\n  createProgramInfoFromProgram: createProgramInfoFromProgram,\n  createUniformSetters: createUniformSetters,\n  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,\n  createUniformBlockInfo: createUniformBlockInfo,\n  createTransformFeedback: createTransformFeedback,\n  createTransformFeedbackInfo: createTransformFeedbackInfo,\n  bindTransformFeedbackInfo: bindTransformFeedbackInfo,\n  setAttributes: setAttributes,\n  setBuffersAndAttributes: setBuffersAndAttributes,\n  setUniforms: setUniforms,\n  setUniformsAndBindTextures: setUniformsAndBindTextures,\n  setUniformBlock: setUniformBlock,\n  setBlockUniforms: setBlockUniforms,\n  bindUniformBlock: bindUniformBlock\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT$3                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nvar draw = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  drawBufferInfo: drawBufferInfo,\n  drawObjectList: drawObjectList\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D$2                     = 0x0de1;\n\nconst UNSIGNED_BYTE$3                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT$1                = 0x1902;\nconst RGBA$1                           = 0x1908;\nconst DEPTH_COMPONENT24$1              = 0x81a6;\nconst DEPTH_COMPONENT32F$1             = 0x8cac;\nconst DEPTH24_STENCIL8$1               = 0x88f0;\nconst DEPTH32F_STENCIL8$1              = 0x8cad;\n\n/* Framebuffer Object. */\nconst RGBA4$1                          = 0x8056;\nconst RGB5_A1$1                        = 0x8057;\nconst RGB565$1                         = 0x8D62;\nconst DEPTH_COMPONENT16$1              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL$1                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n/* TextureWrapMode */\nconst CLAMP_TO_EDGE$1                  = 0x812F;\n\n/* TextureMagFilter */\nconst LINEAR$1                         = 0x2601;\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA$1, type: UNSIGNED_BYTE$3, min: LINEAR$1, wrap: CLAMP_TO_EDGE$1, },\n  { format: DEPTH_STENCIL$1, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT24$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT32F$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH24_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH32F_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format, internalFormat) {\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4$1] = true;\nrenderbufferFormats[RGB5_A1$1] = true;\nrenderbufferFormats[RGB565$1] = true;\nrenderbufferFormats[DEPTH_STENCIL$1] = true;\nrenderbufferFormats[DEPTH_COMPONENT16$1] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  let colorAttachmentCount = 0;\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n  attachments.forEach(function(attachmentOptions) {\n    let attachment = attachmentOptions.attachment;\n    const format = attachmentOptions.format;\n    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;\n    }\n    if (!attachment) {\n      if (isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR$1;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR$1;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE$1;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE$1;\n        }\n        attachment = createTexture(gl, textureOptions);\n      }\n    }\n    if (isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.target || TEXTURE_2D$2,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    if (isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n    } else if (isTexture(gl, attachment)) {\n      resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nvar framebuffers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bindFramebufferInfo: bindFramebufferInfo,\n  createFramebufferInfo: createFramebufferInfo,\n  resizeFramebufferInfo: resizeFramebufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER$2           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER$2, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nvar vertexArrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createVertexArrayInfo: createVertexArrayInfo,\n  createVAOAndSetAttributes: createVAOAndSetAttributes,\n  createVAOFromBufferInfo: createVAOFromBufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$2 = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults$2(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$2);\n  setDefaults(newDefaults);  // eslint-disable-line\n  setDefaults$1(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          warn(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport { addExtensionsToContext, attributes, bindFramebufferInfo, bindTransformFeedbackInfo, bindUniformBlock, canFilter, canGenerateMipmap, createAttribsFromArrays, createAttributeSetters, createBufferFromArray, createBufferFromTypedArray, createBufferInfoFromArrays, createBuffersFromArrays, createFramebufferInfo, createProgram, createProgramFromScripts, createProgramFromSources, createProgramInfo, createProgramInfoFromProgram, createSampler, createSamplers, createTexture, createTextures, createTransformFeedback, createTransformFeedbackInfo, createUniformBlockInfo, createUniformBlockInfoFromProgram, createUniformBlockSpecFromProgram, createUniformSetters, createVAOAndSetAttributes, createVAOFromBufferInfo, createVertexArrayInfo, draw, drawBufferInfo, drawObjectList, framebuffers, getArray as getArray_, getBytesPerElementForInternalFormat, getContext, getFormatAndTypeForInternalFormat, getGLTypeForTypedArray, getGLTypeForTypedArrayType, getNumComponentsForFormat, getNumComponents as getNumComponents_, getTypedArrayTypeForGLType, getWebGLContext, glEnumToString, isArrayBuffer, isWebGL1, isWebGL2, loadTextureFromUrl, m4, primitives, programs, resizeCanvasToDisplaySize, resizeFramebufferInfo, resizeTexture, setAttribInfoBufferFromArray, setDefaults as setAttributeDefaults_, setAttributePrefix, setAttributes, setBlockUniforms, setBuffersAndAttributes, setDefaultTextureColor, setDefaults$2 as setDefaults, setEmptyTexture, setSamplerParameters, setDefaults$1 as setTextureDefaults_, setTextureFilteringForSize, setTextureFromArray, setTextureFromElement, setTextureParameters, setUniformBlock, setUniforms, setUniformsAndBindTextures, textures, typedarrays, utils, v3, vertexArrays };\n"],"names":["addExtensionsToContext","attributes","bindFramebufferInfo","bindTransformFeedbackInfo","bindUniformBlock","canFilter","canGenerateMipmap","createAttribsFromArrays","createAttributeSetters","createBufferFromArray","createBufferFromTypedArray","createBufferInfoFromArrays","createBuffersFromArrays","createFramebufferInfo","createProgram","createProgramFromScripts","createProgramFromSources","createProgramInfo","createProgramInfoFromProgram","createSampler","createSamplers","createTexture","createTextures","createTransformFeedback","createTransformFeedbackInfo","createUniformBlockInfo","createUniformBlockInfoFromProgram","createUniformBlockSpecFromProgram","createUniformSetters","createVAOAndSetAttributes","createVAOFromBufferInfo","createVertexArrayInfo","draw","drawBufferInfo","drawObjectList","framebuffers","getArray","getBytesPerElementForInternalFormat","getContext","getFormatAndTypeForInternalFormat","getGLTypeForTypedArray","getGLTypeForTypedArrayType","getNumComponentsForFormat","getNumComponents","getTypedArrayTypeForGLType","getWebGLContext","glEnumToString","isArrayBuffer","isWebGL1","isWebGL2","loadTextureFromUrl","m4","primitives","programs","resizeCanvasToDisplaySize","resizeFramebufferInfo","resizeTexture","setAttribInfoBufferFromArray","setDefaults","setAttributePrefix","setAttributes","setBlockUniforms","setBuffersAndAttributes","setDefaultTextureColor","setDefaults$2","setEmptyTexture","setSamplerParameters","setDefaults$1","setTextureFilteringForSize","setTextureFromArray","setTextureFromElement","setTextureParameters","setUniformBlock","setUniforms","setUniformsAndBindTextures","textures","typedarrays","utils","v3","vertexArrays","VecType","Float32Array","create","x","y","z","dst","add","a","b","subtract","cross","t1","t2","normalize","lenSq","len","Math","sqrt","multiply","xAxis","yAxis","zAxis","Object","freeze","__proto__","copy","v","distance","dx","dy","dz","distanceSq","divide","divScalar","k","dot","lerp","t","lerpV","length","lengthSq","max","min","mulScalar","negate","setDefaultType","ctor","oldType","MatType","copy$1","m","identity","inverse","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t3","d","transformPoint","v0","v1","v2","transformDirection","axisRotate","axis","angleInRadians","n","xx","yy","zz","c","cos","s","sin","oneMinusCosine","r00","r01","r02","r10","r11","r12","r20","r21","r22","axisRotation","frustum","left","right","bottom","top","near","far","getAxis","off","getTranslation","lookAt","eye","target","up","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","ortho","perspective","fieldOfViewYInRadians","aspect","zNear","zFar","f1","tan","PI","rangeInv","rotateX","rotateY","rotateZ","rotationX","rotationY","rotationZ","scale","scaling","setAxis","setTranslation","transformNormal","mi","translate","translation","transpose","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","glTypeToTypedArray","tt","typedArray","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Error","typedArrayType","type","CTOR","SharedArrayBuffer","buffer","ArrayBuffer","copyExistingProperties","src","keys","forEach","key","hasOwnProperty","error","_len","arguments","args","Array","_key","_console","console","apply","_helpers","toConsumableArray","warn","isRenderbuffer","gl","WebGLRenderbuffer","isTexture","WebGLTexture","ARRAY_BUFFER","defaults","attribPrefix","prefix","newDefaults","setBufferFromTypedArray","array","drawType","bindBuffer","bufferData","WebGLBuffer","createBuffer","isIndices","name","data","texcoordRE","colorRE","guessNumComponentsFromName","numComponents","test","concat","arrayName","size","makeTypedArray","isArray","Type","arrays","attribs","attribName","attrib","value","normalization","numValues","arrayType","numBytes","BYTES_PER_ELEMENT","undefined","getNormalizationForTypedArray","stride","offset","divisor","attribInfo","bufferSubData","positionKeys","srcBufferInfo","newAttribs","bufferInfo","assign","indices","newIndices","numElements","elementType","ii","getBufferParameter","totalElements","getNumElementsFromAttributes","buffers","getNumElementsFromNonIndexedArrays","setAttributeDefaults_","getNumComponents_","getArray_","getArray$1","getNumComponents$1","augmentTypedArray","cursor","push","jj","reset","opt_index","defineProperty","get","this","createAugmentedTypedArray","opt_type","allButIndices","applyFuncToV3Array","matrix","fn","tmp","transformNormal$1","reorientDirections","reorientNormals","reorientPositions","reorientVertices","indexOf","createXYQuadVertices","xOffset","yOffset","position","normal","texcoord","createPlaneVertices","width","depth","subdivisionsWidth","subdivisionsDepth","numVertices","positions","normals","texcoords","u","numVertsAcross","z1","x1","createSphereVertices","radius","subdivisionsAxis","subdivisionsHeight","opt_startLatitudeInRadians","opt_endLatitudeInRadians","opt_startLongitudeInRadians","opt_endLongitudeInRadians","latRange","longRange","theta","phi","sinTheta","cosTheta","sinPhi","ux","uy","uz","numVertsAround","x2","y1","CUBE_FACE_INDICES","createCubeVertices","cornerVertices","faceNormals","uvCoords","f2","faceIndices","uv","createTruncatedConeVertices","bottomRadius","topRadius","height","radialSubdivisions","verticalSubdivisions","opt_topCap","opt_bottomCap","topCap","bottomCap","extra","vertsAroundEdge","slant","atan2","cosSlant","sinSlant","end","ringRadius","yy1","ii1","expandRLEData","rleData","padding","runLength","element","slice","create3DFVertices","colors","numVerts","color","createCrescentVertices","verticalRadius","outerRadius","innerRadius","thickness","subdivisionsDown","startOffset","endOffset","offsetRange","lerp1","createArc","arcRadius","normalMult","normalAdd","uMult","uAdd","uBack","xBack","angle","px","py","pz","x3","uBack1","createSurface","leftArcOffset","rightArcOffset","numVerticesDown","createCylinderVertices","createTorusVertices","bodySubdivisions","startAngle","endAngle","range","radialParts","bodyParts","sliceAngle","sliceSin","ny","ring","ringAngle","xSin","zCos","nx","nz","slice1","ring1","nextRingIndex","nextSliceIndex","createDiscVertices","divisions","stacks","stackPower","firstIndex","radiusSpan","pointsPerStack","stack","stackRadius","pow","i","createBufferFunc","prototype","call","createBufferInfoFunc","arraySpecPropertyNames","copyElements","dstNdx","createArrayOfSameType","srcArray","arraySrc","newArray","constructor","newArraySpec","create3DFBufferInfo","create3DFBuffers","createCubeBufferInfo","createCubeBuffers","createPlaneBufferInfo","createPlaneBuffers","createSphereBufferInfo","createSphereBuffers","createTruncatedConeBufferInfo","createTruncatedConeBuffers","createXYQuadBufferInfo","createXYQuadBuffers","createCrescentBufferInfo","createCrescentBuffers","createCylinderBufferInfo","createCylinderBuffers","createTorusBufferInfo","createTorusBuffers","createDiscBufferInfo","createDiscBuffers","createCresentBufferInfo","createCresentBuffers","createCresentVertices","deindexVertices","vertices","newVertices","filter","channel","srcBuffer","dstBuffer","flattenNormals","numNormals","nax","nay","naz","nbx","nby","nbz","makeRandomVertexColors","options","vColors","rand","ndx","random","numVertsPerColor","vertsPerColor","numSets","ii2","concatVertices","arrayOfArrays","baseName","ii3","names","arrayInfo","_loop","base1","newArrays","info","arraySpec","spec","getLengthOfCombinedArrays","base","baseIndex","copyArraysToNewArray","duplicateVertices","texStorage2D","haveEnumsForType","enums","s_ctx","s_textureInternalFormatInfo","existing","addEnums","toString","defaults$1","textureColor","textureOptions","crossOrigin","isArrayBuffer$1","getShared2DContext","document","createElement","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","DEPTH_COMPONENT","DEPTH_STENCIL","CLAMP_TO_EDGE","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","UNPACK_ALIGNMENT","BYTE$2","UNSIGNED_BYTE$2","SHORT$2","UNSIGNED_SHORT$2","INT$2","UNSIGNED_INT$2","FLOAT$2","HALF_FLOAT$1","HALF_FLOAT_OES","UNSIGNED_INT_2_10_10_10_REV$1","RG","RG_INTEGER","RED","RED_INTEGER","RGB_INTEGER","RGBA_INTEGER","formatInfo","f","getTextureInternalFormatInfo","internalFormat","textureFormat","colorRenderable","textureFilterable","bytesPerElement","bytesPerElementMap","format","isPowerOf2","numColorComponents","getTextureTypeForArrayType","defaultType","guessDimensions","setPackState","colorspaceConversion","pixelStorei","premultiplyAlpha","flipY","setSkipStateToDefault","setTextureSamplerParameters","parameteriFn","minMag","mag","wrap","WebGLSampler","wrapR","wrapS","wrapT","minLod","maxLod","baseLevel","maxLevel","tex","bindTexture","texParameteri","sampler","samplerParameteri","samplerOptions","samplers","generateMipmap","filtering","shouldAutomaticallySetTextureFilteringForSize","auto","level","getCubeFaceOrder","cubeFaceOrder","getCubeFacesWithNdx","facesWithNdx","map","face","sort","formatType","slices","imgWidth","imgHeight","nodeName","ctx","canvas","drawImage","texImage2D","createImageBitmap","colorSpaceConversion","then","imageBitmap","smallest","largest","xMult","yMult","texImage3D","srcX","srcY","texSubImage3D","noop","setToAnonymousIfUndefinedAndURLIsNotSameOrigin","url","href","hostname","location","port","protocol","localOrigin","URL","origin","urlIsSameOrigin","isTexImageSource","obj","ImageBitmap","ImageData","HTMLElement","loadAndUseImage","callback","setTimeout","img","Image","clearEventHandlers","removeEventListener","onError","onLoad","msg","addEventListener","err","bm","cb","mode","fetch","response","ok","blob","bitmap","catch","e","loadImage","setTextureTo1PixelColor","make1Pixel","loadCubemapFromUrls","urls","imgs","numToLoad","errors","faces","faceTarget","otherTarget","loadSlicesFromUrls","firstImage","dimensions","byteLength","cbrt","unpackAlignment","faceSize","subarray","numDownloading","textures1","images","callCallbackIfReady","onLoadFn","setTextureDefaults_","error$1","warn$1","getElementById","id","TEXTURE0","ARRAY_BUFFER$1","UNIFORM_BUFFER","FLOAT$3","INT$3","UNSIGNED_INT$3","TEXTURE_2D$1","TEXTURE_CUBE_MAP$1","TEXTURE_3D$1","TEXTURE_2D_ARRAY$1","typeMap","getBindPointForSamplerType","bindPoint","intSetter","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","textureOrPair","texture","activeTexture","bindSampler","samplerArraySetter","units","textures2","index","textures3","floatAttribSetter","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","uintAttribSetter","vertexAttrib4uiv","matAttribSetter","typeInfo1","defaultSize","count","normalize1","rowOffset","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","cols","uniform3fv","uniform4fv","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","rows","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","attrTypeMap","errorRE","addLineNumbersWithError","log","lineOffset","matches","matchAll","lineNoToErrorMap","Map","lineNo","parseInt","next","substring","split","line","join","spaceRE","loadShader","shaderSource","shaderType","opt_errorCallback","errFn","shader","createShader","replace","compileShader","getShaderParameter","lastError","getShaderInfoLog","deleteShader","getProgramOptions","opt_attribs","opt_locations","transformFeedbackVaryings","transformFeedbackMode","errorCallback","opt","attribLocations","defaultShaderType","getShaderTypeFromScriptType","scriptType","deleteShaders","shaders","progOptions","realShaders","newShaders","elem","text","WebGLShader","program","attachShader","bindAttribLocation","varyings","linkProgram","getProgramParameter","getProgramInfoLog","getShaderSource","SHADER_TYPE","deleteProgram","createShaderFromScript","scriptId","opt_shaderType","shaderScript","shaderScriptIds","shaderSources","isBuiltIn","startsWith","tokenRE","addSetterToUniformTree","fullPath","node1","uniformSetters","tokens","tokenNdx","path","token","isArrayIndex","accessor","token1","child","node","setUniformTree","textureUnit","createUniformSetter","uniformInfo","endsWith","typeInfo","uniformTree","numUniforms","uniformInfo1","getActiveUniform","substr","location1","getUniformLocation","setter1","numVaryings","varying","getTransformFeedbackVarying","transformFeedbackInfo","buf","bindBufferRange","bindBufferBase","programInfo","tf","bindTransformFeedback","useProgram","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","ii4","getActiveUniformBlockName","blockSpec","getUniformBlockIndex","usedByVertexShader","getActiveUniformBlockParameter","usedByFragmentShader","used","arraySuffixRE","uniformBlockSpec","blockName","uniforms","uniformBufferIndex","uniformBlockBinding","setters","setterTree","uniformNdx","uniformView","view","totalRows","row","col","set","createUniformBlockUniformSetter","asFloat","uniformBlockInfo","bufferBindIndex","values","tree","prop","actualSetters","numArgs","aNdx","attribSetters","numAttribs","getActiveAttrib","getAttribLocation","vertexArrayObject","bindVertexArray","good","source","script","instanceCount","drawElementsInstanced","drawElements","drawArraysInstanced","drawArrays","objectsToDraw","lastUsedProgramInfo","lastUsedBufferInfo","object","active","vertexArrayInfo","bindBuffers","RENDERBUFFER","DEPTH_STENCIL$1","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","CLAMP_TO_EDGE$1","LINEAR$1","defaultAttachments","attachmentsByFormat","renderbufferFormats","attachments","fb","createFramebuffer","bindFramebuffer","drawingBufferWidth","drawingBufferHeight","colorAttachmentCount","framebufferInfo","framebuffer","attachmentOptions","attachment","attachmentPoint","getAttachmentPointForFormat","isRenderbufferFormat","createRenderbuffer","bindRenderbuffer","renderbufferStorage","framebufferRenderbuffer","layer","framebufferTextureLayer","framebufferTexture2D","viewport","programInfos","vao","createVertexArray","defaults$2","prefixRE","addExtensionToContext","extensionName","ext","getExtension","fnSuffix","exec","enumSuffix","isFunc","suffix","origFn","supportedExtensions","context","create3DContext","createContext","multiplier","clientWidth","clientHeight"],"version":3,"file":"index.5ed48ace.js.map"}