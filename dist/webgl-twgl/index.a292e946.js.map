{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-2521a168757c8882.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","src/webgl-twgl/app.js","src/webgl-twgl/webgl-twgl.js","src/webgl-twgl/shader/fragment.glsl","src/webgl-twgl/shader/vertex.glsl","node_modules/@parcel/runtime-js/lib/runtime-ba449a5150dd8c3b.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"4dZA9\\\":\\\"index.a292e946.js\\\",\\\"cJfsF\\\":\\\"f-texture.2ff25e20.png\\\",\\\"9LU3i\\\":\\\"index.ba31ca7d.js\\\",\\\"9TbUc\\\":\\\"index.5ed48ace.js\\\",\\\"2G3CA\\\":\\\"index.15f73c8a.js\\\",\\\"eRuGw\\\":\\\"index.3eb9ea76.js\\\"}\"));","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","import { Pane } from 'tweakpane';\nimport { WebGLTWGL } from './webgl-twgl';\n\nlet DEBUG = false;\n\nif (process.env.NODE_ENV !== 'production') {\n    // Only runs in development and will be stripped in production builds.\n    DEBUG = true;\n}\n\nlet sketch;\nlet resizeTimeoutId;\n\nwindow.addEventListener('load', () => {\n    const canvas = document.body.querySelector('#c');\n\n    let pane;\n    if (DEBUG) {\n        pane = new Pane({ title: 'Settings' });\n    }\n\n    sketch = new WebGLTWGL(canvas, pane, (sketch) => {\n        sketch.run(); \n    });\n});\n\nwindow.addEventListener('resize', () => {\n    if (sketch) {\n        if (resizeTimeoutId)\n            clearTimeout(resizeTimeoutId);\n\n        resizeTimeoutId = setTimeout(() => {\n            resizeTimeoutId = null;\n            sketch.resize();\n        }, 300);\n    }\n});\n\n\n","\nimport { m4 } from '../math/m4';\nimport chroma from 'chroma-js';\nimport * as twgl from 'twgl.js';\nimport fragmentShaderSource from './shader/fragment.glsl';\nimport vertexShaderSource from './shader/vertex.glsl';\n\nexport class WebGLTWGL {\n    oninit;\n\n    #time = 0;\n    #isDestroyed = false;\n\n    constructor(canvas, pane, oninit = null) {\n        this.canvas = canvas;\n        this.pane = pane;\n        this.oninit = oninit;\n\n        this.image = new Image();\n        this.image.src = new URL('../assets/f-texture.png', import.meta.url);\n        this.image.onload = () => {\n            this.#updateTexture();\n        }\n\n        this.#init();\n    }\n\n    resize() {\n        twgl.resizeCanvasToDisplaySize(this.gl.canvas);\n\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        \n        // set the projection matrix\n        this.#updateProjectionMatrix();\n    }\n\n    run() {\n        this.lastFrameTime = performance.now();\n        this.#animate(this.lastFrameTime);\n    }\n\n    #animate(time) {\n        const delta = time - this.lastFrameTime;\n        this.lastFrameTime = time;\n\n        if (this.#isDestroyed) return;\n\n        // enable backface culling\n        this.gl.enable(this.gl.CULL_FACE);\n        // enable the z-depth tests to discard pixels occluded by other pixels\n        this.gl.enable(this.gl.DEPTH_TEST);\n\n        this.#render();\n\n        // animation models\n        this.rotation[1] += (delta / 30000) * Math.PI * 2;\n        this.#updateModelMatrix();\n\n        requestAnimationFrame(t => this.#animate(t));\n    }\n\n    #render() {\n        // Draw\n        this.gl.clearColor(0, 0, 0, 1);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n\n        this.gl.useProgram(this.program);\n\n        // Set the uniforms that are the same for all objects.\n        twgl.setUniforms(this.uniformSetters, this.uniformsThatAreTheSameForAllObjects);\n\n        /////////////// Draw Plane\n\n        this.gl.bindVertexArray(this.planeVertexArrayObject);\n\n        // Set the matrix uniform\n        this.uniformsThatAreComputedForEachObject.u_world = this.planeModelMatrix;\n        m4.transpose(m4.inverse(this.planeModelMatrix), this.uniformsThatAreComputedForEachObject.u_worldInverseTranspose);\n        twgl.setUniforms(this.uniformSetters, this.uniformsThatAreComputedForEachObject);\n\n        // Set the uniforms that are specific to the this object.\n        twgl.setUniforms(this.uniformSetters, this.material2Uniforms);\n        \n        // Draw the geometry.\n        this.gl.drawElements(this.gl.TRIANGLES, this.planeBuffers.numElements, this.gl.UNSIGNED_SHORT, 0);\n\n        /////////////// Draw object\n\n        this.gl.bindVertexArray(this.objectVertexArrayObject);\n\n        // Set the matrix uniform\n        this.uniformsThatAreComputedForEachObject.u_world = this.modelMatrix;\n        m4.transpose(m4.inverse(this.modelMatrix), this.uniformsThatAreComputedForEachObject.u_worldInverseTranspose);\n        twgl.setUniforms(this.uniformSetters, this.uniformsThatAreComputedForEachObject);\n\n        // Set the uniforms that are specific to the this object.\n        twgl.setUniforms(this.uniformSetters, this.material1Uniforms);\n        \n        // Draw the geometry.\n        this.gl.drawElements(this.gl.TRIANGLES, this.objectBuffers.numElements, this.gl.UNSIGNED_SHORT, 0);\n    }\n\n    destroy() {\n        this.#isDestroyed = true;\n    }\n\n    degToRad(d) {\n        return d * Math.PI / 180;\n    }\n\n    rand(min, max) {\n        if (max === undefined) {\n            max = min;\n            min = 0;\n        }\n        return min + Math.random() * (max - min);\n    };\n    \n    randInt(range) {\n        return Math.floor(Math.random() * range);\n    };\n\n    #init() {\n        this.gl = this.canvas.getContext('webgl2');\n        const gl = this.gl;\n\n        if (!this.gl) {\n            throw new Error('No WebGL 2 context!')\n        }\n\n        // Tell the twgl to match position with a_position,\n        // normal with a_normal etc..\n        twgl.setAttributePrefix(\"a_\");\n\n        // setup GLSL program (compiles shader, links program, look up locations)\n        this.program = twgl.createProgramFromSources(gl, [vertexShaderSource, fragmentShaderSource]);\n        this.uniformSetters = twgl.createUniformSetters(gl, this.program);\n        const attribSetters  = twgl.createAttributeSetters(gl, this.program);\n\n        //////////////////////// Object VAO\n        this.objectBuffers = twgl.primitives.createCubeBuffers(this.gl, 20);\n        this.objectBuffers = twgl.primitives.createSphereBuffers(this.gl, 15, 32, 32);\n        const objectAttribs = {\n            a_position: { buffer: this.objectBuffers.position, numComponents: 3, },\n            a_normal:   { buffer: this.objectBuffers.normal,   numComponents: 3, },\n            a_texcoord: { buffer: this.objectBuffers.texcoord, numComponents: 2, },\n        };\n        this.objectVertexArrayObject = twgl.createVAOAndSetAttributes(gl, attribSetters, objectAttribs, this.objectBuffers.indices);\n\n        //////////////////////// object VAO\n        this.planeBuffers = twgl.primitives.createPlaneBuffers(this.gl, 100, 100, 1, 1);\n        const planeAttribs = {\n            a_position: { buffer: this.planeBuffers.position, numComponents: 3, },\n            a_normal:   { buffer: this.planeBuffers.normal,   numComponents: 3, },\n            a_texcoord: { buffer: this.planeBuffers.texcoord, numComponents: 2, },\n        };\n        this.planeVertexArrayObject = twgl.createVAOAndSetAttributes(gl, attribSetters, planeAttribs, this.planeBuffers.indices);\n\n        // Init the image texture\n        this.imageTexture = this.#createAndSetupTexture(this.gl);\n        // Fill the texture with a 1x1 white pixel.\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, new Uint8Array([255, 255, 255, 255]));\n\n        // Create a texture.\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // fill texture with 3x2 pixels\n        const level = 0;\n        const internalFormat = gl.LUMINANCE;\n        const width = 8;\n        const height = 8;\n        const border = 0;\n        const format = gl.LUMINANCE;\n        const type = gl.UNSIGNED_BYTE;\n        const data = new Uint8Array([\n            255, 128, 255, 128, 255, 128, 255, 128, \n            128, 255, 128, 255, 128, 255, 128, 255,\n            255, 128, 255, 128, 255, 128, 255, 128, \n            128, 255, 128, 255, 128, 255, 128, 255,\n            255, 128, 255, 128, 255, 128, 255, 128, \n            128, 255, 128, 255, 128, 255, 128, 255,\n            255, 128, 255, 128, 255, 128, 255, 128, \n            128, 255, 128, 255, 128, 255, 128, 255,\n        ]);\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, data);\n        \n        // set the filtering so we don't need mips and it's not filtered\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        this.material1Uniforms = {\n            u_colorMult:             chroma.hsv(0, 0, 1).gl(),\n            u_ambient:               [0.2, 0.2, 0.2, 1],\n            u_diffuse:               texture,\n            u_specular:              [1, 1, 1, 1],\n            u_shininess:             50,\n            u_specularFactor:        .7,\n            u_projectedTexture:      this.imageTexture\n        };\n\n        this.material2Uniforms = {\n            u_colorMult:             chroma.hsv(200, 1, 1).gl(),\n            u_ambient:               [0.1, 0.1, 0.1, 1],\n            u_diffuse:               texture,\n            u_specular:              [1, 1, 1, 1],\n            u_shininess:             5,\n            u_specularFactor:        .25,\n            u_projectedTexture:      this.imageTexture\n        };\n\n        // init the transformation properties\n        this.origin = [0, 0, 0];\n        this.translation = [0, 0, 0];\n        this.scale = [1, 1, 1];\n        this.rotation = [0, 0, 0];\n        this.#updateModelMatrix();\n\n        this.planeModelMatrix = m4.translation(0, -15, 0);\n\n        // init projection\n        this.#updateProjectionMatrix();\n\n        // init camera\n        this.cameraRotationY = 0;\n        this.#updateCameraMatrix();\n\n        // create the texture matrix\n        const textureWorldMatrix = m4.lookAt(\n            [50, 50, 50],\n            [0, 0, 0],\n            [0, -1, 0]\n        );\n        const projWidth = 0.32;\n        const projHeight = 0.32;\n        m4.scale(textureWorldMatrix, projWidth, projHeight, 1, textureWorldMatrix);\n        const textureProjectionMatrix = m4.perspective(\n            this.degToRad(45),\n            projWidth / projHeight,\n            0.1,  // near\n            200)\n\n        this.uniformsThatAreTheSameForAllObjects = {\n            u_projection:            this.projectionMatrix,\n            u_view:                  this.viewMatrix,\n            u_lightWorldPos:         [-100, 100, 100],\n            u_viewInverse:           this.cameraMatrix,\n            u_lightColor:            [1, 1, 1, 1],\n            u_textureMatrix:         m4.multiply(textureProjectionMatrix, m4.inverse(textureWorldMatrix))\n        };\n    \n        this.uniformsThatAreComputedForEachObject = {\n            u_world:                 m4.identity(),\n            u_worldInverseTranspose: m4.identity(),\n        };\n\n        this.resize();\n\n        this.#initTweakpane();\n\n        if (this.oninit) this.oninit(this);\n    }\n\n    #updateTexture() {\n        // replace the placeholder texture\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.imageTexture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.image);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n    }\n\n    #createAndSetupTexture(gl) {\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        return texture;\n    }\n\n    #updateProjectionMatrix() {\n        const aspect = this.gl.canvas.clientWidth / this.gl.canvas.clientHeight;\n        const zNear = 1;\n        const zFar = 2000;\n        const fov = 75 * (Math.PI / 180);\n        this.projectionMatrix = m4.perspective(fov, aspect, zNear, zFar);\n    }\n\n    #updateCameraMatrix() {\n        // init the camera matrix\n        this.cameraMatrix = m4.yRotation(this.cameraRotationY);\n        this.cameraMatrix = m4.translate(this.cameraMatrix, 0, 0, 50);\n\n        // init the view matrix\n        this.viewMatrix = m4.inverse(this.cameraMatrix, this.viewMatrix);\n    }\n\n    #updateModelMatrix() {\n        this.modelMatrix = m4.translation(this.translation[0], this.translation[1], this.translation[2]);\n        this.modelMatrix = m4.xRotate(this.modelMatrix, this.rotation[0]);\n        this.modelMatrix = m4.yRotate(this.modelMatrix, this.rotation[1]);\n        this.modelMatrix = m4.zRotate(this.modelMatrix, this.rotation[2]);\n        this.modelMatrix = m4.scale(this.modelMatrix, this.scale[0], this.scale[1], this.scale[2]);\n        this.modelMatrix = m4.translate(this.modelMatrix, -this.origin[0], -this.origin[1], -this.origin[2]);\n    }\n\n    #initTweakpane() {\n        if (this.pane) {\n            // init tweakpane folders and inputs\n\n            const cameraRYSlider = this.pane.addBlade({\n                view: 'slider',\n                label: 'camera RY',\n                min: 0,\n                max: 2 * Math.PI,\n                value: 0,\n            });\n\n            cameraRYSlider.on('change', e => {\n                this.cameraRotationY = e.value;\n                this.#updateCameraMatrix();\n            });\n        }\n    }\n}\n","#version 300 es\nprecision highp float;\n \nin vec4 v_position;\nin vec2 v_texCoord;\nin vec3 v_normal;\nin vec3 v_surfaceToLight;\nin vec3 v_surfaceToView;\nin vec4 v_projectedTexcoord;\n \nuniform vec4 u_lightColor;\nuniform vec4 u_ambient;\nuniform sampler2D u_diffuse;\nuniform sampler2D u_projectedTexture;\nuniform vec4 u_specular;\nuniform float u_shininess;\nuniform float u_specularFactor;\nuniform vec4 u_colorMult;\n \nout vec4 outColor;\n \nvec4 lit(float l ,float h, float m) {\n  return vec4(1.0,\n              max(l, 0.0),\n              (l > 0.0) ? pow(max(0.0, h), m) : 0.0,\n              1.0);\n}\n \nvoid main() {\n    // divide by w to get the correct value\n    vec3 projectedTexcoord = v_projectedTexcoord.xyz / v_projectedTexcoord.w;\n    projectedTexcoord = projectedTexcoord * 0.5 + 0.5;\n    \n    bool inRange = \n        projectedTexcoord.x >= 0.0 &&\n        projectedTexcoord.x <= 1.0 &&\n        projectedTexcoord.y >= 0.0 &&\n        projectedTexcoord.y <= 1.0;\n    float projectedAmount = inRange ? 1.0 : 0.0;\n    vec4 projectedTexColor = texture(u_projectedTexture, projectedTexcoord.xy);\n\n\n    vec4 diffuseColor = texture(u_diffuse, v_texCoord) * u_colorMult;\n    vec4 combinedColor = mix(diffuseColor, projectedTexColor, projectedAmount);\n    vec3 a_normal = normalize(v_normal);\n    vec3 surfaceToLight = normalize(v_surfaceToLight);\n    vec3 surfaceToView = normalize(v_surfaceToView);\n    vec3 halfVector = normalize(surfaceToLight + surfaceToView);\n    vec4 litR = lit(dot(a_normal, surfaceToLight), dot(a_normal, halfVector), u_shininess);\n    outColor = vec4((u_lightColor * (combinedColor * litR.y + combinedColor * u_ambient + u_specular * litR.z * u_specularFactor)).rgb, diffuseColor.a);\n}","#version 300 es\n \nuniform mat4 u_projection;\nuniform mat4 u_view;\nuniform vec3 u_lightWorldPos;\nuniform mat4 u_world;\nuniform mat4 u_viewInverse;\nuniform mat4 u_worldInverseTranspose;\nuniform mat4 u_textureMatrix;\n \nin vec4 a_position;\nin vec3 a_normal;\nin vec2 a_texcoord;\n \nout vec4 v_position;\nout vec2 v_texCoord;\nout vec3 v_normal;\nout vec3 v_surfaceToLight;\nout vec3 v_surfaceToView;\nout vec4 v_projectedTexcoord;\n \nvoid main() {\n    vec4 worldPosition = u_world * a_position;\n    v_texCoord = a_texcoord;\n    v_position = u_projection * u_view * worldPosition;\n    v_normal = (u_worldInverseTranspose * vec4(a_normal, 0)).xyz;\n    v_surfaceToLight = u_lightWorldPos - worldPosition.xyz;\n    v_surfaceToView = (u_viewInverse[3] - worldPosition).xyz;\n    v_projectedTexcoord = u_textureMatrix * worldPosition;\n    gl_Position = v_position;\n}","module.exports = require('./helpers/bundle-url').getBundleURL('4dZA9') + \"../\" + require('./helpers/bundle-manifest').resolve(\"cJfsF\");","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;"],"names":["require","register","JSON","parse","mapping","module","exports","pairs","keys","Object","i","length","resolve","id","resolved","Error","sketch","resizeTimeoutId","_tweakpane","_webglTwgl","window","addEventListener","pane","canvas","document","body","querySelector","Pane","title","WebGLTWGL","sketch1","run","clearTimeout","setTimeout","resize","_m4","_chromaJs","_twglJs","_fragmentGlsl","_vertexGlsl","_animate","WeakSet","_render","_init","_updateTexture","_createAndSetupTexture","_updateProjectionMatrix","_updateCameraMatrix","_updateModelMatrix","_initTweakpane","oninit","arguments","_time","set","this","_isDestroyed","add","image","Image","src","URL","onload","updateTexture","call","_this","init","key","resizeCanvasToDisplaySize","gl","viewport","width","height","updateProjectionMatrix","lastFrameTime","performance","now","animate","d","Math","PI","min","max","undefined","random","range","floor","WeakMap","time","delta","_helpers","classPrivateFieldGet","enable","CULL_FACE","DEPTH_TEST","render","rotation","updateModelMatrix","requestAnimationFrame","t","classPrivateMethodGet","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","useProgram","program","setUniforms","uniformSetters","uniformsThatAreTheSameForAllObjects","bindVertexArray","planeVertexArrayObject","uniformsThatAreComputedForEachObject","u_world","planeModelMatrix","transpose","m4","inverse","u_worldInverseTranspose","material2Uniforms","drawElements","TRIANGLES","planeBuffers","numElements","UNSIGNED_SHORT","objectVertexArrayObject","modelMatrix","material1Uniforms","objectBuffers","getContext","setAttributePrefix","createProgramFromSources","createUniformSetters","attribSetters","createAttributeSetters","primitives","createCubeBuffers","createSphereBuffers","objectAttribs","a_position","buffer","position","numComponents","a_normal","normal","a_texcoord","texcoord","createVAOAndSetAttributes","indices","createPlaneBuffers","planeAttribs","imageTexture","createAndSetupTexture","texImage2D","TEXTURE_2D","RGBA","UNSIGNED_BYTE","Uint8Array","texture","createTexture","bindTexture","internalFormat","LUMINANCE","format","type","data","pixelStorei","UNPACK_ALIGNMENT","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","u_colorMult","_chromaJsDefault","default","hsv","u_ambient","u_diffuse","u_specular","u_shininess","u_specularFactor","u_projectedTexture","origin","translation","scale","cameraRotationY","updateCameraMatrix","textureWorldMatrix","lookAt","textureProjectionMatrix","perspective","degToRad","projWidth","u_projection","projectionMatrix","u_view","viewMatrix","u_lightWorldPos","u_viewInverse","cameraMatrix","u_lightColor","u_textureMatrix","multiply","identity","initTweakpane","generateMipmap","REPEAT","aspect","clientWidth","clientHeight","fov","yRotation","translate","xRotate","yRotate","zRotate","addBlade","view","label","value","on","e","getBundleURL","bundleURL","getBaseURL","url","replace","err","matches","stack","match","getOrigin"],"version":3,"file":"index.a292e946.js.map"}