{"mappings":"0xCAAAA,EAAQ,6BAA6BC,SAASC,KAAKC,MAAM,8MCAzD,aAEA,IAAIC,EAAU,GAoBdC,EAAOC,QAAQL,kBAlBGM,GAGhB,IAFA,IAAIC,EAAOC,OAAOD,KAAKD,GAEdG,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BN,EAAQI,EAAKE,IAAMH,EAAMC,EAAKE,KAelCL,EAAOC,QAAQM,iBAXEC,GACf,IAAIC,EAAWV,EAAQS,GAEvB,GAAgB,MAAZC,EACF,MAAM,IAAIC,MAAM,oCAAsCF,GAGxD,OAAOC,+BCnBHd,EAAA,aAAN,IAUIgB,EACAC,EAVEC,EAAAlB,EAAA,4BAYNmB,OAAOC,iBAAiB,QAAQ,WAC5B,IAEIC,EAFEC,EAASC,SAASC,KAAKC,cAAc,MAO3CT,EAAS,IAAGE,EAAAQ,qBAAsBJ,EAAQD,GAAM,SAACM,GAC7CA,EAAOC,YAIfT,OAAOC,iBAAiB,UAAU,WAC1BJ,IACIC,GACAY,aAAaZ,GAEjBA,EAAkBa,YAAW,WACzBb,EAAkB,KAClBD,EAAOe,WACR,+NC9BEL,6BAHPM,EAAAhC,EAAA,gDACAiC,EAAAjC,EAAA,8CAmEFkC,EAAO,IAAAC,QAYPC,EAAK,IAAAD,QA2ELE,EAAY,IAAAF,QAkCZG,EAAe,IAAAH,QAKfI,EAAe,IAAAJ,QAMfK,EAAsB,IAAAL,QAUtBM,EAAa,IAAAN,QAcbO,EAAc,IAAAP,QAedQ,EAA0B,IAAAR,QAkB1BS,EAAoB,IAAAT,QAKpBU,EAAc,IAAAV,QAnQLT,EAAN,iCAAMA,EAkCGJ,EAAQD,OAAMyB,EAAMC,UAAApC,OAAA,QAAA,IAAAoC,UAAA,GAAAA,UAAA,GAAG,kCAlC1BrB,yBACT,cAAA,yBAEA,UAAU,CACNsB,OAAQ,CACJ,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,GAEVC,KAAM,CACF,KAAO,KAAO,KACd,KAAO,KAAO,KACd,KAAO,KAAO,MAElBC,UAAW,EACP,GAAI,GAAI,GACR,EAAK,GAAG,GACR,GAAI,GAAI,GAEZC,OAAQ,EACJ,GAAI,EAAK,GACT,EAAK,EAAI,EACT,EAAI,EAAI,2BAGhB,iBAAiB,CACbF,MAAM,EACNE,QAAQ,EACRD,WAAW,IAGfE,EAAKC,IAAAC,KAAA,mBAAG,IACRC,EAAYF,IAAAC,KAAA,oBAAG,IAiCfpB,EAAOsB,IAAAF,MAYPlB,EAAKoB,IAAAF,MA2ELjB,EAAYmB,IAAAF,MAkCZhB,EAAekB,IAAAF,MAKff,EAAeiB,IAAAF,MAMfd,EAAsBgB,IAAAF,MAUtBb,EAAae,IAAAF,MAcbZ,EAAcc,IAAAF,MAedX,EAA0Ba,IAAAF,MAkB1BV,EAAoBY,IAAAF,MAKpBT,EAAcW,IAAAF,MAhOVA,KAAKhC,OAASA,EACdgC,KAAKjC,KAAOA,EACZiC,KAAKR,OAASA,EAEdQ,KAAKG,MAAQ,IAAIC,MACjBJ,KAAKG,MAAME,IAAG,IAAAC,IAAA5D,EAAA,qBACdsD,KAAKG,MAAMI,OAAS,qCACVzB,EAAA0B,GAAIC,KAAAC,yBA1CTtC,EAAoB,EA8C7BuC,IAAA,eAAA,mCACIX,KAAMX,EAAAuB,GAAyBH,KAA/BT,KAAgCA,KAAKa,GAAG7C,QACxCgC,KAAKa,GAAGC,SAAS,EAAG,EAAGd,KAAKa,GAAG7C,OAAO+C,MAAOf,KAAKa,GAAG7C,OAAOgD,WAGhEL,IAAA,YAAA,sBACMM,EAAAC,qBAAElB,KAAMC,6BAEVD,KAAMpB,EAAAuC,GAAMV,KAAZT,MAGAA,KAAKa,GAAGO,UAAUpB,KAAKqB,qBAAsB,EAAG,EAAG,EAAG,GACtDrB,KAAKa,GAAGS,UAAUtB,KAAKuB,oBAAmBN,EAAAC,qBAAElB,KAAMF,gCAE5CA,EAAImB,EAAAC,qBAAVlB,KAAMF,GAAQ,KAEd0B,uBAAsB,WAAM,OAAMd,EAADpC,aAWrCqC,IAAA,gBAAA,uCACUV,GAAc,OA1Ef7B,EAAN,GA+BH0B,EAAK,IAAA2B,QACLxB,EAAY,IAAAwB,iBAiCZN,IAEInB,KAAKa,GAAGa,WAAW,EAAG,EAAG,EAAG,GAC5B1B,KAAKa,GAAGc,MAAM3B,KAAKa,GAAGe,0CAEtB5B,KAAMjB,EAAA8C,GAAWpB,KAAjBT,KAAkBA,KAAKa,aAO3BL,IAEI,GADAR,KAAKa,GAAKb,KAAKhC,OAAO8D,WAAW,WAC5B9B,KAAKa,GACN,MAAM,IAAIpD,MAAM,uBAGpBuC,KAAK+B,aAAYd,EAAAe,sBAAGhC,KAAMb,EAAA8C,GAAYxB,KAAlBT,KAAmBA,KAAKa,GAAIb,KAAKa,GAAGqB,cAAaC,EAAAC,SACrEpC,KAAKqC,eAAcpB,EAAAe,sBAAGhC,KAAMb,EAAA8C,GAAYxB,KAAlBT,KAAmBA,KAAKa,GAAIb,KAAKa,GAAGyB,gBAAeC,EAAAH,SACzEpC,KAAKwC,QAAOvB,EAAAe,sBAAGhC,KAAMZ,EAAAqD,GAAahC,KAAnBT,KAAoBA,KAAKa,GAAIb,KAAK+B,aAAc/B,KAAKqC,gBAGpE,IAAMK,EAA4B1C,KAAKa,GAAG8B,kBAAkB3C,KAAKwC,QAAS,cACpEI,EAAmB5C,KAAKa,GAAG8B,kBAAkB3C,KAAKwC,QAAS,QAGjExC,KAAKqB,qBAAuBrB,KAAKa,GAAGgC,mBAAmB7C,KAAKwC,QAAS,WACrExC,KAAKuB,oBAAsBvB,KAAKa,GAAGgC,mBAAmB7C,KAAKwC,QAAS,UACpExC,KAAK8C,qBAAuB9C,KAAKa,GAAGgC,mBAAmB7C,KAAKwC,QAAS,WACrExC,KAAK+C,sBAAwB/C,KAAKa,GAAGgC,mBAAmB7C,KAAKwC,QAAS,YACtExC,KAAKgD,4BAA8BhD,KAAKa,GAAGgC,mBAAmB7C,KAAKwC,QAAS,kBAG5ExC,KAAKiD,kBAAoBjD,KAAKa,GAAGqC,oBACjClD,KAAKa,GAAGsC,gBAAgBnD,KAAKiD,mBAG7B,IAAMG,EAAiBpD,KAAKa,GAAGwC,eAC/BrD,KAAKa,GAAGyC,WAAWtD,KAAKa,GAAG0C,aAAcH,GAMzCpD,KAAKa,GAAG2C,WAAWxD,KAAKa,GAAG0C,aAAc,IAAIE,aAL3B,EACd,EAAI,GACJ,GAAI,EACJ,GAAG,IAE+DzD,KAAKa,GAAG6C,aAC9E1D,KAAKa,GAAG8C,wBAAwBjB,GAEhC1C,KAAKa,GAAG+C,oBAAoBlB,EAA2B,EAAG1C,KAAKa,GAAGgD,OAAO,EAAO,EAAG,GAGnF,IAAMC,EAAW9D,KAAKa,GAAGwC,eACzBrD,KAAKa,GAAGyC,WAAWtD,KAAKa,GAAG0C,aAAcO,GAMzC9D,KAAKa,GAAG2C,WAAWxD,KAAKa,GAAG0C,aAAc,IAAIE,aALjC,CACR,EAAG,EACH,EAAG,EACH,EAAG,IAEyDzD,KAAKa,GAAG6C,aACxE1D,KAAKa,GAAG8C,wBAAwBf,GAChC5C,KAAKa,GAAG+C,oBAAoBhB,EAAkB,EAAG5C,KAAKa,GAAGgD,OAAO,EAAO,EAAG,GAG1E7D,KAAK+D,aAAY9C,EAAAe,sBAAGhC,KAAMd,EAAA8E,GAAqBvD,KAA3BT,KAA4BA,KAAKa,IACrDb,KAAKa,GAAGoD,WAAWjE,KAAKa,GAAGqD,WAAY,EAAGlE,KAAKa,GAAGsD,KAAMnE,KAAKa,GAAGsD,KAAMnE,KAAKa,GAAGuD,cAAepE,KAAKG,OAGlGH,KAAKqE,aAAe,GACpBrE,KAAKsE,oBAAsB,GAC3B,IAAI,IAAIlH,EAAE,EAAGA,EAAE,IAAKA,EAAG,CACnB,IAAMmH,EAAOtD,EAAAe,sBAAGhC,KAAMd,EAAA8E,GAAqBvD,KAA3BT,KAA4BA,KAAKa,IACjDb,KAAKa,GAAGoD,WAAWjE,KAAKa,GAAGqD,WAAY,EAAGlE,KAAKa,GAAGsD,KAAMnE,KAAKG,MAAMY,MAAOf,KAAKG,MAAMa,OAAQ,EAAGhB,KAAKa,GAAGsD,KAAMnE,KAAKa,GAAGuD,cAAe,MACrIpE,KAAKsE,oBAAoBE,KAAKD,GAC9B,IAAME,EAAczE,KAAKa,GAAG6D,oBAC5B1E,KAAKa,GAAG8D,gBAAgB3E,KAAKa,GAAG+D,YAAaH,GAC7C,IAAMI,EAAsB7E,KAAKa,GAAGiE,kBACpC9E,KAAKa,GAAGkE,qBAAqB/E,KAAKa,GAAG+D,YAAaC,EAAqB7E,KAAKa,GAAGqD,WAAYK,EAAS,GACpGvE,KAAKqE,aAAaG,KAAKC,GAG3BzE,KAAKvB,iCAELuB,KAAMT,EAAAyF,GAAavE,KAAnBT,MAEIA,KAAKR,QAAQQ,KAAKR,OAAOQ,eAGjC6B,EAAahB,GACTA,EAAGoE,WAAWjF,KAAKwC,SACnB3B,EAAGsC,gBAAgBnD,KAAKiD,mBAGxBpC,EAAGqE,cAAcrE,EAAGsE,SAAW,GAC/BtE,EAAGuE,YAAYvE,EAAGqD,WAAYlE,KAAK+D,cAGnClD,EAAGwE,UAAUrF,KAAK8C,qBAAsB,GAExC,IAAIwC,EAAQ,EACZ,IAAI,IAAI3E,KAAOX,KAAKuF,eAChB,GAAKvF,KAAKuF,eAAe5E,GAAzB,CAGA,IAAM6E,EAAMxF,KAAKqE,aAAaiB,EAAQ,2BACtCtF,KAAMhB,EAAAyG,GAAchF,KAApBT,KAAqBA,KAAKa,GAAI2E,EAAKxF,KAAKG,MAAMY,MAAOf,KAAKG,MAAMa,QAGhE,IAAM0E,EAAS1F,KAAK2F,QAAQhF,2BAC5BX,KAAMf,EAAA2G,GAAcnF,KAApBT,KAAqBA,KAAKa,GAAI6E,GAG9B7E,EAAGuE,YAAYvE,EAAGqD,WAAYlE,KAAKsE,oBAAoBgB,EAAQ,IAE/DA,4BAIJtF,KAAMhB,EAAAyG,GAAchF,KAApBT,KAAqBA,KAAKa,GAAI,KAAMA,EAAG7C,OAAO+C,MAAOF,EAAG7C,OAAOgD,gCAC/DhB,KAAMf,EAAA2G,GAAcnF,KAApBT,KAAqBA,KAAKa,GAAIb,KAAK2F,QAAgB,iBAGvDF,EAAgB5E,EAAI2E,EAAKzE,EAAOC,GAC5BH,EAAG8D,gBAAgB9D,EAAG+D,YAAaY,GACnC3E,EAAGC,SAAS,EAAG,EAAGC,EAAOC,YAG7B4E,EAAgB/E,EAAI6E,GAChB7E,EAAGgF,WAAW7F,KAAK+C,sBAAuB2C,GAC1C7E,EAAGS,UAAUtB,KAAKgD,4BAA2B/B,EAAAe,sBAAEhC,KAAMV,EAAAwG,GAAmBrF,KAAzBT,KAA0B0F,IACzE7E,EAAGkF,WAAWlF,EAAGmF,UAAW,EAAG,YAGnChC,EAAuBnD,GACnB,IAAM0D,EAAU1D,EAAGoF,gBAMnB,OALApF,EAAGuE,YAAYvE,EAAGqD,WAAYK,GAC9B1D,EAAGqF,cAAcrF,EAAGqD,WAAYrD,EAAGsF,eAAgBtF,EAAGuF,QACtDvF,EAAGqF,cAAcrF,EAAGqD,WAAYrD,EAAGwF,eAAgBxF,EAAGuF,QACtDvF,EAAGqF,cAAcrF,EAAGqD,WAAYrD,EAAGyF,mBAAoBzF,EAAG0F,SAC1D1F,EAAGqF,cAAcrF,EAAGqD,WAAYrD,EAAG2F,mBAAoB3F,EAAG0F,SACnDhC,WAGXtC,EAAcpB,EAAI4F,EAAMC,GACpB,IAAMC,EAAS9F,EAAGoB,aAAawE,GAK/B,GAJA5F,EAAG+F,aAAaD,EAAQD,GACxB7F,EAAGgG,cAAcF,GACD9F,EAAGiG,mBAAmBH,EAAQ9F,EAAGkG,gBAG7C,OAAOJ,EAGXK,QAAQC,MAAMpG,EAAGqG,iBAAiBP,IAClC9F,EAAGsG,aAAaR,YAGpBlE,EAAe5B,EAAIkB,EAAcM,GAC7B,IAAMG,EAAU3B,EAAG4B,gBAMnB,GALA5B,EAAGuG,aAAa5E,EAAST,GACzBlB,EAAGuG,aAAa5E,EAASH,GACzBxB,EAAGwG,YAAY7E,GACC3B,EAAGyG,oBAAoB9E,EAAS3B,EAAG0G,aAG/C,OAAO/E,EAGXwE,QAAQC,MAAMpG,EAAG2G,kBAAkBhF,IACnC3B,EAAG4G,cAAcjF,YAGrB5B,EAA2B5C,GAEvB,IAAM0J,EAAgB1J,EAAO2J,YACvBC,EAAgB5J,EAAO6J,aAGvBC,EAAa9J,EAAO+C,QAAW2G,GAClB1J,EAAOgD,SAAW4G,EAQrC,OANIE,IAEF9J,EAAO+C,MAAS2G,EAChB1J,EAAOgD,OAAS4G,GAGXE,WAGXhC,EAAqBJ,GACjB,IAAMqC,EAASrC,EAAOsC,QAAO,SAACC,EAAGC,GAAM,OAAAD,EAAIC,IAAG,GAC9C,OAAOC,KAAKC,IAAI,EAAGL,YAGvB/C,IACI,GAAIhF,KAAKjC,KAEL,IAAI,IAAI4C,KAAOX,KAAKuF,eAChBvF,KAAKjC,KAAKsK,SAASrI,KAAKuF,eAAgB5E,4MC3QxD5D,EAAOC,QAAQ,yvCCAfD,EAAOC,QAAQ,kMCAfD,EAAOC,QAAUN,EAAQ,wBAAwB4L,aAAa,SAAW,MAAQ5L,EAAQ,6BAA6BY,QAAQ,uGCA9H,aAEA,IAAIiL,EAAY,YA6BPC,EAAWC,GAClB,OAAQ,GAAKA,GAAKC,QAAO,wCAA0C,MAAQ,IAc7E1L,EAAQsL,sBA1CoB/K,GAC1B,IAAIoL,EAAQJ,EAAUhL,GAOtB,OALKoL,IACHA,aAQF,IACE,MAAM,IAAIlL,MACV,MAAOmL,GACP,IAAIC,GAAW,GAAKD,EAAIE,OAAOC,MAAK,kCAEpC,GAAIF,EAGF,OAAOL,EAAWK,EAAQ,IAI9B,MAAO,IApBGP,GACRC,EAAUhL,GAAMoL,GAGXA,GAmCT3L,EAAQwL,WAAaA,EACrBxL,EAAQgM,mBAZWP,GACjB,IAAII,GAAW,GAAKJ,GAAKM,MAAK,+BAE9B,IAAKF,EACH,MAAM,IAAIpL,MAAM,oBAGlB,OAAOoL,EAAQ","sources":["node_modules/@parcel/runtime-js/lib/runtime-d22793f232b5ad46.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","src/webgl-image-processing/app.js","src/webgl-image-processing/webgl-image-processing.js","src/webgl-image-processing/shader/fragment.glsl","src/webgl-image-processing/shader/vertex.glsl","node_modules/@parcel/runtime-js/lib/runtime-7e2c47789f489838.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"4AYAf\\\":\\\"index.2aec30b1.js\\\",\\\"d80ZC\\\":\\\"image.ddd0319d.jpeg\\\",\\\"9LU3i\\\":\\\"index.ba31ca7d.js\\\"}\"));","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","import { Pane } from 'tweakpane';\nimport { WebglImageProcessing } from './webgl-image-processing';\n\nlet DEBUG = false;\n\nif (process.env.NODE_ENV !== 'production') {\n    // Only runs in development and will be stripped in production builds.\n    DEBUG = true;\n}\n\nlet sketch;\nlet resizeTimeoutId;\n\nwindow.addEventListener('load', () => {\n    const canvas = document.body.querySelector('#c');\n\n    let pane;\n    if (DEBUG) {\n        pane = new Pane({ title: 'Settings' });\n    }\n\n    sketch = new WebglImageProcessing(canvas, pane, (sketch) => {\n        sketch.run(); \n    });\n});\n\nwindow.addEventListener('resize', () => {\n    if (sketch) {\n        if (resizeTimeoutId)\n            clearTimeout(resizeTimeoutId);\n\n        resizeTimeoutId = setTimeout(() => {\n            resizeTimeoutId = null;\n            sketch.resize();\n        }, 300);\n    }\n});\n\n\n","\nimport fragmentShaderSource from './shader/fragment.glsl';\nimport vertexShaderSource from './shader/vertex.glsl';\n\nexport class WebglImageProcessing {\n    oninit;\n\n    kernels = {\n        normal: [\n            0, 0, 0,\n            0, 1, 0,\n            0, 0, 0\n        ],\n        blur: [\n            0.045, 0.122, 0.045,\n            0.122, 0.332, 0.122,\n            0.045, 0.122, 0.045\n        ],\n        unsharpen: [\n            -1, -1, -1,\n            -1,  9, -1,\n            -1, -1, -1\n        ],\n        emboss: [\n            -2, -1,  0,\n            -1,  1,  1,\n            0,  1,  2\n        ]\n    };\n    effectsToApply = {\n        blur: false,\n        emboss: false,\n        unsharpen: false\n    };\n\n    #time = 0;\n    #isDestroyed = false;\n\n    constructor(canvas, pane, oninit = null) {\n        this.canvas = canvas;\n        this.pane = pane;\n        this.oninit = oninit;\n\n        this.image = new Image();\n        this.image.src = new URL('../assets/image.jpeg', import.meta.url);\n        this.image.onload = () => {\n            this.#init();\n        }\n    }\n\n    resize() {\n        this.#resizeCanvasToDisplaySize(this.gl.canvas);\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n    }\n\n    run() {\n        if (this.#isDestroyed) return;\n\n        this.#render();\n\n        // update uniforms\n        this.gl.uniform4f(this.colorUniformLocation, 1, 0, 0, 1);\n        this.gl.uniform1f(this.timeUniformLocation, this.#time);\n\n        this.#time += 0.01;\n\n        requestAnimationFrame(() => this.run());\n    }\n\n    #render() {\n        // Draw\n        this.gl.clearColor(0, 0, 0, 1);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n        this.#drawEffects(this.gl);\n    }\n\n    destroy() {\n        this.#isDestroyed = true;\n    }\n\n    #init() {\n        this.gl = this.canvas.getContext('webgl2');\n        if (!this.gl) {\n            throw new Error('No WebGL 2 context!')\n        }\n\n        this.vertexShader = this.#createShader(this.gl, this.gl.VERTEX_SHADER, vertexShaderSource);\n        this.fragmentShader = this.#createShader(this.gl, this.gl.FRAGMENT_SHADER, fragmentShaderSource);\n        this.program = this.#createProgram(this.gl, this.vertexShader, this.fragmentShader);\n\n        // Attribute Locations\n        const positionAttributeLocation = this.gl.getAttribLocation(this.program, 'a_position');\n        const uvAttribLocation = this.gl.getAttribLocation(this.program, 'a_uv');\n\n        // Uniforms\n        this.colorUniformLocation = this.gl.getUniformLocation(this.program, 'u_color');\n        this.timeUniformLocation = this.gl.getUniformLocation(this.program, 'u_time');\n        this.imageUniformLocation = this.gl.getUniformLocation(this.program, 'u_image');\n        this.kernelUniformLocation = this.gl.getUniformLocation(this.program, 'u_kernel');\n        this.kernelWeightUniformLocation = this.gl.getUniformLocation(this.program, 'u_kernelWeight');\n\n        // set of attributes\n        this.vertexArrayObject = this.gl.createVertexArray();\n        this.gl.bindVertexArray(this.vertexArrayObject);\n\n        // Postion Buffer\n        const positionBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, positionBuffer);\n        const positions = [\n            -1, 3,\n            -1, -1,\n            3, -1\n        ];\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(positions), this.gl.STATIC_DRAW);\n        this.gl.enableVertexAttribArray(positionAttributeLocation);\n        // this also binds the positionBuffer to the attribute --> ARRAY_BUFFER is free\n        this.gl.vertexAttribPointer(positionAttributeLocation, 2, this.gl.FLOAT, false, 0, 0);\n\n        // UV Buffer\n        const uvBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, uvBuffer);\n        const uvs = [\n            0, 2,\n            0, 0,\n            2, 0\n        ];\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(uvs), this.gl.STATIC_DRAW);\n        this.gl.enableVertexAttribArray(uvAttribLocation);\n        this.gl.vertexAttribPointer(uvAttribLocation, 2, this.gl.FLOAT, false, 0, 0);\n\n        // Create the image texture and upload it to the gpu\n        this.imageTexture = this.#createAndSetupTexture(this.gl);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.image);\n\n        // Init framebuffers\n        this.framebuffers = [];\n        this.framebufferTextures = [];\n        for(let i=0; i<2; ++i) {\n            const texture = this.#createAndSetupTexture(this.gl);\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.image.width, this.image.height, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);\n            this.framebufferTextures.push(texture);\n            const framebuffer = this.gl.createFramebuffer();\n            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, framebuffer);\n            const fboAttachementPoint = this.gl.COLOR_ATTACHMENT0;\n            this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, fboAttachementPoint, this.gl.TEXTURE_2D, texture, 0);\n            this.framebuffers.push(framebuffer);\n        }\n\n        this.resize();\n\n        this.#initTweakpane();\n\n        if (this.oninit) this.oninit(this);\n    }\n\n    #drawEffects(gl) {\n        gl.useProgram(this.program);\n        gl.bindVertexArray(this.vertexArrayObject);\n\n        // use image texture\n        gl.activeTexture(gl.TEXTURE0 + 0);\n        gl.bindTexture(gl.TEXTURE_2D, this.imageTexture);\n\n        // tell the shader to use texture at unit 0\n        gl.uniform1i(this.imageUniformLocation, 0);\n\n        let count = 0;\n        for(let key in this.effectsToApply) {\n            if (!this.effectsToApply[key]) continue;\n\n            // set the framebuffer to render to\n            const fbo = this.framebuffers[count % 2];\n            this.#setFramebuffer(this.gl, fbo, this.image.width, this.image.height);\n\n            // render with this kernel\n            const kernel = this.kernels[key];\n            this.#drawWithKernel(this.gl, kernel);\n\n            // set the input texture to the currently used framebuffer texture (for the next draw call)\n            gl.bindTexture(gl.TEXTURE_2D, this.framebufferTextures[count % 2]);\n\n            count++;\n        }\n\n        // the final draw to screen\n        this.#setFramebuffer(this.gl, null, gl.canvas.width, gl.canvas.height);\n        this.#drawWithKernel(this.gl, this.kernels['normal']);\n    }\n\n    #setFramebuffer(gl, fbo, width, height) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo); // all draw commands will affect the framebuffer\n        gl.viewport(0, 0, width, height);\n    }\n\n    #drawWithKernel(gl, kernel) {\n        gl.uniform1fv(this.kernelUniformLocation, kernel);\n        gl.uniform1f(this.kernelWeightUniformLocation, this.#computeKernelWeight(kernel));\n        gl.drawArrays(gl.TRIANGLES, 0, 3);\n    }\n\n    #createAndSetupTexture(gl) {\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        return texture;\n    }\n\n    #createShader(gl, type, source) {\n        const shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n        if (success) {\n            return shader;\n        }\n\n        console.error(gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n    }\n\n    #createProgram(gl, vertexShader, fragmentShader) {\n        const program = gl.createProgram();\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.linkProgram(program);\n        const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n        if (success) {\n            return program;\n        }\n\n        console.error(gl.getProgramInfoLog(program));\n        gl.deleteProgram(program);\n    }\n\n    #resizeCanvasToDisplaySize(canvas) {\n        // Lookup the size the browser is displaying the canvas in CSS pixels.\n        const displayWidth  = canvas.clientWidth;\n        const displayHeight = canvas.clientHeight;\n       \n        // Check if the canvas is not the same size.\n        const needResize = canvas.width  !== displayWidth ||\n                           canvas.height !== displayHeight;\n       \n        if (needResize) {\n          // Make the canvas the same size\n          canvas.width  = displayWidth;\n          canvas.height = displayHeight;\n        }\n       \n        return needResize;\n    }\n\n    #computeKernelWeight(kernel) {\n        const weight = kernel.reduce((w, c) => w + c, 0);\n        return Math.max(0, weight);\n    }\n\n    #initTweakpane() {\n        if (this.pane) {\n            // init tweakpane folders and inputs\n            for(let key in this.effectsToApply) {\n                this.pane.addInput(this.effectsToApply, key);\n            }\n        }\n    }\n}\n","#version 300 es\n\n// fragment shaders don't have a default precision so we need\n// to pick one. highp is a good default. It means \"high precision\"\nprecision highp float;\n\nuniform vec4 u_color;\nuniform sampler2D u_image;\nuniform float u_time;\nuniform float[9] u_kernel;\nuniform float u_kernelWeight;\n\nout vec4 outColor;\n\nin vec2 v_uv;\n\nvoid main() {\n    vec2 onePixel = vec2(1.) / vec2(textureSize(u_image, 0));\n\n    vec4 color = texture(u_image, v_uv);\n\n    vec4 colorSum =\n        texture(u_image, v_uv + onePixel * vec2(-1, -1)) * u_kernel[0] +\n        texture(u_image, v_uv + onePixel * vec2( 0, -1)) * u_kernel[1] +\n        texture(u_image, v_uv + onePixel * vec2( 1, -1)) * u_kernel[2] +\n        texture(u_image, v_uv + onePixel * vec2(-1,  0)) * u_kernel[3] +\n        texture(u_image, v_uv + onePixel * vec2( 0,  0)) * u_kernel[4] +\n        texture(u_image, v_uv + onePixel * vec2( 1,  0)) * u_kernel[5] +\n        texture(u_image, v_uv + onePixel * vec2(-1,  1)) * u_kernel[6] +\n        texture(u_image, v_uv + onePixel * vec2( 0,  1)) * u_kernel[7] +\n        texture(u_image, v_uv + onePixel * vec2( 1,  1)) * u_kernel[8] ;\n    outColor = vec4((colorSum / u_kernelWeight).rgb, 1);\n}\n","#version 300 es\n\nin vec4 a_position;\nin vec2 a_uv;\n\nout vec2 v_uv;\n\nvoid main() {\n    v_uv = a_uv;\n    gl_Position = a_position;\n}\n","module.exports = require('./helpers/bundle-url').getBundleURL('4AYAf') + \"../\" + require('./helpers/bundle-manifest').resolve(\"d80ZC\");","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;"],"names":["require","register","JSON","parse","mapping","module","exports","pairs","keys","Object","i","length","resolve","id","resolved","Error","sketch","resizeTimeoutId","_webglImageProcessing","window","addEventListener","pane","canvas","document","body","querySelector","WebglImageProcessing","sketch1","run","clearTimeout","setTimeout","resize","_fragmentGlsl","_vertexGlsl","_render","WeakSet","_init","_drawEffects","_setFramebuffer","_drawWithKernel","_createAndSetupTexture","_createShader","_createProgram","_resizeCanvasToDisplaySize","_computeKernelWeight","_initTweakpane","oninit","arguments","normal","blur","unsharpen","emboss","_time","set","this","_isDestroyed","add","image","Image","src","URL","onload","init","call","_this","key","resizeCanvasToDisplaySize","gl","viewport","width","height","_helpers","classPrivateFieldGet","render","uniform4f","colorUniformLocation","uniform1f","timeUniformLocation","requestAnimationFrame","WeakMap","clearColor","clear","COLOR_BUFFER_BIT","drawEffects","getContext","vertexShader","classPrivateMethodGet","createShader","VERTEX_SHADER","_vertexGlslDefault","default","fragmentShader","FRAGMENT_SHADER","_fragmentGlslDefault","program","createProgram","positionAttributeLocation","getAttribLocation","uvAttribLocation","getUniformLocation","imageUniformLocation","kernelUniformLocation","kernelWeightUniformLocation","vertexArrayObject","createVertexArray","bindVertexArray","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","uvBuffer","imageTexture","createAndSetupTexture","texImage2D","TEXTURE_2D","RGBA","UNSIGNED_BYTE","framebuffers","framebufferTextures","texture","push","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","fboAttachementPoint","COLOR_ATTACHMENT0","framebufferTexture2D","initTweakpane","useProgram","activeTexture","TEXTURE0","bindTexture","uniform1i","count","effectsToApply","fbo","setFramebuffer","kernel","kernels","drawWithKernel","uniform1fv","computeKernelWeight","drawArrays","TRIANGLES","createTexture","texParameteri","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","displayWidth","clientWidth","displayHeight","clientHeight","needResize","weight","reduce","w","c","Math","max","addInput","getBundleURL","bundleURL","getBaseURL","url","replace","value","err","matches","stack","match","getOrigin"],"version":3,"file":"index.2aec30b1.js.map"}