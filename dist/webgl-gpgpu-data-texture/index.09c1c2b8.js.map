{"mappings":"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","sources":["src/webgl-gpgpu-data-texture/app.js","src/webgl-gpgpu-data-texture/webgl-gpgpu-data-texture.js","src/webgl-gpgpu-data-texture/shader/compute-particle-position.frag","src/webgl-gpgpu-data-texture/shader/compute-particle-position.vert","src/webgl-gpgpu-data-texture/shader/deposit.frag","src/webgl-gpgpu-data-texture/shader/deposit.vert","src/webgl-gpgpu-data-texture/shader/draw.frag","src/webgl-gpgpu-data-texture/shader/draw.vert","src/webgl-gpgpu-data-texture/shader/decay.frag","src/webgl-gpgpu-data-texture/shader/decay.vert","src/webgl-gpgpu-data-texture/shader/diffuse-h.frag","src/webgl-gpgpu-data-texture/shader/diffuse-h.vert","src/webgl-gpgpu-data-texture/shader/diffuse-v.frag","src/webgl-gpgpu-data-texture/shader/diffuse-v.vert","src/webgl-gpgpu-data-texture/shader/copy.frag","src/webgl-gpgpu-data-texture/shader/copy.vert"],"sourcesContent":["import { Pane } from 'tweakpane';\nimport { WebGLGPGPUDataTexture } from './webgl-gpgpu-data-texture';\n\nlet DEBUG = false;\n\nif (process.env.NODE_ENV !== 'production') {\n    // Only runs in development and will be stripped in production builds.\n    DEBUG = true;\n}\n\nlet sketch;\nlet resizeTimeoutId;\n\nwindow.addEventListener('load', () => {\n    const canvas = document.body.querySelector('#c');\n\n    let pane;\n    if (DEBUG) {\n        pane = new Pane({ title: 'Settings' });\n    }\n\n    sketch = new WebGLGPGPUDataTexture(canvas, pane, (sketch) => {\n        sketch.run(); \n    });\n});\n\nwindow.addEventListener('resize', () => {\n    if (sketch) {\n        if (resizeTimeoutId)\n            clearTimeout(resizeTimeoutId);\n\n        resizeTimeoutId = setTimeout(() => {\n            resizeTimeoutId = null;\n            sketch.resize();\n        }, 300);\n    }\n});\n\n\n","\nimport * as twgl from 'twgl.js';\nimport computeFragmentShaderSource from './shader/compute-particle-position.frag';\nimport computeVertexShaderSource from './shader/compute-particle-position.vert';\nimport depositFragmentShaderSource from './shader/deposit.frag';\nimport depositVertexShaderSource from './shader/deposit.vert';\nimport drawFragmentShaderSource from './shader/draw.frag';\nimport drawVertexShaderSource from './shader/draw.vert';\nimport decayFragmentShaderSource from './shader/decay.frag';\nimport decayVertexShaderSource from './shader/decay.vert';\nimport diffuseHFragmentShaderSource from './shader/diffuse-h.frag';\nimport diffuseHVertexShaderSource from './shader/diffuse-h.vert';\nimport diffuseVFragmentShaderSource from './shader/diffuse-v.frag';\nimport diffuseVVertexShaderSource from './shader/diffuse-v.vert';\nimport copyFragmentShaderSource from './shader/copy.frag';\nimport copyVertexShaderSource from './shader/copy.vert';\n\nexport class WebGLGPGPUDataTexture {\n    oninit;\n\n    diffuse = 1;\n    decay = 0.970;\n    randomStrength = 8;\n    sensorDist = 16.;\n    sensorAngle = Math.PI / 4.;\n    sensorSize = 25;\n    velocity = .9;\n    steeringStrength = 0.98;\n\n    #time = 0;\n    #deltaTime = 0;\n    #isDestroyed = false;\n\n    camera = {\n        rotation: 0,\n        position: [0, 0, 1],\n        matrix: twgl.m4.identity()\n    };\n\n    constructor(canvas, pane, oninit = null) {\n        this.canvas = canvas;\n        this.pane = pane;\n        this.oninit = oninit;\n\n        this.#init();\n    }\n\n    resize() {\n        twgl.resizeCanvasToDisplaySize(this.gl.canvas);\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n\n        this.#resizeTextures();\n\n        this.#updateProjectionMatrix();\n    }\n\n    run(time = 0) {\n        this.#deltaTime = time - this.#time;\n        this.#time = time;\n\n        if (this.#isDestroyed) return;\n\n        this.computeUniforms.u_deltaTime = this.#deltaTime;\n\n        this.#render();\n\n        requestAnimationFrame((t) => this.run(t));\n    }\n\n    #render() {\n        this.gl.disable(this.gl.DEPTH_TEST);\n        this.gl.disable(this.gl.CULL_FACE);\n\n        // compute the new positions\n        this.gl.enable(this.gl.RASTERIZER_DISCARD);\n        this.gl.useProgram(this.computeParticleProgram);\n        this.gl.bindVertexArray(this.currentRenderState.computeVAO);\n        this.gl.uniform1f(this.computeParticleLocations.u_deltaTime, this.computeUniforms.u_deltaTime);\n        this.gl.uniform2i(this.computeParticleLocations.u_resolution, this.gl.canvas.width, this.gl.canvas.height);\n        // set the data texture on texture unit 0 and update uniform\n        this.gl.activeTexture(this.gl.TEXTURE0);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.dataTexture1);\n        this.gl.uniform1i(this.computeParticleLocations.u_dataTexture, 0);\n        this.gl.uniform1f(this.computeParticleLocations.u_randomStrength, this.randomStrength);\n        this.gl.uniform1f(this.computeParticleLocations.u_sensorDist, this.sensorDist);\n        this.gl.uniform1f(this.computeParticleLocations.u_sensorAngle, this.sensorAngle);\n        this.gl.uniform1f(this.computeParticleLocations.u_velocity, this.velocity);\n        this.gl.uniform1f(this.computeParticleLocations.u_steeringStrength, this.steeringStrength);\n        this.gl.uniform1f(this.computeParticleLocations.u_sensorSize, this.sensorSize);\n        this.gl.bindTransformFeedback(this.gl.TRANSFORM_FEEDBACK, this.currentRenderState.transformFeedback);\n        this.gl.beginTransformFeedback(this.gl.POINTS);\n        this.gl.drawArrays(this.gl.POINTS, 0, this.NUM_PARTICLES);\n        this.gl.endTransformFeedback();\n        this.gl.bindTransformFeedback(this.gl.TRANSFORM_FEEDBACK, null);\n        this.gl.disable(this.gl.RASTERIZER_DISCARD);\n\n        // deposit the particles\n        this.#setFramebuffer(this.gl, this.fbo1, this.gl.canvas.width, this.gl.canvas.height);\n        // copy the last result\n        this.gl.useProgram(this.copyProgram);\n        this.gl.activeTexture(this.gl.TEXTURE0);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.dataTexture2);\n        this.gl.uniform1i(this.copyLocations.u_texture, 0);\n        this.gl.bindVertexArray(this.quadVAO);\n        this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\n        // deposit the new particle positions\n        this.gl.useProgram(this.depositProgram);\n        this.gl.uniform2i(this.depositLocations.u_resolution, this.gl.canvas.width, this.gl.canvas.height);\n        this.gl.bindVertexArray(this.currentRenderState.drawVAO);\n        this.gl.drawArrays(this.gl.POINTS, 0, this.NUM_PARTICLES);\n        this.#setFramebuffer(this.gl, null, this.gl.canvas.width, this.gl.canvas.height);\n\n         // diffuse H\n         this.#setFramebuffer(this.gl, this.fbo2, this.gl.canvas.width, this.gl.canvas.height);\n         this.gl.useProgram(this.diffuseHProgram);\n         this.gl.activeTexture(this.gl.TEXTURE0);\n         this.gl.bindTexture(this.gl.TEXTURE_2D, this.dataTexture1);\n         this.gl.uniform1i(this.diffuseHLocations.u_texture, 0);\n         this.gl.uniform1f(this.diffuseHLocations.u_diffuse, this.diffuse);\n         this.gl.bindVertexArray(this.quadVAO);\n         this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\n         this.#setFramebuffer(this.gl, null, this.gl.canvas.width, this.gl.canvas.height);\n\n         // diffuse V\n         this.#setFramebuffer(this.gl, this.fbo1, this.gl.canvas.width, this.gl.canvas.height);\n         this.gl.useProgram(this.diffuseVProgram);\n         this.gl.activeTexture(this.gl.TEXTURE0);\n         this.gl.bindTexture(this.gl.TEXTURE_2D, this.dataTexture2);\n         this.gl.uniform1i(this.diffuseVLocations.u_texture, 0);\n         this.gl.uniform1f(this.diffuseVLocations.u_diffuse, this.diffuse);\n         this.gl.bindVertexArray(this.quadVAO);\n         this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\n         this.#setFramebuffer(this.gl, null, this.gl.canvas.width, this.gl.canvas.height);\n         \n         // decay\n         this.#setFramebuffer(this.gl, this.fbo2, this.gl.canvas.width, this.gl.canvas.height);\n         this.gl.useProgram(this.decayProgram);\n         this.gl.activeTexture(this.gl.TEXTURE0);\n         this.gl.bindTexture(this.gl.TEXTURE_2D, this.dataTexture1);\n         this.gl.uniform1i(this.decayLocations.u_texture, 0);\n         this.gl.uniform1f(this.decayLocations.u_decay, this.decay);\n         this.gl.bindVertexArray(this.quadVAO);\n         this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\n         this.#setFramebuffer(this.gl, null, this.gl.canvas.width, this.gl.canvas.height);\n\n        // draw\n        this.gl.useProgram(this.drawProgram);\n        this.gl.clearColor(0, 0, 0, 1);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        this.gl.bindVertexArray(this.quadVAO);\n        this.gl.uniformMatrix4fv(this.drawLocations.u_worldMatrix, false, this.drawUniforms.u_worldMatrix);\n        this.gl.uniformMatrix4fv(this.drawLocations.u_viewMatrix, false, this.drawUniforms.u_viewMatrix);\n        this.gl.uniformMatrix4fv(this.drawLocations.u_projectionMatrix, false, this.drawUniforms.u_projectionMatrix);\n        this.gl.activeTexture(this.gl.TEXTURE0);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.dataTexture2);\n        this.gl.uniform1i(this.drawLocations.u_texture, 0);\n        this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\n\n        // swap the render states\n        const currentState = this.currentRenderState;\n        this.currentRenderState = this.nextRenderState;\n        this.nextRenderState = currentState;\n    }\n\n    destroy() {\n        this.#isDestroyed = true;\n    }\n\n    #init() {\n        /** @type {WebGLRenderingContext} */\n        this.gl = this.canvas.getContext('webgl2', { antialias: true });\n        if (!this.gl) {\n            throw new Error('No WebGL 2 context!')\n        }\n        const ext = this.gl.getExtension('EXT_color_buffer_float');\n        if (!ext) {\n          alert('need EXT_color_buffer_float');\n          return;\n        }\n\n        // setup programs\n        this.computeParticleProgram = this.#createProgram(this.gl, [computeVertexShaderSource, computeFragmentShaderSource], ['t_newPosition', 't_newAngle']);\n        this.depositProgram = this.#createProgram(this.gl, [depositVertexShaderSource, depositFragmentShaderSource]);\n        this.drawProgram = this.#createProgram(this.gl, [drawVertexShaderSource, drawFragmentShaderSource], null, { a_position: 0, a_uv: 1 });\n        this.decayProgram = this.#createProgram(this.gl, [decayVertexShaderSource, decayFragmentShaderSource], null, { a_position: 0, a_uv: 1 });\n        this.diffuseHProgram = this.#createProgram(this.gl, [diffuseHVertexShaderSource, diffuseHFragmentShaderSource], null, { a_position: 0, a_uv: 1 });\n        this.diffuseVProgram = this.#createProgram(this.gl, [diffuseVVertexShaderSource, diffuseVFragmentShaderSource], null, { a_position: 0, a_uv: 1 });\n        this.copyProgram = this.#createProgram(this.gl, [copyVertexShaderSource, copyFragmentShaderSource], null, { a_position: 0, a_uv: 1 });\n\n        // find the locations\n        this.computeParticleLocations = {\n            a_oldPosition: this.gl.getAttribLocation(this.computeParticleProgram, 'a_oldPosition'),\n            a_oldAngle: this.gl.getAttribLocation(this.computeParticleProgram, 'a_oldAngle'),\n            u_deltaTime: this.gl.getUniformLocation(this.computeParticleProgram, 'u_deltaTime'),\n            u_resolution: this.gl.getUniformLocation(this.computeParticleProgram, 'u_resolution'),\n            u_trailsTexture: this.gl.getUniformLocation(this.computeParticleProgram, 'u_trailsTexture'),\n            u_randomStrength: this.gl.getUniformLocation(this.computeParticleProgram, 'u_randomStrength'),\n            u_sensorDist: this.gl.getUniformLocation(this.computeParticleProgram, 'u_sensorDist'),\n            u_sensorAngle: this.gl.getUniformLocation(this.computeParticleProgram, 'u_sensorAngle'),\n            u_velocity: this.gl.getUniformLocation(this.computeParticleProgram, 'u_velocity'),\n            u_steeringStrength: this.gl.getUniformLocation(this.computeParticleProgram, 'u_steeringStrength'),\n            u_sensorSize: this.gl.getUniformLocation(this.computeParticleProgram, 'u_sensorSize')\n        };\n        this.depositLocations = {\n            u_resolution: this.gl.getUniformLocation(this.depositProgram, 'u_resolution'),\n            a_position: this.gl.getAttribLocation(this.depositProgram, 'a_position')\n        };\n        this.decayLocations = {\n            a_position: this.gl.getAttribLocation(this.decayProgram, 'a_position'),\n            a_uv: this.gl.getAttribLocation(this.decayProgram, 'a_uv'),\n            u_texture: this.gl.getUniformLocation(this.decayProgram, 'u_texture'),\n            u_decay: this.gl.getUniformLocation(this.decayProgram, 'u_decay')\n        };\n        this.diffuseHLocations = {\n            a_position: this.gl.getAttribLocation(this.diffuseHProgram, 'a_position'),\n            a_uv: this.gl.getAttribLocation(this.diffuseHProgram, 'a_uv'),\n            u_texture: this.gl.getUniformLocation(this.diffuseHProgram, 'u_texture'),\n            u_diffuse: this.gl.getUniformLocation(this.diffuseHProgram, 'u_diffuse')\n        };\n        this.diffuseVLocations = {\n            a_position: this.gl.getAttribLocation(this.diffuseVProgram, 'a_position'),\n            a_uv: this.gl.getAttribLocation(this.diffuseVProgram, 'a_uv'),\n            u_texture: this.gl.getUniformLocation(this.diffuseVProgram, 'u_texture'),\n            u_diffuse: this.gl.getUniformLocation(this.diffuseVProgram, 'u_diffuse')\n        };\n        this.copyLocations = {\n            a_position: this.gl.getAttribLocation(this.copyProgram, 'a_position'),\n            a_uv: this.gl.getAttribLocation(this.copyProgram, 'a_uv'),\n            u_texture: this.gl.getUniformLocation(this.copyProgram, 'u_texture')\n        };\n        this.drawLocations = {\n            a_position: this.gl.getAttribLocation(this.drawProgram, 'a_position'),\n            a_uv: this.gl.getAttribLocation(this.drawProgram, 'a_uv'),\n            u_worldMatrix: this.gl.getUniformLocation(this.drawProgram, 'u_worldMatrix'),\n            u_viewMatrix: this.gl.getUniformLocation(this.drawProgram, 'u_viewMatrix'),\n            u_projectionMatrix: this.gl.getUniformLocation(this.drawProgram, 'u_projectionMatrix'),\n            u_texture: this.gl.getUniformLocation(this.drawProgram, 'u_texture')\n        };\n\n        // init the positions and velocities\n        this.NUM_PARTICLES = 100000;\n        const angles = new Float32Array(Array(this.NUM_PARTICLES).fill(0).map(_ => Math.random() * Math.PI * 2));\n        const positions = new Float32Array(Array(\n            this.NUM_PARTICLES).fill(0).map((_, ndx) => \n                //[this.canvas.clientWidth, this.canvas.clientHeight].map(m => this.#rand(0, m))\n                [-Math.cos(angles[ndx]) * Math.random() * 200 + this.canvas.clientWidth / 2, -Math.sin(angles[ndx]) * Math.random() * 200 + this.canvas.clientHeight / 2]\n            ).flat()\n        );\n        \n\n        // make the buffers\n        this.position1Buffer = this.#makeBuffer(this.gl, positions, this.gl.DYNAMIC_DRAW);\n        this.position2Buffer = this.#makeBuffer(this.gl, positions, this.gl.DYNAMIC_DRAW);\n        this.angles1Buffer = this.#makeBuffer(this.gl, angles, this.gl.DYNAMIC_DRAW);\n        this.angles2Buffer = this.#makeBuffer(this.gl, angles, this.gl.DYNAMIC_DRAW);\n\n        // create the compute VAOs\n        this.compute1VAO = this.#makeVertexArray(this.gl, [ \n            [this.position1Buffer, this.computeParticleLocations.a_oldPosition, 2],\n            [this.angles1Buffer, this.computeParticleLocations.a_oldAngle, 1]\n        ]);\n        this.compute2VAO = this.#makeVertexArray(this.gl, [\n            [this.position2Buffer, this.computeParticleLocations.a_oldPosition, 2],\n            [this.angles2Buffer, this.computeParticleLocations.a_oldAngle, 1]\n        ]);\n\n        // create the draw VAOs\n        this.draw1VAO = this.#makeVertexArray(this.gl, [\n            [this.position1Buffer, this.depositLocations.a_position, 2]\n        ]);\n        this.draw2VAO = this.#makeVertexArray(this.gl, [\n            [this.position2Buffer, this.depositLocations.a_position, 2]\n        ]);\n\n        // make the transform feedbacks\n        this.pos1TF = this.#makeTransformFeedback(this.gl, [this.position1Buffer, this.angles1Buffer]);\n        this.pos2TF = this.#makeTransformFeedback(this.gl, [this.position2Buffer, this.angles2Buffer]);\n\n        // create the texture\n        this.dataTexture1 = this.#createAndSetupTexture(this.gl);\n        this.dataTexture2 = this.#createAndSetupTexture(this.gl);\n\n        // create the framebuffer \n        this.fbo1 = this.gl.createFramebuffer();\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.fbo1);\n        this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this.dataTexture1, 0);\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n        this.fbo2 = this.gl.createFramebuffer();\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.fbo2);\n        this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this.dataTexture2, 0);\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n\n        // create the quad buffers\n        this.quadPositionBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.quadPositionBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, \n            new Float32Array([\n                -1, -1,\n                 1, -1,\n                -1,  1,\n                -1,  1,\n                 1, -1,\n                 1,  1\n            ]),\n            this.gl.STATIC_DRAW);\n        this.quadUVBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.quadUVBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, \n            new Float32Array([\n                 0, 0,\n                 1, 0,\n                 0, 1,\n                 0, 1,\n                 1, 0,\n                 1, 1\n            ]),\n            this.gl.STATIC_DRAW);\n\n        // create the quad VAO\n        this.quadVAO = this.#makeVertexArray(this.gl, [\n            [this.quadPositionBuffer, this.drawLocations.a_position, 2],\n            [this.quadUVBuffer, this.drawLocations.a_uv, 2]\n        ]);\n\n        this.computeUniforms = {\n            u_deltaTime: 0\n        };\n\n        // init the global uniforms\n        this.drawUniforms = {\n            u_worldMatrix: twgl.m4.identity(),\n            u_viewMatrix: twgl.m4.identity(),\n            u_projectionMatrix: twgl.m4.identity()\n        };\n\n        // unbind left over stuff\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        this.gl.bindBuffer(this.gl.TRANSFORM_FEEDBACK_BUFFER, null);\n\n        // this are the render states\n        this.currentRenderState = {\n            computeVAO: this.compute1VAO,\n            transformFeedback: this.pos2TF,\n            drawVAO: this.draw2VAO\n        };\n        this.nextRenderState = {\n            computeVAO: this.compute2VAO,\n            transformFeedback: this.pos1TF,\n            drawVAO: this.draw1VAO\n        };\n\n        this.resize();\n\n        this.#updateCameraMatrix();\n        this.#updateProjectionMatrix();\n\n        this.#initTweakpane();\n\n        if (this.oninit) this.oninit(this);\n    }\n\n    #resizeTextures() {\n        const w = this.gl.canvas.width;\n        const h = this.gl.canvas.height;\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.dataTexture1);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.R32F, w, h, 0, this.gl.RED, this.gl.FLOAT, new Float32Array(w * h));\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.dataTexture2);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.R32F, w, h, 0, this.gl.RED, this.gl.FLOAT, new Float32Array(w * h));\n    }\n\n    #rand = (min, max) => {\n        if (max === undefined) {\n            max = min;\n            min = 0;\n        }\n        return Math.random() * (max - min) + min;\n    }\n\n    #makeTransformFeedback(gl, buffers) {\n        const tf = gl.createTransformFeedback();\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);\n        buffers.forEach((buffer, ndx) => {\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, ndx, buffer);\n        })\n        return tf;\n    }\n\n    #createAndSetupTexture(gl) {\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        return texture;\n    }\n\n    #setFramebuffer(gl, fbo, width, height) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo); // all draw commands will affect the framebuffer\n        gl.viewport(0, 0, width, height);\n    }\n\n    #makeVertexArray(gl, bufLocPairs) {\n        const va = gl.createVertexArray();\n        gl.bindVertexArray(va);\n        for (const [buffer, loc, numElements] of bufLocPairs) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            gl.enableVertexAttribArray(loc);\n            gl.vertexAttribPointer(\n                loc,      // attribute location\n                numElements,        // number of elements\n                gl.FLOAT, // type of data\n                false,    // normalize\n                0,        // stride (0 = auto)\n                0,        // offset\n            );\n        }\n        return va;\n    }\n\n    #makeBuffer(gl, sizeOrData, usage) {\n        const buf = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, buf);\n        gl.bufferData(gl.ARRAY_BUFFER, sizeOrData, usage);\n        return buf;\n    }\n\n    #createShader(gl, type, source) {\n        const shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n        if (success) {\n            return shader;\n        }\n\n        console.error(gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n    }\n\n    #createProgram(gl, shaderSources, transformFeedbackVaryings, attribLocations) {\n        const program = gl.createProgram();\n\n        [gl.VERTEX_SHADER, gl.FRAGMENT_SHADER].forEach((type, ndx) => {\n            const shader = this.#createShader(gl, type, shaderSources[ndx]);\n            gl.attachShader(program, shader);\n        });\n\n        if (transformFeedbackVaryings) {\n            gl.transformFeedbackVaryings(program, transformFeedbackVaryings, gl.SEPARATE_ATTRIBS);\n        }\n\n        if (attribLocations) {\n            for(const attrib in attribLocations) {\n                gl.bindAttribLocation(program, attribLocations[attrib], attrib);\n            }\n        }\n\n        gl.linkProgram(program);\n        const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n        if (success) {\n            return program;\n        }\n\n        console.error(gl.getProgramInfoLog(program));\n        gl.deleteProgram(program);\n    }\n\n    #updateCameraMatrix() {\n        twgl.m4.lookAt(this.camera.position, [0, 0, 0], [0, 1, 0], this.camera.matrix);\n        twgl.m4.inverse(this.camera.matrix, this.drawUniforms.u_viewMatrix);\n    }\n\n    #updateProjectionMatrix() {\n        /* const aspect = this.gl.canvas.clientWidth / this.gl.canvas.clientHeight;\n        twgl.m4.perspective(Math.PI / 4, aspect, 50, 150, this.drawUniforms.u_projectionMatrix);*/\n        twgl.m4.ortho(-1, 1, -1, 1, 0, 2, this.drawUniforms.u_projectionMatrix);\n    }\n\n    #initTweakpane() {\n        if (this.pane) {\n            this.#createSlider(this.pane, 'decay', 0.8, 0.99999);\n            this.#createSlider(this.pane, 'diffuse', 0, 1);\n            this.#createSlider(this.pane, 'randomStrength', 0.1, 10);\n            this.#createSlider(this.pane, 'sensorDist', 3, 50);\n            this.#createSlider(this.pane, 'sensorSize', 1, 30);\n            this.#createSlider(this.pane, 'sensorAngle', 0, Math.PI / 2);\n            this.#createSlider(this.pane, 'velocity', 0.05, 2);\n            this.#createSlider(this.pane, 'steeringStrength', 0.2, 1);\n        }\n    }\n\n    #createSlider(pane, name, min, max) {\n        const slider = pane.addBlade({\n            view: 'slider',\n            label: name,\n            min,\n            max,\n            value: this[name],\n        });\n\n        slider.on('change', e => {\n            this[name] = e.value;\n            this.#updateCameraMatrix();\n        });\n    }\n}\n","#version 300 es\n\nprecision highp float;\n\nvoid main() {}\n","#version 300 es\n\nuniform float u_deltaTime;\nuniform ivec2 u_resolution;\nuniform sampler2D u_dataTexture;\nuniform float u_randomStrength;\nuniform float u_sensorDist;\nuniform float u_sensorAngle;\nuniform float u_velocity;\nuniform float u_steeringStrength;\nuniform float u_sensorSize;\n\nin vec2 a_oldPosition;\nin float a_oldAngle;\n\nout vec2 t_newPosition;\nout float t_newAngle;\n\nconst float PI = 3.14159265359;\n\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\n\nfloat noise(vec2 x) {\n\tvec2 i = floor(x);\n\tvec2 f = fract(x);\n\tfloat a = hash(i);\n\tfloat b = hash(i + vec2(1.0, 0.0));\n\tfloat c = hash(i + vec2(0.0, 1.0));\n\tfloat d = hash(i + vec2(1.0, 1.0));\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat getSensorData(vec2 origin, float angle, float dist, float sensorSize) {\n    vec2 off = vec2(cos(angle), sin(angle)) * dist;\n    vec2 size = vec2(textureSize(u_dataTexture, 0));\n    vec2 sensorUV = (origin + off) / size;\n    vec4 s = textureLod(u_dataTexture, sensorUV, sensorSize);\n    return s.r;\n}\n\nvoid main() {\n    vec2 pos = a_oldPosition;\n    float angle = a_oldAngle;\n    float velocity = u_velocity;\n\n    // get random value between -1 and 1\n    float n = noise(pos * u_deltaTime * 10.);\n    n *= u_randomStrength;\n\n    \n    float left = getSensorData(pos, angle + u_sensorAngle, u_sensorDist, u_sensorSize);\n    float middle = getSensorData(pos, angle, u_sensorDist, u_sensorSize);\n    float right = getSensorData(pos, angle - u_sensorAngle, u_sensorDist, u_sensorSize);\n\n    if (middle > left && middle > right) {\n      angle += 0.0; \n    } else if (middle < left && middle < right) {\n      angle += (n * 2. - 1.) * u_steeringStrength * u_deltaTime;\n    } else if (right > left) {\n      angle -= u_steeringStrength * u_deltaTime;\n    } else if (left > right) {\n      angle += u_steeringStrength * u_deltaTime;\n    }\n\n    vec2 direction = vec2(cos(angle), sin(angle));\n    vec2 resolution = vec2(u_resolution);\n    vec2 centerPos = pos - (resolution * .5 - 1.);\n    vec2 centerDirection = normalize(centerPos);\n    float damping = smoothstep(0.25, 1., length(centerPos) / min(resolution.x, resolution.y));\n    float returnStrength = max(0., dot(centerDirection, direction)) * damping;\n    // find the return angle with the cross product\n    angle += sign(centerDirection.x * direction.y - centerDirection.y * direction.x) * returnStrength;\n    direction = vec2(cos(angle), sin(angle));\n    \n    t_newPosition = pos + velocity * direction * u_deltaTime;\n    t_newPosition = mod(t_newPosition, vec2(u_resolution));\n    t_newAngle = angle;\n}\n","#version 300 es\n\nprecision highp float;\n\nout vec4 outColor;\n\nvoid main() {\n    outColor = vec4(1.);\n}\n","#version 300 es\n\nuniform ivec2 u_resolution;\n\nin vec2 a_position;\n\nvoid main() {\n    vec4 pos = vec4(a_position, 0., 1.) / vec4(u_resolution, 1., 1.);\n    pos = pos * 2. - 1.;\n    gl_Position = pos;\n    gl_PointSize = 1.;\n}\n","#version 300 es\n\nprecision highp float;\n\nuniform sampler2D u_texture;\n\nin vec2 v_uv;\n\nout vec4 outColor;\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid main() {\n    float value = texture(u_texture, v_uv).r;\n    vec3 color = palette(value, vec3(0.5, 0.5, 0.5),\tvec3(0.5, 0.5, 0.5), vec3(2.0, 1.0, 0.0), vec3(0.50, 0.20, 0.25));\n    //outColor = vec4(color, 1.);\n    outColor = vec4(vec3(value), 1.) * 1.;\n}\n","#version 300 es\n\nuniform mat4 u_worldMatrix;\nuniform mat4 u_viewMatrix;\nuniform mat4 u_projectionMatrix;\n\nin vec2 a_position;\nin vec2 a_uv;\n\nout vec2 v_uv;\n\nvoid main() {\n    v_uv = a_uv;\n    gl_Position = u_projectionMatrix * u_viewMatrix * u_worldMatrix * vec4(a_position, 0., 1.);\n}\n","#version 300 es\n\nprecision highp float;\n\nuniform sampler2D u_texture;\nuniform float u_decay;\n\nin vec2 v_uv;\n\nout vec4 outColor;\n\nvoid main() {\n    outColor = texture(u_texture, v_uv) * u_decay;\n}","#version 300 es\n\nin vec2 a_position;\nin vec2 a_uv;\n\nout vec2 v_uv;\n\nvoid main() {\n    v_uv = a_uv;\n    gl_Position = vec4(a_position, 0., 1.);\n}","#version 300 es\n\nprecision highp float;\n\nuniform sampler2D u_texture;\nuniform float u_diffuse;\n\nin vec2 v_uv;\n\nout vec4 outColor;\n\nvoid main() {\n    vec2 texResolution = vec2(textureSize(u_texture, 0));\n    vec4 sum;\n    ivec2 samplePos = ivec2(v_uv * vec2(texResolution));\n    for (int o = -1; o <= 1; ++o) {\n        ivec2 sampleOff = ivec2(o, 0);\n        sum += texelFetch(u_texture, samplePos + sampleOff, 0);\n    }\n\n    vec4 blurResult = sum / 3.0;\n    vec4 orgColor = texture(u_texture, v_uv);\n    outColor = mix(orgColor, blurResult, u_diffuse);\n}","#version 300 es\n\nin vec2 a_position;\nin vec2 a_uv;\n\nout vec2 v_uv;\n\nvoid main() {\n    v_uv = a_uv;\n    gl_Position = vec4(a_position, 0., 1.);\n}","#version 300 es\n\nprecision highp float;\n\nuniform sampler2D u_texture;\nuniform float u_diffuse;\n\nin vec2 v_uv;\n\nout vec4 outColor;\n\nvoid main() {\n    vec2 texResolution = vec2(textureSize(u_texture, 0));\n    vec4 sum;\n    ivec2 samplePos = ivec2(v_uv * vec2(texResolution));\n    for (int o = -1; o <= 1; ++o) {\n        ivec2 sampleOff = ivec2(0., o);\n        sum += texelFetch(u_texture, samplePos + sampleOff, 0);\n    }\n\n    vec4 blurResult = sum / 3.0;\n    vec4 orgColor = texture(u_texture, v_uv);\n    outColor = mix(orgColor, blurResult, u_diffuse);\n}","#version 300 es\n\nin vec2 a_position;\nin vec2 a_uv;\n\nout vec2 v_uv;\n\nvoid main() {\n    v_uv = a_uv;\n    gl_Position = vec4(a_position, 0., 1.);\n}","#version 300 es\n\nprecision highp float;\n\nuniform sampler2D u_texture;\n\nin vec2 v_uv;\n\nout vec4 outColor;\n\nvoid main() {\n    outColor = texture(u_texture, v_uv);\n}","#version 300 es\n\nin vec2 a_position;\nin vec2 a_uv;\n\nout vec2 v_uv;\n\nvoid main() {\n    v_uv = a_uv;\n    gl_Position = vec4(a_position, 0., 1.);\n}"],"names":["sketch","resizeTimeoutId","_tweakpane","require","_webglGpgpuDataTexture","window","addEventListener","pane","canvas","document","body","querySelector","Pane","title","WebGLGPGPUDataTexture","sketch1","run","clearTimeout","setTimeout","resize","_twglJs","_computeParticlePositionFrag","_computeParticlePositionVert","_depositFrag","_depositVert","_drawFrag","_drawVert","_decayFrag","_decayVert","_diffuseHFrag","_diffuseHVert","_diffuseVFrag","_diffuseVVert","_copyFrag","_copyVert","_render","WeakSet","_init","_resizeTextures","_makeTransformFeedback","_createAndSetupTexture","_setFramebuffer","_makeVertexArray","_makeBuffer","_createShader","_createProgram","_updateCameraMatrix","_updateProjectionMatrix","_initTweakpane","_createSlider","oninit","arguments","length","Math","PI","_time","set","this","_deltaTime","_isDestroyed","rotation","position","matrix","m4","identity","add","_rand","min","max","undefined","random","init","call","key","resizeCanvasToDisplaySize","gl","viewport","width","height","resizeTextures","updateProjectionMatrix","time","_helpers","classPrivateFieldGet","computeUniforms","u_deltaTime","render","requestAnimationFrame","t","_this","WeakMap","disable","DEPTH_TEST","CULL_FACE","enable","RASTERIZER_DISCARD","useProgram","computeParticleProgram","bindVertexArray","currentRenderState","computeVAO","uniform1f","computeParticleLocations","uniform2i","u_resolution","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","dataTexture1","uniform1i","u_dataTexture","u_randomStrength","randomStrength","u_sensorDist","sensorDist","u_sensorAngle","sensorAngle","u_velocity","velocity","u_steeringStrength","steeringStrength","u_sensorSize","sensorSize","bindTransformFeedback","TRANSFORM_FEEDBACK","transformFeedback","beginTransformFeedback","POINTS","drawArrays","NUM_PARTICLES","endTransformFeedback","setFramebuffer","fbo1","copyProgram","dataTexture2","copyLocations","u_texture","quadVAO","TRIANGLES","depositProgram","depositLocations","drawVAO","fbo2","diffuseHProgram","diffuseHLocations","u_diffuse","diffuse","diffuseVProgram","diffuseVLocations","decayProgram","decayLocations","u_decay","decay","drawProgram","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","uniformMatrix4fv","drawLocations","u_worldMatrix","drawUniforms","u_viewMatrix","u_projectionMatrix","currentState","nextRenderState","getContext","antialias","Error","getExtension","classPrivateMethodGet","createProgram","a_position","a_uv","a_oldPosition","getAttribLocation","a_oldAngle","getUniformLocation","u_trailsTexture","angles","Float32Array","Array","fill","map","_","positions","ndx","cos","clientWidth","sin","clientHeight","flat","position1Buffer","makeBuffer","DYNAMIC_DRAW","position2Buffer","angles1Buffer","angles2Buffer","compute1VAO","makeVertexArray","compute2VAO","draw1VAO","draw2VAO","pos1TF","makeTransformFeedback","pos2TF","createAndSetupTexture","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","quadPositionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","quadUVBuffer","TRANSFORM_FEEDBACK_BUFFER","updateCameraMatrix","initTweakpane","alert","w","h","texImage2D","R32F","RED","FLOAT","buffers","tf","createTransformFeedback","forEach","buffer","bindBufferBase","texture","createTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","fbo","bufLocPairs","va","createVertexArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_value","slicedToArray","value","loc","numElements","enableVertexAttribArray","vertexAttribPointer","err","return","sizeOrData","usage","buf","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","shaderSources","transformFeedbackVaryings","attribLocations","program","VERTEX_SHADER","FRAGMENT_SHADER","attachShader","SEPARATE_ATTRIBS","attrib","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","lookAt","camera","inverse","ortho","createSlider","name","addBlade","view","label","on","e","module","exports"],"version":3,"file":"index.09c1c2b8.js.map"}