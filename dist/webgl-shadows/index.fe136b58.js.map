{"mappings":"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","sources":["src/webgl-shadows/app.js","src/webgl-shadows/webgl-shadows.js","src/webgl-shadows/shader/fragment.glsl","src/webgl-shadows/shader/vertex.glsl"],"sourcesContent":["import { Pane } from 'tweakpane';\nimport { WebGLShadows } from './webgl-shadows';\n\nlet DEBUG = false;\n\nif (process.env.NODE_ENV !== 'production') {\n    // Only runs in development and will be stripped in production builds.\n    DEBUG = true;\n}\n\nlet sketch;\nlet resizeTimeoutId;\n\nwindow.addEventListener('load', () => {\n    const canvas = document.body.querySelector('#c');\n\n    let pane;\n    if (DEBUG) {\n        pane = new Pane({ title: 'Settings' });\n    }\n\n    sketch = new WebGLShadows(canvas, pane, (sketch) => {\n        sketch.run(); \n    });\n});\n\nwindow.addEventListener('resize', () => {\n    if (sketch) {\n        if (resizeTimeoutId)\n            clearTimeout(resizeTimeoutId);\n\n        resizeTimeoutId = setTimeout(() => {\n            resizeTimeoutId = null;\n            sketch.resize();\n        }, 300);\n    }\n});\n\n\n","\nimport { m4 } from '../math/m4';\nimport chroma from 'chroma-js';\nimport * as twgl from 'twgl.js';\nimport fragmentShaderSource from './shader/fragment.glsl';\nimport vertexShaderSource from './shader/vertex.glsl';\n\nconst colorVS = `#version 300 es\nin vec4 a_position;\n\nuniform mat4 u_projection;\nuniform mat4 u_view;\nuniform mat4 u_world;\n\nvoid main() {\n  // Multiply the position by the matrices.\n  gl_Position = u_projection * u_view * u_world * a_position;\n}\n`;\n\nconst colorFS = `#version 300 es\nprecision highp float;\n\nuniform vec4 u_color;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = u_color;\n}\n`;\n\nexport class WebGLShadows {\n    oninit;\n\n    #time = 0;\n    #isDestroyed = false;\n\n    constructor(canvas, pane, oninit = null) {\n        this.canvas = canvas;\n        this.pane = pane;\n        this.oninit = oninit;\n\n        this.#init();\n    }\n\n    resize() {\n        twgl.resizeCanvasToDisplaySize(this.gl.canvas);\n\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        \n        // set the projection matrix\n        this.#updateProjectionMatrix();\n    }\n\n    run() {\n        this.lastFrameTime = performance.now();\n        this.#animate(this.lastFrameTime);\n    }\n\n    #animate(time) {\n        const delta = time - this.lastFrameTime;\n        this.lastFrameTime = time;\n\n        if (this.#isDestroyed) return;\n\n        // enable backface culling\n        this.gl.enable(this.gl.CULL_FACE);\n        // enable the z-depth tests to discard pixels occluded by other pixels\n        this.gl.enable(this.gl.DEPTH_TEST);\n\n        this.#render();\n\n        // animation models\n        this.rotation[1] += (delta / 30000) * Math.PI * 2;\n        this.#updateModelMatrix();\n\n        requestAnimationFrame(t => this.#animate(t));\n    }\n\n    #render() {\n        // ----------------------------- Draw depth buffer from the lights viewpoint\n        this.#setFramebuffer(this.gl, this.depthFramebuffer, this.depthTextureSize, this.depthTextureSize);\n        this.gl.clearColor(0, 0, 0, 1);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        this.gl.useProgram(this.colorProgramInfo.program);\n        twgl.setUniforms(this.colorProgramInfo, {\n            u_color: [1, 1, 1, 1],\n            u_view: this.lightViewMatrix,\n            u_projection: this.lightProjectionMatrix\n        });\n        this.#renderScene(this.colorProgramInfo);\n\n        // ----------------------------- Draw the scene\n        this.#setFramebuffer(this.gl, null, this.gl.canvas.width, this.gl.canvas.height);\n        this.gl.clearColor(0, 0, 0, 1);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        this.gl.useProgram(this.programInfo.program);\n        // Set the uniforms that are the same for all objects.\n        twgl.setUniforms(this.programInfo, this.uniformsThatAreTheSameForAllObjects);\n        this.#renderScene(this.programInfo);\n\n        /////////////// Draw Light box\n        this.gl.useProgram(this.colorProgramInfo.program);\n        // Setup all the needed attributes.\n        this. gl.bindVertexArray(this.lightBoxVertexArrayObject);\n        // Set the uniforms we just computed\n        twgl.setUniforms(this.colorProgramInfo, {\n          u_color: [1, 1, 1, 1],\n          u_view: this.viewMatrix,\n          u_projection: this.projectionMatrix,\n          u_world: this.lightBoxModelMatrix,\n        });\n        // calls gl.drawArrays or gl.drawElements\n        twgl.drawBufferInfo(this.gl, this.lightBoxLinesBufferInfo, this.gl.LINES);\n    }\n\n    #renderScene(programInfo) {\n        /////////////// Draw Plane\n        this.gl.bindVertexArray(this.planeVertexArrayObject);\n        // Set the matrix uniform\n        this.uniformsThatAreComputedForEachObject.u_world = this.planeModelMatrix;\n        m4.transpose(m4.inverse(this.planeModelMatrix), this.uniformsThatAreComputedForEachObject.u_worldInverseTranspose);\n        twgl.setUniforms(programInfo, this.uniformsThatAreComputedForEachObject);\n        // Set the uniforms that are specific to the this object.\n        twgl.setUniforms(programInfo, this.material2Uniforms);\n        // Draw the geometry.\n        this.gl.drawElements(this.gl.TRIANGLES, this.planeBuffers.numElements, this.gl.UNSIGNED_SHORT, 0);\n\n        /////////////// Draw object\n        this.gl.bindVertexArray(this.objectVertexArrayObject);\n        // Set the matrix uniform\n        this.uniformsThatAreComputedForEachObject.u_world = this.modelMatrix;\n        m4.transpose(m4.inverse(this.modelMatrix), this.uniformsThatAreComputedForEachObject.u_worldInverseTranspose);\n        twgl.setUniforms(programInfo, this.uniformsThatAreComputedForEachObject);\n        // Set the uniforms that are specific to the this object.\n        twgl.setUniforms(programInfo, this.material1Uniforms);\n        // Draw the geometry.\n        this.gl.drawElements(this.gl.TRIANGLES, this.objectBuffers.numElements, this.gl.UNSIGNED_SHORT, 0);\n    }\n\n    destroy() {\n        this.#isDestroyed = true;\n    }\n\n    degToRad(d) {\n        return d * Math.PI / 180;\n    }\n\n    rand(min, max) {\n        if (max === undefined) {\n            max = min;\n            min = 0;\n        }\n        return min + Math.random() * (max - min);\n    };\n    \n    randInt(range) {\n        return Math.floor(Math.random() * range);\n    };\n\n    #init() {\n        this.gl = this.canvas.getContext('webgl2', {antialias: true});\n        const gl = this.gl;\n\n        if (!this.gl) {\n            throw new Error('No WebGL 2 context!')\n        }\n\n        // Tell the twgl to match position with a_position,\n        // normal with a_normal etc..\n        twgl.setAttributePrefix(\"a_\");\n\n        // note: Since we're going to use the same VAO with multiple\n        // shader programs we need to make sure all programs use the\n        // same attribute locations. There are 2 ways to do that.\n        // (1) assign them in GLSL. (2) assign them by calling `gl.bindAttribLocation`\n        // before linking. We're using method 2 as it's more. D.R.Y.\n        const programOptions = {\n            attribLocations: {\n            'a_position': 0,\n            'a_normal':   1,\n            'a_texcoord': 2,\n            'a_color':    3,\n            },\n        };\n\n\n        // setup GLSL program (compiles shader, links program, look up locations)\n        this.programInfo = twgl.createProgramInfo(gl, [vertexShaderSource, fragmentShaderSource], programOptions);\n        const attribSetters  = twgl.createAttributeSetters(gl, this.programInfo.program);\n\n        // color program for lightbox\n        this.colorProgramInfo = twgl.createProgramInfo(gl, [colorVS, colorFS], programOptions);\n\n        //////////////////////// Object VAO\n        this.objectBuffers = twgl.primitives.createCubeBuffers(this.gl, 20);\n        this.objectBuffers = twgl.primitives.createSphereBuffers(this.gl, 15, 32, 32);\n        const objectAttribs = {\n            a_position: { buffer: this.objectBuffers.position, numComponents: 3, },\n            a_normal:   { buffer: this.objectBuffers.normal,   numComponents: 3, },\n            a_texcoord: { buffer: this.objectBuffers.texcoord, numComponents: 2, },\n        };\n        this.objectVertexArrayObject = twgl.createVAOAndSetAttributes(gl, attribSetters, objectAttribs, this.objectBuffers.indices);\n\n        //////////////////////// Plane VAO\n        this.planeBuffers = twgl.primitives.createPlaneBuffers(this.gl, 100, 100, 1, 1);\n        const planeAttribs = {\n            a_position: { buffer: this.planeBuffers.position, numComponents: 3, },\n            a_normal:   { buffer: this.planeBuffers.normal,   numComponents: 3, },\n            a_texcoord: { buffer: this.planeBuffers.texcoord, numComponents: 2, },\n        };\n        this.planeVertexArrayObject = twgl.createVAOAndSetAttributes(gl, attribSetters, planeAttribs, this.planeBuffers.indices);\n\n\n        //////////////////////// Light Box VAO\n        this.lightBoxLinesBufferInfo = twgl.createBufferInfoFromArrays(gl, {\n            position: [\n               0,  0, -1,\n               1,  0, -1,\n               0,  1, -1,\n               1,  1, -1,\n               0,  0,  1,\n               1,  0,  1,\n               0,  1,  1,\n               1,  1,  1,\n            ],\n            indices: [\n              0, 1,\n              1, 3,\n              3, 2,\n              2, 0,\n        \n              4, 5,\n              5, 7,\n              7, 6,\n              6, 4,\n        \n              0, 4,\n              1, 5,\n              3, 7,\n              2, 6,\n            ],\n          });\n          this.lightBoxVertexArrayObject = twgl.createVAOFromBufferInfo(gl, this.colorProgramInfo, this.lightBoxLinesBufferInfo);\n\n        // Create a texture.\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // fill texture with 3x2 pixels\n        const level = 0;\n        const internalFormat = gl.LUMINANCE;\n        const width = 8;\n        const height = 8;\n        const border = 0;\n        const format = gl.LUMINANCE;\n        const type = gl.UNSIGNED_BYTE;\n        const data = new Uint8Array([\n            255, 128, 255, 128, 255, 128, 255, 128, \n            128, 255, 128, 255, 128, 255, 128, 255,\n            255, 128, 255, 128, 255, 128, 255, 128, \n            128, 255, 128, 255, 128, 255, 128, 255,\n            255, 128, 255, 128, 255, 128, 255, 128, \n            128, 255, 128, 255, 128, 255, 128, 255,\n            255, 128, 255, 128, 255, 128, 255, 128, \n            128, 255, 128, 255, 128, 255, 128, 255,\n        ]);\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, data);\n        \n        // set the filtering so we don't need mips and it's not filtered\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        this.material1Uniforms = {\n            u_colorMult:             chroma.hsv(0, 0, 1).gl(),\n            u_ambient:               [0.3, 0.3, 0.35, 1],\n            u_diffuse:               texture,\n            u_specular:              [1, 1, 1, 1],\n            u_shininess:             50,\n            u_specularFactor:        .7,\n            u_recieveShadow:         false\n        };\n\n        this.material2Uniforms = {\n            u_colorMult:             chroma.hsv(200, 1, 1).gl(),\n            u_ambient:               [0.3, 0.3, 0.35, 1],\n            u_diffuse:               texture,\n            u_specular:              [1, 1, 1, 1],\n            u_shininess:             5,\n            u_specularFactor:        .25,\n            u_recieveShadow:         true\n        };\n\n        // init the transformation properties\n        this.origin = [0, 0, 0];\n        this.translation = [0, 0, 0];\n        this.scale = [1, 1, 1];\n        this.rotation = [0, 0, 0];\n        this.#updateModelMatrix();\n\n        this.planeModelMatrix = m4.translation(0, -15, 0);\n\n        // init global matrices\n        this.projectionMatrix = m4.identity();\n        this.viewMatrix = m4.identity();\n        this.cameraMatrix = m4.identity();\n\n        // init projection\n        this.#updateProjectionMatrix();\n\n        // init camera\n        this.cameraRotationY = 0;\n        this.#updateCameraMatrix();\n\n        // light properties\n        this.lightWorldPosition = [-100, 100, 0];\n\n        // create the light matrix\n        this.lightWorldMatrix = m4.lookAt(\n            this.lightWorldPosition,\n            [0, 0, 0],\n            [0, -1, 0]\n        );\n        /*m4.scale(this.lightWorldMatrix, 0.5, 0.5, 1, this.lightWorldMatrix);\n        this.lightProjectionMatrix = m4.perspective(\n            this.degToRad(45),\n            1,\n            5,  // near\n            180);*/\n        const orthoSize = 30;\n        this.lightProjectionMatrix = m4.orthographic(-orthoSize, orthoSize, -orthoSize, orthoSize, 110, 200);\n        //m4.translate(this.lightProjectionMatrix, pw/2, ph/2, 0, this.lightProjectionMatrix);\n        this.lightViewMatrix = m4.inverse(this.lightWorldMatrix);\n        this.lightViewProjectionMatrix = m4.multiply(this.lightProjectionMatrix, this.lightViewMatrix);\n        // get the inverse of the light projection to draw the light box model\n        this.lightBoxModelMatrix = m4.multiply(m4.inverse(this.lightViewProjectionMatrix), m4.translate(m4.scaling(2, 2, 1), -.5, -.5, 0));\n\n\n        // create the framebuffer to render the depth texture into\n        this.lightDepthTexture = this.#createAndSetupTexture(this.gl);\n        this.depthTextureSize = 512;\n        gl.bindTexture(gl.TEXTURE_2D, this.lightDepthTexture);\n        gl.texImage2D(\n            gl.TEXTURE_2D,      // target\n            0,                  // mip level\n            gl.DEPTH_COMPONENT32F, // internal format\n            this.depthTextureSize,   // width\n            this.depthTextureSize,   // height\n            0,                  // border\n            gl.DEPTH_COMPONENT, // format\n            gl.FLOAT,           // type\n            null);              // data\n\n        this.depthFramebuffer = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.depthFramebuffer);\n        gl.framebufferTexture2D(\n            gl.FRAMEBUFFER,       // target\n            gl.DEPTH_ATTACHMENT,  // attachment point\n            gl.TEXTURE_2D,        // texture target\n            this.lightDepthTexture,         // texture\n            0);                   // mip level\n\n\n        this.uniformsThatAreTheSameForAllObjects = {\n            u_projection:            this.projectionMatrix,\n            u_view:                  this.viewMatrix,\n            u_lightWorldPos:         this.lightWorldPosition,\n            u_viewInverse:           this.cameraMatrix,\n            u_lightColor:            [1, 1, 1, 1],\n            u_lightMatrix:           this.lightViewProjectionMatrix,\n            u_projectedTexture:      this.lightDepthTexture\n        };\n\n        /*this.uniformsThatAreTheSameForAllObjects = {\n            u_projection:            this.lightProjectionMatrix,\n            u_view:                  this.lightViewMatrix,\n            u_lightWorldPos:         this.lightWorldPosition,\n            u_viewInverse:           this.lightWorldMatrix,\n            u_lightColor:            [1, 1, 1, 1],\n            u_lightMatrix:           this.lightViewProjectionMatrix,\n            u_projectedTexture:      this.lightDepthTexture\n        };*/\n    \n        this.uniformsThatAreComputedForEachObject = {\n            u_world:                 m4.identity(),\n            u_worldInverseTranspose: m4.identity(),\n        };\n\n\n        this.resize();\n\n        this.#initTweakpane();\n\n        if (this.oninit) this.oninit(this);\n    }\n\n    #setFramebuffer(gl, fbo, width, height) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo); // all draw commands will affect the framebuffer\n        gl.viewport(0, 0, width, height);\n    }\n\n    #createAndSetupTexture(gl) {\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        return texture;\n    }\n\n    #updateProjectionMatrix() {\n        const aspect = this.gl.canvas.clientWidth / this.gl.canvas.clientHeight;\n        const zNear = 1;\n        const zFar = 2000;\n        const fov = 75 * (Math.PI / 180);\n        m4.perspective(fov, aspect, zNear, zFar, this.projectionMatrix);\n    }\n\n    #updateCameraMatrix() {\n        // init the camera matrix\n        m4.yRotation(this.cameraRotationY, this.cameraMatrix);\n        m4.xRotate(this.cameraMatrix, this.degToRad(-45), this.cameraMatrix);\n        m4.translate(this.cameraMatrix, 0, -10, 100, this.cameraMatrix);\n\n        // init the view matrix\n        m4.inverse(this.cameraMatrix, this.viewMatrix);\n    }\n\n    #updateModelMatrix() {\n        this.modelMatrix = m4.translation(this.translation[0], this.translation[1], this.translation[2]);\n        this.modelMatrix = m4.xRotate(this.modelMatrix, this.rotation[0]);\n        this.modelMatrix = m4.yRotate(this.modelMatrix, this.rotation[1]);\n        this.modelMatrix = m4.zRotate(this.modelMatrix, this.rotation[2]);\n        this.modelMatrix = m4.scale(this.modelMatrix, this.scale[0], this.scale[1], this.scale[2]);\n        this.modelMatrix = m4.translate(this.modelMatrix, -this.origin[0], -this.origin[1], -this.origin[2]);\n    }\n\n    #initTweakpane() {\n        if (this.pane) {\n            // init tweakpane folders and inputs\n\n            const cameraRYSlider = this.pane.addBlade({\n                view: 'slider',\n                label: 'camera RY',\n                min: 0,\n                max: 2 * Math.PI,\n                value: 0,\n            });\n\n            cameraRYSlider.on('change', e => {\n                this.cameraRotationY = e.value;\n                this.#updateCameraMatrix();\n            });\n\n            const objectYSlider = this.pane.addBlade({\n                view: 'slider',\n                label: 'sphere Y',\n                min: 0,\n                max: 20,\n                value: 0,\n            });\n\n            objectYSlider.on('change', e => {\n                this.translation[1] = e.value;\n                this.#updateModelMatrix();\n            });\n        }\n    }\n}\n","#version 300 es\nprecision highp float;\n \nin vec4 v_position;\nin vec2 v_texCoord;\nin vec3 v_normal;\nin vec3 v_surfaceToLight;\nin vec3 v_surfaceToView;\nin vec4 v_projectedLightCoord;\n \nuniform vec4 u_lightColor;\nuniform vec4 u_ambient;\nuniform sampler2D u_diffuse;\nuniform sampler2D u_projectedTexture;\nuniform vec4 u_specular;\nuniform float u_shininess;\nuniform float u_specularFactor;\nuniform vec4 u_colorMult;\nuniform bool u_recieveShadow;\n \nout vec4 outColor;\n \nvec4 lit(float l ,float h, float m) {\n  return vec4(1.0,\n              max(l, 0.0),\n              (l > 0.0) ? pow(max(0.0, h), m) : 0.0,\n              1.0);\n}\n \nvoid main() {\n    // divide by w to get the correct value\n    vec3 projectedLightCoord = v_projectedLightCoord.xyz / v_projectedLightCoord.w;\n    projectedLightCoord = projectedLightCoord * 0.5 + 0.5;\n    float currentDepth = projectedLightCoord.z - 0.005;\n    \n    bool inRange = \n        projectedLightCoord.x >= 0.0 &&\n        projectedLightCoord.x <= 1.0 &&\n        projectedLightCoord.y >= 0.0 &&\n        projectedLightCoord.y <= 1.0;\n    float projectedAmount = inRange ? 1.0 : 0.0;\n    float projectedDepth = texture(u_projectedTexture, projectedLightCoord.xy).r;\n    float shadowLight = (!u_recieveShadow || currentDepth <= projectedDepth) ? 1.0 : 0.;\n\n\n    vec4 diffuseColor = texture(u_diffuse, v_texCoord) * u_colorMult;\n    vec3 a_normal = normalize(v_normal);\n    vec3 surfaceToLight = normalize(v_surfaceToLight);\n    vec3 surfaceToView = normalize(v_surfaceToView);\n    vec3 halfVector = normalize(surfaceToLight + surfaceToView);\n    vec4 litR = lit(dot(a_normal, surfaceToLight), dot(a_normal, halfVector), u_shininess);\n    outColor = vec4((u_lightColor * (diffuseColor * litR.y * shadowLight + diffuseColor * u_ambient + u_specular * litR.z * u_specularFactor * shadowLight)).rgb, diffuseColor.a);\n}","#version 300 es\n \nuniform mat4 u_projection;\nuniform mat4 u_view;\nuniform vec3 u_lightWorldPos;\nuniform mat4 u_world;\nuniform mat4 u_viewInverse;\nuniform mat4 u_worldInverseTranspose;\nuniform mat4 u_lightMatrix;\n \nin vec4 a_position;\nin vec3 a_normal;\nin vec2 a_texcoord;\n \nout vec4 v_position;\nout vec2 v_texCoord;\nout vec3 v_normal;\nout vec3 v_surfaceToLight;\nout vec3 v_surfaceToView;\nout vec4 v_projectedLightCoord;\n \nvoid main() {\n    vec4 worldPosition = u_world * a_position;\n    v_texCoord = a_texcoord;\n    v_position = u_projection * u_view * worldPosition;\n    v_normal = (u_worldInverseTranspose * vec4(a_normal, 0)).xyz;\n    v_surfaceToLight = u_lightWorldPos - worldPosition.xyz;\n    v_surfaceToView = (u_viewInverse[3] - worldPosition).xyz;\n    v_projectedLightCoord = u_lightMatrix * worldPosition;\n    gl_Position = v_position;\n}"],"names":["sketch","resizeTimeoutId","_tweakpane","require","_webglShadows","window","addEventListener","pane","canvas","document","body","querySelector","Pane","title","WebGLShadows","sketch1","run","clearTimeout","setTimeout","resize","_m4","_chromaJs","_twglJs","_fragmentGlsl","_vertexGlsl","_animate","WeakSet","_render","_renderScene","_init","_setFramebuffer","_createAndSetupTexture","_updateProjectionMatrix","_updateCameraMatrix","_updateModelMatrix","_initTweakpane","oninit","arguments","length","_time","set","this","_isDestroyed","add","init","call","key","resizeCanvasToDisplaySize","gl","viewport","width","height","updateProjectionMatrix","lastFrameTime","performance","now","animate","d","Math","PI","min","max","undefined","random","range","floor","WeakMap","time","delta","_helpers","classPrivateFieldGet","enable","CULL_FACE","DEPTH_TEST","render","rotation","updateModelMatrix","requestAnimationFrame","t","classPrivateMethodGet","_this","setFramebuffer","depthFramebuffer","depthTextureSize","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","useProgram","colorProgramInfo","program","setUniforms","u_color","u_view","lightViewMatrix","u_projection","lightProjectionMatrix","renderScene","programInfo","uniformsThatAreTheSameForAllObjects","bindVertexArray","lightBoxVertexArrayObject","viewMatrix","projectionMatrix","u_world","lightBoxModelMatrix","drawBufferInfo","lightBoxLinesBufferInfo","LINES","planeVertexArrayObject","uniformsThatAreComputedForEachObject","planeModelMatrix","transpose","m4","inverse","u_worldInverseTranspose","material2Uniforms","drawElements","TRIANGLES","planeBuffers","numElements","UNSIGNED_SHORT","objectVertexArrayObject","modelMatrix","material1Uniforms","objectBuffers","getContext","antialias","Error","setAttributePrefix","programOptions","attribLocations","a_position","a_normal","a_texcoord","a_color","createProgramInfo","attribSetters","createAttributeSetters","primitives","createCubeBuffers","createSphereBuffers","objectAttribs","buffer","position","numComponents","normal","texcoord","createVAOAndSetAttributes","indices","createPlaneBuffers","planeAttribs","createBufferInfoFromArrays","createVAOFromBufferInfo","texture","createTexture","bindTexture","TEXTURE_2D","internalFormat","LUMINANCE","format","type","UNSIGNED_BYTE","data","Uint8Array","pixelStorei","UNPACK_ALIGNMENT","texImage2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","u_colorMult","_chromaJsDefault","default","hsv","u_ambient","u_diffuse","u_specular","u_shininess","u_specularFactor","u_recieveShadow","origin","translation","scale","identity","cameraMatrix","cameraRotationY","updateCameraMatrix","lightWorldPosition","lightWorldMatrix","lookAt","orthographic","lightViewProjectionMatrix","multiply","translate","scaling","lightDepthTexture","createAndSetupTexture","DEPTH_COMPONENT32F","DEPTH_COMPONENT","FLOAT","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","DEPTH_ATTACHMENT","u_lightWorldPos","u_viewInverse","u_lightColor","u_lightMatrix","u_projectedTexture","initTweakpane","fbo","aspect","clientWidth","clientHeight","fov","perspective","yRotation","xRotate","degToRad","yRotate","zRotate","addBlade","view","label","value","on","e","module","exports"],"version":3,"file":"index.fe136b58.js.map"}