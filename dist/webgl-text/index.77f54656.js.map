{"mappings":"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","sources":["src/webgl-text/app.js","src/webgl-text/webgl-text.js","src/webgl-text/shader/f-fragment.glsl","src/webgl-text/shader/f-vertex.glsl","src/webgl-text/shader/text-fragment.glsl","src/webgl-text/shader/text-vertex.glsl"],"sourcesContent":["import { Pane } from 'tweakpane';\nimport { WebGLText } from './webgl-text';\n\nlet DEBUG = false;\n\nif (process.env.NODE_ENV !== 'production') {\n    // Only runs in development and will be stripped in production builds.\n    DEBUG = true;\n}\n\nlet sketch;\nlet resizeTimeoutId;\n\nwindow.addEventListener('load', () => {\n    const canvas = document.body.querySelector('#c');\n\n    let pane;\n    if (DEBUG) {\n        pane = new Pane({ title: 'Settings' });\n    }\n\n    sketch = new WebGLText(canvas, pane, (sketch) => {\n        sketch.run(); \n    });\n});\n\nwindow.addEventListener('resize', () => {\n    if (sketch) {\n        if (resizeTimeoutId)\n            clearTimeout(resizeTimeoutId);\n\n        resizeTimeoutId = setTimeout(() => {\n            resizeTimeoutId = null;\n            sketch.resize();\n        }, 300);\n    }\n});\n\n\n","\nimport * as twgl from 'twgl.js';\nimport { m4 } from '../math/m4';\nimport fFragmentShaderSource from './shader/f-fragment.glsl';\nimport fVertexShaderSource from './shader/f-vertex.glsl';\nimport textFragmentShaderSource from './shader/text-fragment.glsl';\nimport textVertexShaderSource from './shader/text-vertex.glsl';\n\nexport class WebGLText {\n    oninit;\n\n    #time = 0;\n    #deltaTime = 0;\n    #isDestroyed = false;\n\n    camera = {\n        radius: 1000,\n        rotation: 0,\n        position: [0, 0, 0],\n        matrix: twgl.m4.identity()\n    };\n\n    constructor(canvas, pane, oninit = null) {\n        this.canvas = canvas;\n        this.pane = pane;\n        this.oninit = oninit;\n\n        this.#init();\n    }\n\n    resize() {\n        this.#resizeCanvasToDisplaySize(this.gl.canvas);\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n\n        this.#updateProjectionMatrix();\n    }\n\n    run(time = 0) {\n        this.#deltaTime = time - this.#time;\n        this.#time = time;\n\n        if (this.#isDestroyed) return;\n\n        // animate the camera rotation\n        this.camera.rotation += (this.#deltaTime / 8000) * Math.PI * 2; // one rotation every 8 seconds\n        this.camera.position[0] = Math.cos(this.camera.rotation) * this.camera.radius;\n        this.camera.position[2] = Math.sin(this.camera.rotation) * this.camera.radius;\n        this.#updateCameraMatrix();\n\n        this.#render();\n\n        requestAnimationFrame((t) => this.run(t));\n    }\n\n    #render() {\n        // Draw\n        this.gl.clearColor(0, 0, 0, 1);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        this.gl.enable(this.gl.DEPTH_TEST);\n        this.gl.enable(this.gl.CULL_FACE);\n        this.gl.disable(this.gl.BLEND);\n        this.gl.depthMask(true);\n\n        // draw Fs\n        this.gl.useProgram(this.fProgramInfo.program);\n        this.gl.bindVertexArray(this.fVAO);\n        const modelUniforms = {\n            u_worldMatrix: twgl.m4.identity()\n        };\n\n        const numColumns = 4;\n        const numRows = 4;\n        const spread = 200;\n        const fWorldMatrices = [];\n        for(let c=0; c<numColumns; c++) {\n            for(let r=0; r<numRows; r++) {\n                const fWorldMatrix = twgl.m4.translation([\n                    c * spread - ((numColumns - 1)  * spread) / 2,\n                    r * spread - ((numRows - 1)  * spread) / 2,\n                    0\n                ]);\n                const rX = (this.#time / (3000) + (r * c * 0.035)) * Math.PI * 2;\n                const rY = (this.#time / (3000) + (r * c * 0.015)) * Math.PI * 2;\n\n                twgl.m4.rotateX(fWorldMatrix, rX, fWorldMatrix);\n                twgl.m4.rotateY(fWorldMatrix, rY, fWorldMatrix);\n                twgl.m4.translate(fWorldMatrix, this.fOrigin, fWorldMatrix);\n\n                fWorldMatrices.push(fWorldMatrix);\n\n                //twgl.m4.multiply(fWorldMatrix, spreadMatrix, modelUniforms.u_worldMatrix);\n                modelUniforms.u_worldMatrix = fWorldMatrix;\n\n                const fUniforms = { ...this.globalUniforms, ...modelUniforms };\n                twgl.setUniforms(this.fProgramInfo, fUniforms);\n                twgl.drawBufferInfo(this.gl, this.fBufferInfo);\n            }\n        }\n\n        // position the html overlay\n        const overlayMatrix = fWorldMatrices[6];\n        twgl.m4.multiply(this.globalUniforms.u_viewMatrix, overlayMatrix, overlayMatrix);\n        twgl.m4.multiply(this.globalUniforms.u_projectionMatrix, overlayMatrix, overlayMatrix);\n        //let overlayPosition = twgl.m4.transformPoint(overlayMatrix, [0, 0, 0, 1]);\n        let overlayPosition = m4.transformVector(overlayMatrix, [0, 0, 0, 1]);\n        overlayPosition = twgl.v3.divScalar(overlayPosition, overlayPosition[3]);\n        overlayPosition = twgl.v3.multiply(\n            overlayPosition, \n            [this.gl.canvas.clientWidth * .5, -this.gl.canvas.clientHeight * 0.5, 0]\n        );\n        overlayPosition = twgl.v3.add(overlayPosition, [this.gl.canvas.clientWidth * .5, this.gl.canvas.clientHeight * 0.5, 0]);\n        this.overlayElm.style.transform = `translate(${overlayPosition[0]}px,${overlayPosition[1]}px)`;\n\n\n        // draw the text quad\n        this.gl.enable(this.gl.BLEND);\n        this.gl.blendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n        this.gl.depthMask(false);    // disable depth writing\n\n        this.gl.useProgram(this.textProgramInfo.program);\n        this.gl.bindVertexArray(this.textVAO);\n        const targetFMatrix = twgl.m4.multiply(this.globalUniforms.u_viewMatrix, fWorldMatrices[9]);\n        const textPos = [targetFMatrix[12], targetFMatrix[13], targetFMatrix[14]];\n        const fromEye = twgl.v3.normalize(textPos);\n        const offsetFromEye = 150;\n        textPos[0] -= fromEye[0] * offsetFromEye;\n        textPos[1] -= fromEye[1] * offsetFromEye;\n        textPos[2] -= fromEye[2] * offsetFromEye;\n        // make the text stay the same size\n        const scale = twgl.v3.mulScalar(this.textScale, -textPos[2] / this.gl.canvas.height);\n        const textMatrix = twgl.m4.scale(twgl.m4.translation(textPos), scale);\n        twgl.m4.scale(textMatrix, [0.25, 0.25, 1], textMatrix);\n        const textUniforms = { \n            u_worldMatrix: textMatrix,\n            u_viewMatrix: twgl.m4.identity(),\n            u_texture: this.textTexture \n        };\n        twgl.setUniforms(this.textProgramInfo, {...this.globalUniforms, ...textUniforms});\n        twgl.drawBufferInfo(this.gl, this.textBufferInfo);\n    }\n\n    destroy() {\n        this.#isDestroyed = true;\n    }\n\n    #init() {\n        this.gl = this.canvas.getContext('webgl2');\n        if (!this.gl) {\n            throw new Error('No WebGL 2 context!')\n        }\n\n        // setup the parent element\n        this.parentElm = (this.canvas.parentElement);\n        this.parentElm.style.position = 'relative';\n\n        // tell twgl to match program to a_program and\n        // normal to a_normal etc...\n        twgl.setAttributePrefix(\"a_\");\n\n        // setup programs\n        this.fProgramInfo = twgl.createProgramInfo(this.gl, [fVertexShaderSource, fFragmentShaderSource]);\n        this.textProgramInfo = twgl.createProgramInfo(this.gl, [textVertexShaderSource, textFragmentShaderSource]);\n\n        // setup f vertex array object and buffers\n        this.fBufferInfo = twgl.primitives.create3DFBufferInfo(this.gl);\n        this.fVAO = twgl.createVAOFromBufferInfo(this.gl, this.fProgramInfo, this.fBufferInfo);\n        this.fOrigin = [-50, -75, -15];\n\n        this.textBufferInfo = twgl.primitives.createXYQuadBufferInfo(this.gl, 1);\n        this.textVAO = twgl.createVAOFromBufferInfo(this.gl, this.textProgramInfo, this.textBufferInfo);\n\n        // create the text texture\n        const textCanvas = this.#createCanvasText('HELLO TEXTURE!', 800, 130);\n        this.textTexture = this.gl.createTexture();\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.textTexture);\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, true);\n        this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true); // canvas produces premultiplied alpha\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_LINEAR);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, textCanvas);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n        this.textScale = [textCanvas.width, textCanvas.height, 1];\n\n        // init the global uniforms\n        this.globalUniforms = {\n            u_viewMatrix: twgl.m4.identity(),\n            u_projectionMatrix: twgl.m4.identity()\n        };\n\n        this.resize();\n\n        this.#updateCameraMatrix();\n        this.#updateProjectionMatrix();\n\n        this.#createHTMLOverlay();\n\n        this.#initTweakpane();\n\n        if (this.oninit) this.oninit(this);\n    }\n\n    #createCanvasText(text, width, height) {\n        if (!this.textCanvas) {\n            this.textCanvas = document.createElement('canvas');\n            this.textCanvasContext = this.textCanvas.getContext('2d');\n        }\n\n        this.textCanvasContext.canvas.width  = width;\n        this.textCanvasContext.canvas.height = height;\n        this.textCanvasContext.font = \"bold 85px sans-serif\";\n        this.textCanvasContext.textAlign = \"center\";\n        this.textCanvasContext.textBaseline = \"middle\";\n        this.textCanvasContext.fillStyle = \"white\";\n        this.textCanvasContext.clearRect(0, 0, this.textCanvasContext.canvas.width, this.textCanvasContext.canvas.height);\n        this.textCanvasContext.fillText(text, width / 2, height / 2);\n\n        return this.textCanvas;\n    }\n\n    #createHTMLOverlay() {\n        this.overlayElm = document.createElement('div');\n        this.overlayElm.style.position = 'absolute';\n        this.overlayElm.style.fontSize = '1em';\n        this.overlayElm.style.color = 'white';\n        this.overlayElm.style.top = 0;\n        this.overlayElm.style.left = 0;\n        this.overlayElm.style.borderTop = '1px solid red';\n        this.overlayElm.innerText = 'HTML';\n\n        this.parentElm.appendChild(this.overlayElm);\n    }\n\n    #updateCameraMatrix() {\n        twgl.m4.lookAt(this.camera.position, [0, 0, 0], [0, 1, 0], this.camera.matrix);\n        twgl.m4.inverse(this.camera.matrix, this.globalUniforms.u_viewMatrix);\n    }\n\n    #updateProjectionMatrix() {\n        const aspect = this.gl.canvas.clientWidth / this.gl.canvas.clientHeight;\n        twgl.m4.perspective(Math.PI / 4, aspect, 1, 4000, this.globalUniforms.u_projectionMatrix);\n    }\n\n    #resizeCanvasToDisplaySize(canvas) {\n        // Lookup the size the browser is displaying the canvas in CSS pixels.\n        const displayWidth  = canvas.clientWidth;\n        const displayHeight = canvas.clientHeight;\n       \n        // Check if the canvas is not the same size.\n        const needResize = canvas.width  !== displayWidth ||\n                           canvas.height !== displayHeight;\n       \n        if (needResize) {\n          // Make the canvas the same size\n          canvas.width  = displayWidth;\n          canvas.height = displayHeight;\n        }\n       \n        return needResize;\n    }\n\n    #initTweakpane() {\n        if (this.pane) {\n            // init tweakpane folders and inputs\n            const cameraRadiusSlider = this.pane.addBlade({\n                view: 'slider',\n                label: 'c.radius',\n                min: 100,\n                max: this.camera.radius * 2,\n                value: this.camera.radius,\n            });\n\n            cameraRadiusSlider.on('change', e => {\n                this.camera.radius = e.value;\n                this.#updateCameraMatrix();\n            });\n\n            const cameraYSlider = this.pane.addBlade({\n                view: 'slider',\n                label: 'c.y',\n                min: -1000,\n                max: 1000,\n                value: this.camera.position[1],\n            });\n\n            cameraYSlider.on('change', e => {\n                this.camera.position[1] = e.value;\n                this.#updateCameraMatrix();\n            });\n        }\n    }\n}\n","#version 300 es\n\n// fragment shaders don't have a default precision so we need\n// to pick one. highp is a good default. It means \"high precision\"\nprecision highp float;\n\nuniform float u_time;\n\nin vec4 v_color;\n\nout vec4 outColor;\n\nvoid main() {\n    outColor = v_color;\n}\n","#version 300 es\n\nuniform mat4 u_worldMatrix;\nuniform mat4 u_viewMatrix;\nuniform mat4 u_projectionMatrix;\n\nin vec4 a_position;\nin vec4 a_color;\n\nout vec4 v_color;\n\nvoid main() {\n    v_color = a_color;\n    gl_Position = u_projectionMatrix * u_viewMatrix * u_worldMatrix * a_position;\n}\n","#version 300 es\n\n// fragment shaders don't have a default precision so we need\n// to pick one. highp is a good default. It means \"high precision\"\nprecision highp float;\n\nuniform sampler2D u_texture;\n\nin vec2 v_uv;\n\nout vec4 outColor;\n\nvoid main() {\n    outColor = texture(u_texture, v_uv) * vec4(v_uv + 0.2, 1., 1.);\n}\n","#version 300 es\n\nuniform mat4 u_worldMatrix;\nuniform mat4 u_viewMatrix;\nuniform mat4 u_projectionMatrix;\n\nin vec4 a_position;\nin vec2 a_texcoord;\n\nout vec2 v_uv;\n\nvoid main() {\n    v_uv = a_texcoord;\n    gl_Position = u_projectionMatrix * u_viewMatrix * u_worldMatrix * a_position;\n}\n"],"names":["require","sketch","resizeTimeoutId","_webglText","window","addEventListener","pane","canvas","document","body","querySelector","WebGLText","sketch1","run","clearTimeout","setTimeout","resize","_twglJs","_m4","_fFragmentGlsl","_fVertexGlsl","_textFragmentGlsl","_textVertexGlsl","_render","WeakSet","_init","_createCanvasText","_createHTMLOverlay","_updateCameraMatrix","_updateProjectionMatrix","_resizeCanvasToDisplaySize","_initTweakpane","oninit","arguments","length","_time","set","this","_deltaTime","_isDestroyed","radius","rotation","position","matrix","m4","identity","add","init","call","key","resizeCanvasToDisplaySize","gl","viewport","width","height","updateProjectionMatrix","time","_helpers","classPrivateFieldGet","camera","Math","PI","cos","sin","updateCameraMatrix","render","requestAnimationFrame","t","_this","WeakMap","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","CULL_FACE","disable","BLEND","depthMask","useProgram","fProgramInfo","program","bindVertexArray","fVAO","modelUniforms","u_worldMatrix","spread","fWorldMatrices","c","r","fWorldMatrix","translation","rX","rY","rotateX","rotateY","translate","fOrigin","push","fUniforms","objectSpread","globalUniforms","setUniforms","drawBufferInfo","fBufferInfo","overlayMatrix","multiply","u_viewMatrix","u_projectionMatrix","overlayPosition","transformVector","v3","divScalar","clientWidth","clientHeight","overlayElm","style","transform","concat","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","textProgramInfo","textVAO","targetFMatrix","textPos","fromEye","normalize","scale","mulScalar","textScale","textMatrix","textUniforms","u_texture","textTexture","textBufferInfo","getContext","Error","parentElm","parentElement","setAttributePrefix","createProgramInfo","primitives","create3DFBufferInfo","createVAOFromBufferInfo","createXYQuadBufferInfo","textCanvas","classPrivateMethodGet","createCanvasText","createTexture","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texParameteri","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","createHTMLOverlay","initTweakpane","text","createElement","textCanvasContext","font","textAlign","textBaseline","fillStyle","clearRect","fillText","fontSize","color","top","left","borderTop","innerText","appendChild","lookAt","inverse","aspect","perspective","displayWidth","displayHeight","needResize","addBlade","view","label","min","max","value","on","e","module","exports"],"version":3,"file":"index.77f54656.js.map"}