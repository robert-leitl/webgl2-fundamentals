{"mappings":"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","sources":["src/math/m4.js"],"sourcesContent":["/*\n * Copyright 2021, GFXFundamentals.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of GFXFundamentals. nor the names of his\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Various 3d math functions.\n *\n * @module webgl-3d-math\n */\n    /**\n     * An array or typed array with 3 values.\n     * @typedef {number[]|TypedArray} Vector3\n     * @memberOf module:webgl-3d-math\n     */\n  \n    /**\n     * An array or typed array with 4 values.\n     * @typedef {number[]|TypedArray} Vector4\n     * @memberOf module:webgl-3d-math\n     */\n  \n    /**\n     * An array or typed array with 16 values.\n     * @typedef {number[]|TypedArray} Matrix4\n     * @memberOf module:webgl-3d-math\n     */\n  \n  \n    let MatType = Float32Array;\n  \n    /**\n     * Sets the type this library creates for a Mat4\n     * @param {constructor} Ctor the constructor for the type. Either `Float32Array` or `Array`\n     * @return {constructor} previous constructor for Mat4\n     */\n    function setDefaultType(Ctor) {\n      const OldType = MatType;\n      MatType = Ctor;\n      return OldType;\n    }\n  \n    /**\n     * Takes two 4-by-4 matrices, a and b, and computes the product in the order\n     * that pre-composes b with a.  In other words, the matrix returned will\n     * transform by b first and then a.  Note this is subtly different from just\n     * multiplying the matrices together.  For given a and b, this function returns\n     * the same object in both row-major and column-major mode.\n     * @param {Matrix4} a A matrix.\n     * @param {Matrix4} b A matrix.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     */\n    function multiply(a, b, dst) {\n      dst = dst || new MatType(16);\n      var b00 = b[0 * 4 + 0];\n      var b01 = b[0 * 4 + 1];\n      var b02 = b[0 * 4 + 2];\n      var b03 = b[0 * 4 + 3];\n      var b10 = b[1 * 4 + 0];\n      var b11 = b[1 * 4 + 1];\n      var b12 = b[1 * 4 + 2];\n      var b13 = b[1 * 4 + 3];\n      var b20 = b[2 * 4 + 0];\n      var b21 = b[2 * 4 + 1];\n      var b22 = b[2 * 4 + 2];\n      var b23 = b[2 * 4 + 3];\n      var b30 = b[3 * 4 + 0];\n      var b31 = b[3 * 4 + 1];\n      var b32 = b[3 * 4 + 2];\n      var b33 = b[3 * 4 + 3];\n      var a00 = a[0 * 4 + 0];\n      var a01 = a[0 * 4 + 1];\n      var a02 = a[0 * 4 + 2];\n      var a03 = a[0 * 4 + 3];\n      var a10 = a[1 * 4 + 0];\n      var a11 = a[1 * 4 + 1];\n      var a12 = a[1 * 4 + 2];\n      var a13 = a[1 * 4 + 3];\n      var a20 = a[2 * 4 + 0];\n      var a21 = a[2 * 4 + 1];\n      var a22 = a[2 * 4 + 2];\n      var a23 = a[2 * 4 + 3];\n      var a30 = a[3 * 4 + 0];\n      var a31 = a[3 * 4 + 1];\n      var a32 = a[3 * 4 + 2];\n      var a33 = a[3 * 4 + 3];\n      dst[ 0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;\n      dst[ 1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;\n      dst[ 2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;\n      dst[ 3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;\n      dst[ 4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;\n      dst[ 5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;\n      dst[ 6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;\n      dst[ 7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;\n      dst[ 8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;\n      dst[ 9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;\n      dst[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;\n      dst[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;\n      dst[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;\n      dst[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;\n      dst[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;\n      dst[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;\n      return dst;\n    }\n  \n  \n    /**\n     * adds 2 vectors3s\n     * @param {Vector3} a a\n     * @param {Vector3} b b\n     * @param {Vector3} dst optional vector3 to store result\n     * @return {Vector3} dst or new Vector3 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function addVectors(a, b, dst) {\n      dst = dst || new MatType(3);\n      dst[0] = a[0] + b[0];\n      dst[1] = a[1] + b[1];\n      dst[2] = a[2] + b[2];\n      return dst;\n    }\n  \n    /**\n     * subtracts 2 vectors3s\n     * @param {Vector3} a a\n     * @param {Vector3} b b\n     * @param {Vector3} dst optional vector3 to store result\n     * @return {Vector3} dst or new Vector3 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function subtractVectors(a, b, dst) {\n      dst = dst || new MatType(3);\n      dst[0] = a[0] - b[0];\n      dst[1] = a[1] - b[1];\n      dst[2] = a[2] - b[2];\n      return dst;\n    }\n  \n    /**\n     * scale vectors3\n     * @param {Vector3} v vector\n     * @param {Number} s scale\n     * @param {Vector3} dst optional vector3 to store result\n     * @return {Vector3} dst or new Vector3 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function scaleVector(v, s, dst) {\n      dst = dst || new MatType(3);\n      dst[0] = v[0] * s;\n      dst[1] = v[1] * s;\n      dst[2] = v[2] * s;\n      return dst;\n    }  \n    /**\n     * normalizes a vector.\n     * @param {Vector3} v vector to normalize\n     * @param {Vector3} dst optional vector3 to store result\n     * @return {Vector3} dst or new Vector3 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function normalize(v, dst) {\n      dst = dst || new MatType(3);\n      var length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n      // make sure we don't divide by 0.\n      if (length > 0.00001) {\n        dst[0] = v[0] / length;\n        dst[1] = v[1] / length;\n        dst[2] = v[2] / length;\n      }\n      return dst;\n    }\n  \n    /**\n     * Computes the length of a vector\n     * @param {Vector3} v vector to take length of\n     * @return {number} length of vector\n     */\n    function length(v) {\n      return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n    }\n  \n    /**\n     * Computes the length squared of a vector\n     * @param {Vector3} v vector to take length of\n     * @return {number} length sqaured of vector\n     */\n    function lengthSq(v) {\n      return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n    }\n  \n    /**\n     * Computes the cross product of 2 vectors3s\n     * @param {Vector3} a a\n     * @param {Vector3} b b\n     * @param {Vector3} dst optional vector3 to store result\n     * @return {Vector3} dst or new Vector3 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function cross(a, b, dst) {\n      dst = dst || new MatType(3);\n      dst[0] = a[1] * b[2] - a[2] * b[1];\n      dst[1] = a[2] * b[0] - a[0] * b[2];\n      dst[2] = a[0] * b[1] - a[1] * b[0];\n      return dst;\n    }\n  \n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param {Vector3} a Operand vector.\n     * @param {Vector3} b Operand vector.\n     * @return {number} dot product\n     * @memberOf module:webgl-3d-math\n     */\n    function dot(a, b) {\n      return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n    }\n  \n    /**\n     * Computes the distance squared between 2 points\n     * @param {Vector3} a\n     * @param {Vector3} b\n     * @return {number} distance squared between a and b\n     */\n    function distanceSq(a, b) {\n      const dx = a[0] - b[0];\n      const dy = a[1] - b[1];\n      const dz = a[2] - b[2];\n      return dx * dx + dy * dy + dz * dz;\n    }\n  \n    /**\n     * Computes the distance between 2 points\n     * @param {Vector3} a\n     * @param {Vector3} b\n     * @return {number} distance between a and b\n     */\n    function distance(a, b) {\n      return Math.sqrt(distanceSq(a, b));\n    }\n  \n    /**\n     * Makes an identity matrix.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function identity(dst) {\n      dst = dst || new MatType(16);\n  \n      dst[ 0] = 1;\n      dst[ 1] = 0;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = 1;\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = 0;\n      dst[ 9] = 0;\n      dst[10] = 1;\n      dst[11] = 0;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = 0;\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Transposes a matrix.\n     * @param {Matrix4} m matrix to transpose.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function transpose(m, dst) {\n      dst = dst || new MatType(16);\n  \n      dst[ 0] = m[0];\n      dst[ 1] = m[4];\n      dst[ 2] = m[8];\n      dst[ 3] = m[12];\n      dst[ 4] = m[1];\n      dst[ 5] = m[5];\n      dst[ 6] = m[9];\n      dst[ 7] = m[13];\n      dst[ 8] = m[2];\n      dst[ 9] = m[6];\n      dst[10] = m[10];\n      dst[11] = m[14];\n      dst[12] = m[3];\n      dst[13] = m[7];\n      dst[14] = m[11];\n      dst[15] = m[15];\n  \n      return dst;\n    }\n  \n    /**\n     * Creates a lookAt matrix.\n     * This is a world matrix for a camera. In other words it will transform\n     * from the origin to a place and orientation in the world. For a view\n     * matrix take the inverse of this.\n     * @param {Vector3} cameraPosition position of the camera\n     * @param {Vector3} target position of the target\n     * @param {Vector3} up direction\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function lookAt(cameraPosition, target, up, dst) {\n      dst = dst || new MatType(16);\n      var zAxis = normalize(\n          subtractVectors(cameraPosition, target));\n      var xAxis = normalize(cross(up, zAxis));\n      var yAxis = normalize(cross(zAxis, xAxis));\n  \n      dst[ 0] = xAxis[0];\n      dst[ 1] = xAxis[1];\n      dst[ 2] = xAxis[2];\n      dst[ 3] = 0;\n      dst[ 4] = yAxis[0];\n      dst[ 5] = yAxis[1];\n      dst[ 6] = yAxis[2];\n      dst[ 7] = 0;\n      dst[ 8] = zAxis[0];\n      dst[ 9] = zAxis[1];\n      dst[10] = zAxis[2];\n      dst[11] = 0;\n      dst[12] = cameraPosition[0];\n      dst[13] = cameraPosition[1];\n      dst[14] = cameraPosition[2];\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from -1 to 1 in the z dimension.\n     * @param {number} fieldOfViewInRadians field of view in y axis.\n     * @param {number} aspect aspect of viewport (width / height)\n     * @param {number} near near Z clipping plane\n     * @param {number} far far Z clipping plane\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function perspective(fieldOfViewInRadians, aspect, near, far, dst) {\n      dst = dst || new MatType(16);\n      var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewInRadians);\n      var rangeInv = 1.0 / (near - far);\n  \n      dst[ 0] = f / aspect;\n      dst[ 1] = 0;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = f;\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = 0;\n      dst[ 9] = 0;\n      dst[10] = (near + far) * rangeInv;\n      dst[11] = -1;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = near * far * rangeInv * 2;\n      dst[15] = 0;\n  \n      return dst;\n    }\n  \n    /**\n     * Computes a 4-by-4 orthographic projection matrix given the coordinates of the\n     * planes defining the axis-aligned, box-shaped viewing volume.  The matrix\n     * generated sends that box to the unit box.  Note that although left and right\n     * are x coordinates and bottom and top are y coordinates, near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  We assume a unit box extending from -1 to 1 in the x and y\n     * dimensions and from -1 to 1 in the z dimension.\n     * @param {number} left The x coordinate of the left plane of the box.\n     * @param {number} right The x coordinate of the right plane of the box.\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\n     * @param {number} top The y coordinate of the right plane of the box.\n     * @param {number} near The negative z coordinate of the near plane of the box.\n     * @param {number} far The negative z coordinate of the far plane of the box.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function orthographic(left, right, bottom, top, near, far, dst) {\n      dst = dst || new MatType(16);\n  \n      dst[ 0] = 2 / (right - left);\n      dst[ 1] = 0;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = 2 / (top - bottom);\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = 0;\n      dst[ 9] = 0;\n      dst[10] = 2 / (near - far);\n      dst[11] = 0;\n      dst[12] = (left + right) / (left - right);\n      dst[13] = (bottom + top) / (bottom - top);\n      dst[14] = (near + far) / (near - far);\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from -1 to 1 in the z\n     * dimension.\n     * @param {number} left The x coordinate of the left plane of the box.\n     * @param {number} right The x coordinate of the right plane of the box.\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\n     * @param {number} top The y coordinate of the right plane of the box.\n     * @param {number} near The negative z coordinate of the near plane of the box.\n     * @param {number} far The negative z coordinate of the far plane of the box.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function frustum(left, right, bottom, top, near, far, dst) {\n      dst = dst || new MatType(16);\n  \n      var dx = right - left;\n      var dy = top - bottom;\n      var dz = far - near;\n  \n      dst[ 0] = 2 * near / dx;\n      dst[ 1] = 0;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = 2 * near / dy;\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = (left + right) / dx;\n      dst[ 9] = (top + bottom) / dy;\n      dst[10] = -(far + near) / dz;\n      dst[11] = -1;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = -2 * near * far / dz;\n      dst[15] = 0;\n  \n      return dst;\n    }\n  \n    /**\n     * Makes a translation matrix\n     * @param {number} tx x translation.\n     * @param {number} ty y translation.\n     * @param {number} tz z translation.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function translation(tx, ty, tz, dst) {\n      dst = dst || new MatType(16);\n  \n      dst[ 0] = 1;\n      dst[ 1] = 0;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = 1;\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = 0;\n      dst[ 9] = 0;\n      dst[10] = 1;\n      dst[11] = 0;\n      dst[12] = tx;\n      dst[13] = ty;\n      dst[14] = tz;\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Multiply by translation matrix.\n     * @param {Matrix4} m matrix to multiply\n     * @param {number} tx x translation.\n     * @param {number} ty y translation.\n     * @param {number} tz z translation.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function translate(m, tx, ty, tz, dst) {\n      // This is the optimized version of\n      // return multiply(m, translation(tx, ty, tz), dst);\n      dst = dst || new MatType(16);\n  \n      var m00 = m[0];\n      var m01 = m[1];\n      var m02 = m[2];\n      var m03 = m[3];\n      var m10 = m[1 * 4 + 0];\n      var m11 = m[1 * 4 + 1];\n      var m12 = m[1 * 4 + 2];\n      var m13 = m[1 * 4 + 3];\n      var m20 = m[2 * 4 + 0];\n      var m21 = m[2 * 4 + 1];\n      var m22 = m[2 * 4 + 2];\n      var m23 = m[2 * 4 + 3];\n      var m30 = m[3 * 4 + 0];\n      var m31 = m[3 * 4 + 1];\n      var m32 = m[3 * 4 + 2];\n      var m33 = m[3 * 4 + 3];\n  \n      if (m !== dst) {\n        dst[ 0] = m00;\n        dst[ 1] = m01;\n        dst[ 2] = m02;\n        dst[ 3] = m03;\n        dst[ 4] = m10;\n        dst[ 5] = m11;\n        dst[ 6] = m12;\n        dst[ 7] = m13;\n        dst[ 8] = m20;\n        dst[ 9] = m21;\n        dst[10] = m22;\n        dst[11] = m23;\n      }\n  \n      dst[12] = m00 * tx + m10 * ty + m20 * tz + m30;\n      dst[13] = m01 * tx + m11 * ty + m21 * tz + m31;\n      dst[14] = m02 * tx + m12 * ty + m22 * tz + m32;\n      dst[15] = m03 * tx + m13 * ty + m23 * tz + m33;\n  \n      return dst;\n    }\n  \n    /**\n     * Makes an x rotation matrix\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function xRotation(angleInRadians, dst) {\n      dst = dst || new MatType(16);\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n  \n      dst[ 0] = 1;\n      dst[ 1] = 0;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = c;\n      dst[ 6] = s;\n      dst[ 7] = 0;\n      dst[ 8] = 0;\n      dst[ 9] = -s;\n      dst[10] = c;\n      dst[11] = 0;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = 0;\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Multiply by an x rotation matrix\n     * @param {Matrix4} m matrix to multiply\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function xRotate(m, angleInRadians, dst) {\n      // this is the optimized version of\n      // return multiply(m, xRotation(angleInRadians), dst);\n      dst = dst || new MatType(16);\n  \n      var m10 = m[4];\n      var m11 = m[5];\n      var m12 = m[6];\n      var m13 = m[7];\n      var m20 = m[8];\n      var m21 = m[9];\n      var m22 = m[10];\n      var m23 = m[11];\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n  \n      dst[4]  = c * m10 + s * m20;\n      dst[5]  = c * m11 + s * m21;\n      dst[6]  = c * m12 + s * m22;\n      dst[7]  = c * m13 + s * m23;\n      dst[8]  = c * m20 - s * m10;\n      dst[9]  = c * m21 - s * m11;\n      dst[10] = c * m22 - s * m12;\n      dst[11] = c * m23 - s * m13;\n  \n      if (m !== dst) {\n        dst[ 0] = m[ 0];\n        dst[ 1] = m[ 1];\n        dst[ 2] = m[ 2];\n        dst[ 3] = m[ 3];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n      }\n  \n      return dst;\n    }\n  \n    /**\n     * Makes an y rotation matrix\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function yRotation(angleInRadians, dst) {\n      dst = dst || new MatType(16);\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n  \n      dst[ 0] = c;\n      dst[ 1] = 0;\n      dst[ 2] = -s;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = 1;\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = s;\n      dst[ 9] = 0;\n      dst[10] = c;\n      dst[11] = 0;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = 0;\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Multiply by an y rotation matrix\n     * @param {Matrix4} m matrix to multiply\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function yRotate(m, angleInRadians, dst) {\n      // this is the optimized version of\n      // return multiply(m, yRotation(angleInRadians), dst);\n      dst = dst || new MatType(16);\n  \n      var m00 = m[0 * 4 + 0];\n      var m01 = m[0 * 4 + 1];\n      var m02 = m[0 * 4 + 2];\n      var m03 = m[0 * 4 + 3];\n      var m20 = m[2 * 4 + 0];\n      var m21 = m[2 * 4 + 1];\n      var m22 = m[2 * 4 + 2];\n      var m23 = m[2 * 4 + 3];\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n  \n      dst[ 0] = c * m00 - s * m20;\n      dst[ 1] = c * m01 - s * m21;\n      dst[ 2] = c * m02 - s * m22;\n      dst[ 3] = c * m03 - s * m23;\n      dst[ 8] = c * m20 + s * m00;\n      dst[ 9] = c * m21 + s * m01;\n      dst[10] = c * m22 + s * m02;\n      dst[11] = c * m23 + s * m03;\n  \n      if (m !== dst) {\n        dst[ 4] = m[ 4];\n        dst[ 5] = m[ 5];\n        dst[ 6] = m[ 6];\n        dst[ 7] = m[ 7];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n      }\n  \n      return dst;\n    }\n  \n    /**\n     * Makes an z rotation matrix\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function zRotation(angleInRadians, dst) {\n      dst = dst || new MatType(16);\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n  \n      dst[ 0] = c;\n      dst[ 1] = s;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = -s;\n      dst[ 5] = c;\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = 0;\n      dst[ 9] = 0;\n      dst[10] = 1;\n      dst[11] = 0;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = 0;\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Multiply by an z rotation matrix\n     * @param {Matrix4} m matrix to multiply\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function zRotate(m, angleInRadians, dst) {\n      // This is the optimized version of\n      // return multiply(m, zRotation(angleInRadians), dst);\n      dst = dst || new MatType(16);\n  \n      var m00 = m[0 * 4 + 0];\n      var m01 = m[0 * 4 + 1];\n      var m02 = m[0 * 4 + 2];\n      var m03 = m[0 * 4 + 3];\n      var m10 = m[1 * 4 + 0];\n      var m11 = m[1 * 4 + 1];\n      var m12 = m[1 * 4 + 2];\n      var m13 = m[1 * 4 + 3];\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n  \n      dst[ 0] = c * m00 + s * m10;\n      dst[ 1] = c * m01 + s * m11;\n      dst[ 2] = c * m02 + s * m12;\n      dst[ 3] = c * m03 + s * m13;\n      dst[ 4] = c * m10 - s * m00;\n      dst[ 5] = c * m11 - s * m01;\n      dst[ 6] = c * m12 - s * m02;\n      dst[ 7] = c * m13 - s * m03;\n  \n      if (m !== dst) {\n        dst[ 8] = m[ 8];\n        dst[ 9] = m[ 9];\n        dst[10] = m[10];\n        dst[11] = m[11];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n      }\n  \n      return dst;\n    }\n  \n    /**\n     * Makes an rotation matrix around an arbitrary axis\n     * @param {Vector3} axis axis to rotate around\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function axisRotation(axis, angleInRadians, dst) {\n      dst = dst || new MatType(16);\n  \n      var x = axis[0];\n      var y = axis[1];\n      var z = axis[2];\n      var n = Math.sqrt(x * x + y * y + z * z);\n      x /= n;\n      y /= n;\n      z /= n;\n      var xx = x * x;\n      var yy = y * y;\n      var zz = z * z;\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n      var oneMinusCosine = 1 - c;\n  \n      dst[ 0] = xx + (1 - xx) * c;\n      dst[ 1] = x * y * oneMinusCosine + z * s;\n      dst[ 2] = x * z * oneMinusCosine - y * s;\n      dst[ 3] = 0;\n      dst[ 4] = x * y * oneMinusCosine - z * s;\n      dst[ 5] = yy + (1 - yy) * c;\n      dst[ 6] = y * z * oneMinusCosine + x * s;\n      dst[ 7] = 0;\n      dst[ 8] = x * z * oneMinusCosine + y * s;\n      dst[ 9] = y * z * oneMinusCosine - x * s;\n      dst[10] = zz + (1 - zz) * c;\n      dst[11] = 0;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = 0;\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Multiply by an axis rotation matrix\n     * @param {Matrix4} m matrix to multiply\n     * @param {Vector3} axis axis to rotate around\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function axisRotate(m, axis, angleInRadians, dst) {\n      // This is the optimized version of\n      // return multiply(m, axisRotation(axis, angleInRadians), dst);\n      dst = dst || new MatType(16);\n  \n      var x = axis[0];\n      var y = axis[1];\n      var z = axis[2];\n      var n = Math.sqrt(x * x + y * y + z * z);\n      x /= n;\n      y /= n;\n      z /= n;\n      var xx = x * x;\n      var yy = y * y;\n      var zz = z * z;\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n      var oneMinusCosine = 1 - c;\n  \n      var r00 = xx + (1 - xx) * c;\n      var r01 = x * y * oneMinusCosine + z * s;\n      var r02 = x * z * oneMinusCosine - y * s;\n      var r10 = x * y * oneMinusCosine - z * s;\n      var r11 = yy + (1 - yy) * c;\n      var r12 = y * z * oneMinusCosine + x * s;\n      var r20 = x * z * oneMinusCosine + y * s;\n      var r21 = y * z * oneMinusCosine - x * s;\n      var r22 = zz + (1 - zz) * c;\n  \n      var m00 = m[0];\n      var m01 = m[1];\n      var m02 = m[2];\n      var m03 = m[3];\n      var m10 = m[4];\n      var m11 = m[5];\n      var m12 = m[6];\n      var m13 = m[7];\n      var m20 = m[8];\n      var m21 = m[9];\n      var m22 = m[10];\n      var m23 = m[11];\n  \n      dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n      dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n      dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n      dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n      dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n      dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n      dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n      dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n      dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n      dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n      dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n      dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n  \n      if (m !== dst) {\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n      }\n  \n      return dst;\n    }\n  \n    /**\n     * Makes a scale matrix\n     * @param {number} sx x scale.\n     * @param {number} sy y scale.\n     * @param {number} sz z scale.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function scaling(sx, sy, sz, dst) {\n      dst = dst || new MatType(16);\n  \n      dst[ 0] = sx;\n      dst[ 1] = 0;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = sy;\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = 0;\n      dst[ 9] = 0;\n      dst[10] = sz;\n      dst[11] = 0;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = 0;\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Multiply by a scaling matrix\n     * @param {Matrix4} m matrix to multiply\n     * @param {number} sx x scale.\n     * @param {number} sy y scale.\n     * @param {number} sz z scale.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function scale(m, sx, sy, sz, dst) {\n      // This is the optimized version of\n      // return multiply(m, scaling(sx, sy, sz), dst);\n      dst = dst || new MatType(16);\n  \n      dst[ 0] = sx * m[0 * 4 + 0];\n      dst[ 1] = sx * m[0 * 4 + 1];\n      dst[ 2] = sx * m[0 * 4 + 2];\n      dst[ 3] = sx * m[0 * 4 + 3];\n      dst[ 4] = sy * m[1 * 4 + 0];\n      dst[ 5] = sy * m[1 * 4 + 1];\n      dst[ 6] = sy * m[1 * 4 + 2];\n      dst[ 7] = sy * m[1 * 4 + 3];\n      dst[ 8] = sz * m[2 * 4 + 0];\n      dst[ 9] = sz * m[2 * 4 + 1];\n      dst[10] = sz * m[2 * 4 + 2];\n      dst[11] = sz * m[2 * 4 + 3];\n  \n      if (m !== dst) {\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n      }\n  \n      return dst;\n    }\n  \n    /**\n     * creates a matrix from translation, quaternion, scale\n     * @param {Number[]} translation [x, y, z] translation\n     * @param {Number[]} quaternion [x, y, z, z] quaternion rotation\n     * @param {Number[]} scale [x, y, z] scale\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     */\n    function compose(translation, quaternion, scale, dst) {\n      dst = dst || new MatType(16);\n  \n      const x = quaternion[0];\n      const y = quaternion[1];\n      const z = quaternion[2];\n      const w = quaternion[3];\n  \n      const x2 = x + x;\n      const y2 = y + y;\n      const z2 = z + z;\n  \n      const xx = x * x2;\n      const xy = x * y2;\n      const xz = x * z2;\n  \n      const yy = y * y2;\n      const yz = y * z2;\n      const zz = z * z2;\n  \n      const wx = w * x2;\n      const wy = w * y2;\n      const wz = w * z2;\n  \n      const sx = scale[0];\n      const sy = scale[1];\n      const sz = scale[2];\n  \n      dst[0] = (1 - (yy + zz)) * sx;\n      dst[1] = (xy + wz) * sx;\n      dst[2] = (xz - wy) * sx;\n      dst[3] = 0;\n  \n      dst[4] = (xy - wz) * sy;\n      dst[5] = (1 - (xx + zz)) * sy;\n      dst[6] = (yz + wx) * sy;\n      dst[7] = 0;\n  \n      dst[ 8] = (xz + wy) * sz;\n      dst[ 9] = (yz - wx) * sz;\n      dst[10] = (1 - (xx + yy)) * sz;\n      dst[11] = 0;\n  \n      dst[12] = translation[0];\n      dst[13] = translation[1];\n      dst[14] = translation[2];\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    function quatFromRotationMatrix(m, dst) {\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  \n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n      const m11 = m[0];\n      const m12 = m[4];\n      const m13 = m[8];\n      const m21 = m[1];\n      const m22 = m[5];\n      const m23 = m[9];\n      const m31 = m[2];\n      const m32 = m[6];\n      const m33 = m[10];\n  \n      const trace = m11 + m22 + m33;\n  \n      if (trace > 0) {\n        const s = 0.5 / Math.sqrt(trace + 1);\n        dst[3] = 0.25 / s;\n        dst[0] = (m32 - m23) * s;\n        dst[1] = (m13 - m31) * s;\n        dst[2] = (m21 - m12) * s;\n      } else if (m11 > m22 && m11 > m33) {\n        const s = 2 * Math.sqrt(1 + m11 - m22 - m33);\n        dst[3] = (m32 - m23) / s;\n        dst[0] = 0.25 * s;\n        dst[1] = (m12 + m21) / s;\n        dst[2] = (m13 + m31) / s;\n      } else if (m22 > m33) {\n        const s = 2 * Math.sqrt(1 + m22 - m11 - m33);\n        dst[3] = (m13 - m31) / s;\n        dst[0] = (m12 + m21) / s;\n        dst[1] = 0.25 * s;\n        dst[2] = (m23 + m32) / s;\n      } else {\n        const s = 2 * Math.sqrt(1 + m33 - m11 - m22);\n        dst[3] = (m21 - m12) / s;\n        dst[0] = (m13 + m31) / s;\n        dst[1] = (m23 + m32) / s;\n        dst[2] = 0.25 * s;\n      }\n    }\n  \n    function decompose(mat, translation, quaternion, scale) {\n      let sx = m4.length(mat.slice(0, 3));\n      const sy = m4.length(mat.slice(4, 7));\n      const sz = m4.length(mat.slice(8, 11));\n  \n      // if determinate is negative, we need to invert one scale\n      const det = determinate(mat);\n      if (det < 0) {\n        sx = -sx;\n      }\n  \n      translation[0] = mat[12];\n      translation[1] = mat[13];\n      translation[2] = mat[14];\n  \n      // scale the rotation part\n      const matrix = m4.copy(mat);\n  \n      const invSX = 1 / sx;\n      const invSY = 1 / sy;\n      const invSZ = 1 / sz;\n  \n      matrix[0] *= invSX;\n      matrix[1] *= invSX;\n      matrix[2] *= invSX;\n  \n      matrix[4] *= invSY;\n      matrix[5] *= invSY;\n      matrix[6] *= invSY;\n  \n      matrix[8] *= invSZ;\n      matrix[9] *= invSZ;\n      matrix[10] *= invSZ;\n  \n      quatFromRotationMatrix(matrix, quaternion);\n  \n      scale[0] = sx;\n      scale[1] = sy;\n      scale[2] = sz;\n    }\n  \n    function determinate(m) {\n      var m00 = m[0 * 4 + 0];\n      var m01 = m[0 * 4 + 1];\n      var m02 = m[0 * 4 + 2];\n      var m03 = m[0 * 4 + 3];\n      var m10 = m[1 * 4 + 0];\n      var m11 = m[1 * 4 + 1];\n      var m12 = m[1 * 4 + 2];\n      var m13 = m[1 * 4 + 3];\n      var m20 = m[2 * 4 + 0];\n      var m21 = m[2 * 4 + 1];\n      var m22 = m[2 * 4 + 2];\n      var m23 = m[2 * 4 + 3];\n      var m30 = m[3 * 4 + 0];\n      var m31 = m[3 * 4 + 1];\n      var m32 = m[3 * 4 + 2];\n      var m33 = m[3 * 4 + 3];\n      var tmp_0  = m22 * m33;\n      var tmp_1  = m32 * m23;\n      var tmp_2  = m12 * m33;\n      var tmp_3  = m32 * m13;\n      var tmp_4  = m12 * m23;\n      var tmp_5  = m22 * m13;\n      var tmp_6  = m02 * m33;\n      var tmp_7  = m32 * m03;\n      var tmp_8  = m02 * m23;\n      var tmp_9  = m22 * m03;\n      var tmp_10 = m02 * m13;\n      var tmp_11 = m12 * m03;\n  \n      var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n          (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n      var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n          (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n      var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n          (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n      var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n          (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n  \n      return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n    }\n  \n    /**\n     * Computes the inverse of a matrix.\n     * @param {Matrix4} m matrix to compute inverse of\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function inverse(m, dst) {\n      dst = dst || new MatType(16);\n      var m00 = m[0 * 4 + 0];\n      var m01 = m[0 * 4 + 1];\n      var m02 = m[0 * 4 + 2];\n      var m03 = m[0 * 4 + 3];\n      var m10 = m[1 * 4 + 0];\n      var m11 = m[1 * 4 + 1];\n      var m12 = m[1 * 4 + 2];\n      var m13 = m[1 * 4 + 3];\n      var m20 = m[2 * 4 + 0];\n      var m21 = m[2 * 4 + 1];\n      var m22 = m[2 * 4 + 2];\n      var m23 = m[2 * 4 + 3];\n      var m30 = m[3 * 4 + 0];\n      var m31 = m[3 * 4 + 1];\n      var m32 = m[3 * 4 + 2];\n      var m33 = m[3 * 4 + 3];\n      var tmp_0  = m22 * m33;\n      var tmp_1  = m32 * m23;\n      var tmp_2  = m12 * m33;\n      var tmp_3  = m32 * m13;\n      var tmp_4  = m12 * m23;\n      var tmp_5  = m22 * m13;\n      var tmp_6  = m02 * m33;\n      var tmp_7  = m32 * m03;\n      var tmp_8  = m02 * m23;\n      var tmp_9  = m22 * m03;\n      var tmp_10 = m02 * m13;\n      var tmp_11 = m12 * m03;\n      var tmp_12 = m20 * m31;\n      var tmp_13 = m30 * m21;\n      var tmp_14 = m10 * m31;\n      var tmp_15 = m30 * m11;\n      var tmp_16 = m10 * m21;\n      var tmp_17 = m20 * m11;\n      var tmp_18 = m00 * m31;\n      var tmp_19 = m30 * m01;\n      var tmp_20 = m00 * m21;\n      var tmp_21 = m20 * m01;\n      var tmp_22 = m00 * m11;\n      var tmp_23 = m10 * m01;\n  \n      var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n          (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n      var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n          (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n      var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n          (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n      var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n          (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n  \n      var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n  \n      dst[0] = d * t0;\n      dst[1] = d * t1;\n      dst[2] = d * t2;\n      dst[3] = d * t3;\n      dst[4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\n            (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n      dst[5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\n            (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n      dst[6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\n            (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n      dst[7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\n            (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n      dst[8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\n            (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n      dst[9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\n            (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n      dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\n            (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n      dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\n            (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n      dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\n            (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n      dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\n            (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n      dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\n            (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n      dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\n            (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n  \n      return dst;\n    }\n  \n    /**\n     * Takes a  matrix and a vector with 4 entries, transforms that vector by\n     * the matrix, and returns the result as a vector with 4 entries.\n     * @param {Matrix4} m The matrix.\n     * @param {Vector4} v The point in homogenous coordinates.\n     * @param {Vector4} dst optional vector4 to store result\n     * @return {Vector4} dst or new Vector4 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function transformVector(m, v, dst) {\n      dst = dst || new MatType(4);\n      for (var i = 0; i < 4; ++i) {\n        dst[i] = 0.0;\n        for (var j = 0; j < 4; ++j) {\n          dst[i] += v[j] * m[j * 4 + i];\n        }\n      }\n      return dst;\n    }\n  \n    /**\n     * Takes a 4-by-4 matrix and a vector with 3 entries,\n     * interprets the vector as a point, transforms that point by the matrix, and\n     * returns the result as a vector with 3 entries.\n     * @param {Matrix4} m The matrix.\n     * @param {Vector3} v The point.\n     * @param {Vector4} dst optional vector4 to store result\n     * @return {Vector4} dst or new Vector4 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function transformPoint(m, v, dst) {\n      dst = dst || new MatType(3);\n      var v0 = v[0];\n      var v1 = v[1];\n      var v2 = v[2];\n      var d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n  \n      dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n      dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n      dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n  \n      return dst;\n    }\n  \n    /**\n     * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n     * direction, transforms that direction by the matrix, and returns the result;\n     * assumes the transformation of 3-dimensional space represented by the matrix\n     * is parallel-preserving, i.e. any combination of rotation, scaling and\n     * translation, but not a perspective distortion. Returns a vector with 3\n     * entries.\n     * @param {Matrix4} m The matrix.\n     * @param {Vector3} v The direction.\n     * @param {Vector4} dst optional vector4 to store result\n     * @return {Vector4} dst or new Vector4 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function transformDirection(m, v, dst) {\n      dst = dst || new MatType(3);\n  \n      var v0 = v[0];\n      var v1 = v[1];\n      var v2 = v[2];\n  \n      dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n      dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n      dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n  \n      return dst;\n    }\n  \n    /**\n     * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n     * as a normal to a surface, and computes a vector which is normal upon\n     * transforming that surface by the matrix. The effect of this function is the\n     * same as transforming v (as a direction) by the inverse-transpose of m.  This\n     * function assumes the transformation of 3-dimensional space represented by the\n     * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n     * translation, but not a perspective distortion.  Returns a vector with 3\n     * entries.\n     * @param {Matrix4} m The matrix.\n     * @param {Vector3} v The normal.\n     * @param {Vector3} [dst] The direction.\n     * @return {Vector3} The transformed direction.\n     * @memberOf module:webgl-3d-math\n     */\n    function transformNormal(m, v, dst) {\n      dst = dst || new MatType(3);\n      var mi = inverse(m);\n      var v0 = v[0];\n      var v1 = v[1];\n      var v2 = v[2];\n  \n      dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n      dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n      dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n  \n      return dst;\n    }\n  \n    function copy(src, dst) {\n      dst = dst || new MatType(16);\n  \n      dst[ 0] = src[ 0];\n      dst[ 1] = src[ 1];\n      dst[ 2] = src[ 2];\n      dst[ 3] = src[ 3];\n      dst[ 4] = src[ 4];\n      dst[ 5] = src[ 5];\n      dst[ 6] = src[ 6];\n      dst[ 7] = src[ 7];\n      dst[ 8] = src[ 8];\n      dst[ 9] = src[ 9];\n      dst[10] = src[10];\n      dst[11] = src[11];\n      dst[12] = src[12];\n      dst[13] = src[13];\n      dst[14] = src[14];\n      dst[15] = src[15];\n  \n      return dst;\n    }\n  \n    export const m4 = {\n      copy: copy,\n      lookAt: lookAt,\n      addVectors: addVectors,\n      subtractVectors: subtractVectors,\n      scaleVector: scaleVector,\n      distance: distance,\n      distanceSq: distanceSq,\n      normalize: normalize,\n      compose: compose,\n      cross: cross,\n      decompose: decompose,\n      dot: dot,\n      identity: identity,\n      transpose: transpose,\n      length: length,\n      lengthSq: lengthSq,\n      orthographic: orthographic,\n      frustum: frustum,\n      perspective: perspective,\n      translation: translation,\n      translate: translate,\n      xRotation: xRotation,\n      yRotation: yRotation,\n      zRotation: zRotation,\n      xRotate: xRotate,\n      yRotate: yRotate,\n      zRotate: zRotate,\n      axisRotation: axisRotation,\n      axisRotate: axisRotate,\n      scaling: scaling,\n      scale: scale,\n      multiply: multiply,\n      inverse: inverse,\n      transformVector: transformVector,\n      transformPoint: transformPoint,\n      transformDirection: transformDirection,\n      transformNormal: transformNormal,\n      setDefaultType: setDefaultType,\n    };"],"names":["m4","MatType","Float32Array","subtractVectors","a","b","dst","normalize","v","length1","Math","sqrt","cross","distanceSq","dx","dy","dz","inverse","m","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t1","t2","t3","d","copy","src","lookAt","cameraPosition","target","up","zAxis","xAxis","yAxis","addVectors","scaleVector","s","distance","compose","translation1","quaternion","scale1","x","y","z","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","sx","sy","sz","decompose","mat","translation2","scale2","length","slice","matrix","invSX","invSY","invSZ","trace","s1","s2","s3","quatFromRotationMatrix","dot","identity","transpose","lengthSq","orthographic","left","right","bottom","top","near","far","frustum","perspective","fieldOfViewInRadians","aspect","f","tan","PI","rangeInv","translation","tx","ty","tz","translate","xRotation","angleInRadians","c","cos","sin","yRotation","zRotation","xRotate","yRotate","zRotate","axisRotation","axis","n","oneMinusCosine","axisRotate","r00","r01","r02","r10","r11","r12","r20","r21","r22","scaling","scale","multiply","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","transformVector","i","j","transformPoint","v0","v1","v2","transformDirection","transformNormal","mi","setDefaultType","Ctor","OldType"],"version":3,"file":"index.3eb9ea76.js.map"}