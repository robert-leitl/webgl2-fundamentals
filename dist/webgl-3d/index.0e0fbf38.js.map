{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-bb0a458b6dbaa7e4.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","src/webgl-3d/app.js","src/webgl-3d/webgl-3d.js","src/webgl-3d/shader/fragment.glsl","src/webgl-3d/shader/vertex.glsl","node_modules/@parcel/runtime-js/lib/runtime-97ac6cbfa8f0977f.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"83Npk\\\":\\\"index.0e0fbf38.js\\\",\\\"cJfsF\\\":\\\"f-texture.2ff25e20.png\\\",\\\"9LU3i\\\":\\\"index.ba31ca7d.js\\\",\\\"eRuGw\\\":\\\"index.3eb9ea76.js\\\"}\"));","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","import { WebGL3d } from './webgl-3d';\nimport { Pane } from 'tweakpane';\n\nlet DEBUG = false;\n\nif (process.env.NODE_ENV !== 'production') {\n    // Only runs in development and will be stripped in production builds.\n    DEBUG = true;\n}\n\nlet sketch;\nlet resizeTimeoutId;\n\nwindow.addEventListener('load', () => {\n    const canvas = document.body.querySelector('#c');\n\n    let pane;\n    if (DEBUG) {\n        pane = new Pane({ title: 'Settings' });\n    }\n\n    sketch = new WebGL3d(canvas, pane, (sketch) => {\n        sketch.run(); \n    });\n});\n\nwindow.addEventListener('resize', () => {\n    if (sketch) {\n        if (resizeTimeoutId)\n            clearTimeout(resizeTimeoutId);\n\n        resizeTimeoutId = setTimeout(() => {\n            resizeTimeoutId = null;\n            sketch.resize();\n        }, 300);\n    }\n});\n\n\n","\nimport { m4 } from '../math/m4';\nimport fragmentShaderSource from './shader/fragment.glsl';\nimport vertexShaderSource from './shader/vertex.glsl';\n\nexport class WebGL3d {\n    oninit;\n\n    #time = 0;\n    #isDestroyed = false;\n\n    constructor(canvas, pane, oninit = null) {\n        this.canvas = canvas;\n        this.pane = pane;\n        this.oninit = oninit;\n\n        this.image = new Image();\n        this.image.src = new URL('../assets/f-texture.png', import.meta.url);\n        this.image.onload = () => {\n            this.#updateTexture();\n        }\n\n        this.#init();\n    }\n\n    resize() {\n        this.#resizeCanvasToDisplaySize(this.gl.canvas);\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        \n        // set the projection matrix\n        this.#updateProjectionMatrix();\n\n        // set the view projection matrix\n        this.viewProjectionMatrix = m4.multiply(this.projectionMatrix, this.viewMatrix);\n    }\n\n    run() {\n        this.lastFrameTime = performance.now();\n        this.#animate(this.lastFrameTime);\n    }\n\n    #animate(time) {\n        const delta = time - this.lastFrameTime;\n        this.lastFrameTime = time;\n\n        if (this.#isDestroyed) return;\n\n        this.#render();\n\n        // update uniforms\n        this.gl.uniform1f(this.timeUniformLocation, this.#time);\n\n        this.#time += 0.01;\n\n        // animation models\n        this.rotation[1] += (delta / 5000) * Math.PI * 2;\n\n        this.#updateModelMatrix();\n\n        requestAnimationFrame(t => this.#animate(t));\n    }\n\n    #render() {\n        // Draw\n        this.gl.clearColor(0, 0, 0, 1);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        this.gl.useProgram(this.program);\n        this.gl.bindVertexArray(this.vertexArrayObject);\n\n        // Set the matrix uniform\n        let matrix = m4.multiply(this.viewProjectionMatrix, this.modelMatrix);\n        this.gl.uniformMatrix4fv(this.matrixUniformLocation, false, matrix);\n        \n        // Draw the geometry.\n        const primitiveType = this.gl.TRIANGLES;\n        const offset = 0;\n        const count = 16 * 6;\n        this.gl.drawArrays(primitiveType, offset, count);\n\n        /*const radius = 200;\n        for (var ii = 0; ii < 6; ++ii) {\n            var angle = ii * Math.PI * 2 / 6;\n            \n            var x = Math.cos(angle) * radius;\n            var z = Math.sin(angle) * radius;\n            // add in the translation for this F\n            var matrix = m4.translate(this.viewProjectionMatrix, x, 0, z);\n            matrix = m4.multiply(matrix, this.modelMatrix);\n            \n            // Set the matrix.\n            this.gl.uniformMatrix4fv(this.matrixUniformLocation, false, matrix);\n            \n            // Draw the geometry.\n            var primitiveType = this.gl.TRIANGLES;\n            var offset = 0;\n            var count = 16 * 6;\n            this.gl.drawArrays(primitiveType, offset, count);\n        }*/\n    }\n\n    destroy() {\n        this.#isDestroyed = true;\n    }\n\n    #init() {\n        this.gl = this.canvas.getContext('webgl2');\n        if (!this.gl) {\n            throw new Error('No WebGL 2 context!')\n        }\n\n        this.vertexShader = this.#createShader(this.gl, this.gl.VERTEX_SHADER, vertexShaderSource);\n        this.fragmentShader = this.#createShader(this.gl, this.gl.FRAGMENT_SHADER, fragmentShaderSource);\n        this.program = this.#createProgram(this.gl, this.vertexShader, this.fragmentShader);\n\n        // Attribute locations\n        const positionAttributeLocation = this.gl.getAttribLocation(this.program, 'a_position');\n        const colorAttributeLocation = this.gl.getAttribLocation(this.program, 'a_color');\n        const uvAttributeLocation = this.gl.getAttribLocation(this.program, 'a_uv');\n\n        // Uniform locations\n        this.timeUniformLocation = this.gl.getUniformLocation(this.program, 'u_time');\n        this.matrixUniformLocation = this.gl.getUniformLocation(this.program, 'u_matrix');\n        this.imageUniformLocation = this.gl.getUniformLocation(this.program, 'u_image');\n\n        // Create the vertex array object and set is as the active one\n        this.vertexArrayObject = this.gl.createVertexArray();\n        this.gl.bindVertexArray(this.vertexArrayObject);\n\n\n        //////////////////// POSITION BUFFER\n        // create the buffer for the position buffer\n        const positionBuffer = this.gl.createBuffer();\n\n        // Turn on the position attribute\n        this.gl.enableVertexAttribArray(positionAttributeLocation);\n\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, positionBuffer);\n\n        // fill the position buffer via the ARRAY_BUFFER \"pointer\"\n        this.#setGeometry(this.gl);\n\n        // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\n        this.gl.vertexAttribPointer(positionAttributeLocation, 3, this.gl.FLOAT, false, 0, 0);\n\n\n        //////////////////// COLOR BUFFER\n        const colorBuffer = this.gl.createBuffer();\n        this.gl.enableVertexAttribArray(colorAttributeLocation);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, colorBuffer);\n        this.#setColor(this.gl);\n        this.gl.vertexAttribPointer(colorAttributeLocation, 3, this.gl.FLOAT, false, 0, 0);\n\n\n        //////////////////// UV BUFFER\n        const uvBuffer = this.gl.createBuffer();\n        this.gl.enableVertexAttribArray(uvAttributeLocation);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, uvBuffer);\n        this.#setUVs(this.gl);\n        this.gl.vertexAttribPointer(uvAttributeLocation, 2, this.gl.FLOAT, false, 0, 0);\n\n\n        // Init the image texture\n        this.imageTexture = this.#createAndSetupTexture(this.gl);\n        // Fill the texture with a 1x1 white pixel.\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, new Uint8Array([255, 255, 255, 255]));\n\n\n        // enable backface culling\n        this.gl.enable(this.gl.CULL_FACE);\n        // enable the z-depth tests to discard pixels occluded by other pixels\n        this.gl.enable(this.gl.DEPTH_TEST);\n\n\n        // init the transformation properties\n        this.origin = [0, 0, 0];\n        this.translation = [0, 0, 0];\n        this.scale = [1, 1, 1];\n        this.rotation = [0, 0, 0];\n        this.#updateModelMatrix();\n\n        // init projection\n        this.#updateProjectionMatrix();\n\n        // init camera\n        this.cameraRotationY = 0;\n        this.#updateCameraMatrix();\n\n        this.resize();\n\n        this.#initTweakpane();\n\n        if (this.oninit) this.oninit(this);\n    }\n\n    #updateTexture() {\n        // replace the placeholder texture\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.imageTexture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.image);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n    }\n\n    #createAndSetupTexture(gl) {\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        return texture;\n    }\n\n    #updateProjectionMatrix() {\n        const aspect = this.gl.canvas.clientWidth / this.gl.canvas.clientHeight;\n        const zNear = 1;\n        const zFar = 2000;\n        const fov = 75 * (Math.PI / 180);\n        this.projectionMatrix = m4.perspective(fov, aspect, zNear, zFar);\n    }\n\n    #updateCameraMatrix() {\n        // init the camera matrix\n        this.cameraMatrix = m4.yRotation(this.cameraRotationY);\n        this.cameraMatrix = m4.translate(this.cameraMatrix, 0, 0, 400);\n\n        // init the view matrix\n        this.viewMatrix = m4.inverse(this.cameraMatrix);\n\n        // update the view projection matrix\n        this.viewProjectionMatrix = m4.multiply(this.projectionMatrix, this.viewMatrix);\n    }\n\n    #updateModelMatrix() {\n        this.modelMatrix = m4.translation(this.translation[0], this.translation[1], this.translation[2]);\n        this.modelMatrix = m4.xRotate(this.modelMatrix, this.rotation[0]);\n        this.modelMatrix = m4.yRotate(this.modelMatrix, this.rotation[1]);\n        this.modelMatrix = m4.zRotate(this.modelMatrix, this.rotation[2]);\n        this.modelMatrix = m4.scale(this.modelMatrix, this.scale[0], this.scale[1], this.scale[2]);\n        this.modelMatrix = m4.translate(this.modelMatrix, -this.origin[0], -this.origin[1], -this.origin[2]);\n    }\n\n    #setColor(gl) {\n        const colorBuffer = new Float32Array(16 * 6 * 3);\n        const i = 0;\n        for(let f=0; f<16; f++) {\n            const faceColor = [\n                Math.random() * 0.5, \n                Math.random() * 0, \n                Math.random() * 0.5 + 0.5\n            ];\n            \n            for(let vi=0; vi<6; vi++) {\n                colorBuffer.set([...faceColor], i * 3);\n                i++;\n            }\n        }\n\n        gl.bufferData(gl.ARRAY_BUFFER, colorBuffer, gl.STATIC_DRAW);\n    }\n\n    // Fill the current ARRAY_BUFFER buffer\n    // with the values that define a letter 'F'.\n    #setGeometry(gl) {\n\n        const positions = new Float32Array([\n            // left column front\n            0,   0,  0,\n            0, 150,  0,\n            30,   0,  0,\n            0, 150,  0,\n            30, 150,  0,\n            30,   0,  0,\n\n            // top rung front\n            30,   0,  0,\n            30,  30,  0,\n            100,   0,  0,\n            30,  30,  0,\n            100,  30,  0,\n            100,   0,  0,\n\n            // middle rung front\n            30,  60,  0,\n            30,  90,  0,\n            67,  60,  0,\n            30,  90,  0,\n            67,  90,  0,\n            67,  60,  0,\n\n            // left column back\n                0,   0,  30,\n            30,   0,  30,\n                0, 150,  30,\n                0, 150,  30,\n            30,   0,  30,\n            30, 150,  30,\n\n            // top rung back\n            30,   0,  30,\n            100,   0,  30,\n            30,  30,  30,\n            30,  30,  30,\n            100,   0,  30,\n            100,  30,  30,\n\n            // middle rung back\n            30,  60,  30,\n            67,  60,  30,\n            30,  90,  30,\n            30,  90,  30,\n            67,  60,  30,\n            67,  90,  30,\n\n            // top\n                0,   0,   0,\n            100,   0,   0,\n            100,   0,  30,\n                0,   0,   0,\n            100,   0,  30,\n                0,   0,  30,\n\n            // top rung right\n            100,   0,   0,\n            100,  30,   0,\n            100,  30,  30,\n            100,   0,   0,\n            100,  30,  30,\n            100,   0,  30,\n\n            // under top rung\n            30,   30,   0,\n            30,   30,  30,\n            100,  30,  30,\n            30,   30,   0,\n            100,  30,  30,\n            100,  30,   0,\n\n            // between top rung and middle\n            30,   30,   0,\n            30,   60,  30,\n            30,   30,  30,\n            30,   30,   0,\n            30,   60,   0,\n            30,   60,  30,\n\n            // top of middle rung\n            30,   60,   0,\n            67,   60,  30,\n            30,   60,  30,\n            30,   60,   0,\n            67,   60,   0,\n            67,   60,  30,\n\n            // right of middle rung\n            67,   60,   0,\n            67,   90,  30,\n            67,   60,  30,\n            67,   60,   0,\n            67,   90,   0,\n            67,   90,  30,\n\n            // bottom of middle rung.\n            30,   90,   0,\n            30,   90,  30,\n            67,   90,  30,\n            30,   90,   0,\n            67,   90,  30,\n            67,   90,   0,\n\n            // right of bottom\n            30,   90,   0,\n            30,  150,  30,\n            30,   90,  30,\n            30,   90,   0,\n            30,  150,   0,\n            30,  150,  30,\n\n            // bottom\n            0,   150,   0,\n            0,   150,  30,\n            30,  150,  30,\n            0,   150,   0,\n            30,  150,  30,\n            30,  150,   0,\n\n            // left side\n            0,   0,   0,\n            0,   0,  30,\n            0, 150,  30,\n            0,   0,   0,\n            0, 150,  30,\n            0, 150,   0]);\n\n        const matrix = m4.translate(m4.xRotation(Math.PI), -50, -75, -15);\n\n        for (var ii = 0; ii < positions.length; ii += 3) {\n            var vector = m4.transformPoint(matrix, [positions[ii + 0], positions[ii + 1], positions[ii + 2], 1]);\n            positions[ii + 0] = vector[0];\n            positions[ii + 1] = vector[1];\n            positions[ii + 2] = vector[2];\n        }\n\n        gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);\n    }\n\n    #setUVs(gl) {\n        gl.bufferData(\n            gl.ARRAY_BUFFER,\n            new Float32Array([\n              // left column front\n         38 / 255,  44 / 255,\n         38 / 255, 223 / 255,\n        113 / 255,  44 / 255,\n         38 / 255, 223 / 255,\n        113 / 255, 223 / 255,\n        113 / 255,  44 / 255,\n\n        // top rung front\n        113 / 255, 44 / 255,\n        113 / 255, 85 / 255,\n        218 / 255, 44 / 255,\n        113 / 255, 85 / 255,\n        218 / 255, 85 / 255,\n        218 / 255, 44 / 255,\n\n        // middle rung front\n        113 / 255, 112 / 255,\n        113 / 255, 151 / 255,\n        203 / 255, 112 / 255,\n        113 / 255, 151 / 255,\n        203 / 255, 151 / 255,\n        203 / 255, 112 / 255,\n\n        // left column back\n         38 / 255,  44 / 255,\n        113 / 255,  44 / 255,\n         38 / 255, 223 / 255,\n         38 / 255, 223 / 255,\n        113 / 255,  44 / 255,\n        113 / 255, 223 / 255,\n\n        // top rung back\n        113 / 255, 44 / 255,\n        218 / 255, 44 / 255,\n        113 / 255, 85 / 255,\n        113 / 255, 85 / 255,\n        218 / 255, 44 / 255,\n        218 / 255, 85 / 255,\n\n        // middle rung back\n        113 / 255, 112 / 255,\n        203 / 255, 112 / 255,\n        113 / 255, 151 / 255,\n        113 / 255, 151 / 255,\n        203 / 255, 112 / 255,\n        203 / 255, 151 / 255,\n\n        // top\n        0, 0,\n        1, 0,\n        1, 1,\n        0, 0,\n        1, 1,\n        0, 1,\n\n        // top rung right\n        0, 0,\n        1, 0,\n        1, 1,\n        0, 0,\n        1, 1,\n        0, 1,\n\n        // under top rung\n        0, 0,\n        0, 1,\n        1, 1,\n        0, 0,\n        1, 1,\n        1, 0,\n\n        // between top rung and middle\n        0, 0,\n        1, 1,\n        0, 1,\n        0, 0,\n        1, 0,\n        1, 1,\n\n        // top of middle rung\n        0, 0,\n        1, 1,\n        0, 1,\n        0, 0,\n        1, 0,\n        1, 1,\n\n        // right of middle rung\n        0, 0,\n        1, 1,\n        0, 1,\n        0, 0,\n        1, 0,\n        1, 1,\n\n        // bottom of middle rung.\n        0, 0,\n        0, 1,\n        1, 1,\n        0, 0,\n        1, 1,\n        1, 0,\n\n        // right of bottom\n        0, 0,\n        1, 1,\n        0, 1,\n        0, 0,\n        1, 0,\n        1, 1,\n\n        // bottom\n        0, 0,\n        0, 1,\n        1, 1,\n        0, 0,\n        1, 1,\n        1, 0,\n\n        // left side\n        0, 0,\n        0, 1,\n        1, 1,\n        0, 0,\n        1, 1,\n        1, 0,\n            ]),\n            gl.STATIC_DRAW);\n    }\n\n    #createShader(gl, type, source) {\n        const shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n        if (success) {\n            return shader;\n        }\n\n        console.error(gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n    }\n\n    #createProgram(gl, vertexShader, fragmentShader) {\n        const program = gl.createProgram();\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.linkProgram(program);\n        const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n        if (success) {\n            return program;\n        }\n\n        console.error(gl.getProgramInfoLog(program));\n        gl.deleteProgram(program);\n    }\n\n    #resizeCanvasToDisplaySize(canvas) {\n        // Lookup the size the browser is displaying the canvas in CSS pixels.\n        const displayWidth  = canvas.clientWidth;\n        const displayHeight = canvas.clientHeight;\n       \n        // Check if the canvas is not the same size.\n        const needResize = canvas.width  !== displayWidth ||\n                           canvas.height !== displayHeight;\n       \n        if (needResize) {\n          // Make the canvas the same size\n          canvas.width  = displayWidth;\n          canvas.height = displayHeight;\n        }\n       \n        return needResize;\n    }\n\n    #initTweakpane() {\n        if (this.pane) {\n            // init tweakpane folders and inputs\n\n            const cameraRYSlider = this.pane.addBlade({\n                view: 'slider',\n                label: 'camera RY',\n                min: 0,\n                max: 2 * Math.PI,\n                value: 0,\n            });\n\n            cameraRYSlider.on('change', e => {\n                this.cameraRotationY = e.value;\n                this.#updateCameraMatrix();\n            });\n        }\n    }\n}\n","#version 300 es\n\n// fragment shaders don't have a default precision so we need\n// to pick one. highp is a good default. It means \"high precision\"\nprecision highp float;\n\nuniform float u_time;\nuniform sampler2D u_image;\n\nin vec3 v_color;\nin vec2 v_uv;\n\nout vec4 outColor;\n\nvoid main() {\n    outColor = texture(u_image, v_uv);\n}\n","#version 300 es\n\nin vec4 a_position;\nin vec3 a_color;\nin vec2 a_uv;\n\nuniform mat4 u_matrix;\n\nout vec3 v_color;\nout vec2 v_uv;\n\nvoid main() {\n    v_color = a_color;\n    v_uv = a_uv;\n    gl_Position = u_matrix * a_position;\n}\n","module.exports = require('./helpers/bundle-url').getBundleURL('83Npk') + \"../\" + require('./helpers/bundle-manifest').resolve(\"cJfsF\");","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;"],"names":["require","register","JSON","parse","mapping","module","exports","pairs","keys","Object","i","length","resolve","id","resolved","Error","sketch","resizeTimeoutId","_webgl3D","window","addEventListener","pane","canvas","document","body","querySelector","WebGL3d","sketch1","run","clearTimeout","setTimeout","resize","_m4","_fragmentGlsl","_vertexGlsl","_animate","WeakSet","_render","_init","_updateTexture","_createAndSetupTexture","_updateProjectionMatrix","_updateCameraMatrix","_updateModelMatrix","_setColor","_setGeometry","_setUVs","_createShader","_createProgram","_resizeCanvasToDisplaySize","_initTweakpane","oninit","arguments","_time","set","this","_isDestroyed","add","image","Image","src","URL","onload","updateTexture","call","_this","init","key","resizeCanvasToDisplaySize","gl","viewport","width","height","updateProjectionMatrix","viewProjectionMatrix","m4","multiply","projectionMatrix","viewMatrix","lastFrameTime","performance","now","animate","WeakMap","time","delta","_helpers","classPrivateFieldGet","render","uniform1f","timeUniformLocation","rotation","Math","PI","updateModelMatrix","requestAnimationFrame","t","classPrivateMethodGet","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","useProgram","program","bindVertexArray","vertexArrayObject","matrix","modelMatrix","uniformMatrix4fv","matrixUniformLocation","primitiveType","TRIANGLES","drawArrays","getContext","vertexShader","createShader","VERTEX_SHADER","_vertexGlslDefault","default","fragmentShader","FRAGMENT_SHADER","_fragmentGlslDefault","createProgram","positionAttributeLocation","getAttribLocation","colorAttributeLocation","uvAttributeLocation","getUniformLocation","imageUniformLocation","createVertexArray","positionBuffer","createBuffer","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","setGeometry","vertexAttribPointer","FLOAT","colorBuffer","setColor","uvBuffer","setUVs","imageTexture","createAndSetupTexture","texImage2D","TEXTURE_2D","RGBA","UNSIGNED_BYTE","Uint8Array","enable","CULL_FACE","DEPTH_TEST","origin","translation","scale","cameraRotationY","updateCameraMatrix","initTweakpane","bindTexture","generateMipmap","texture","createTexture","texParameteri","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","aspect","clientWidth","clientHeight","fov","perspective","cameraMatrix","yRotation","translate","inverse","xRotate","yRotate","zRotate","Float32Array","f","faceColor","random","vi","toConsumableArray","bufferData","STATIC_DRAW","positions","xRotation","ii","vector","transformPoint","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","displayWidth","displayHeight","needResize","addBlade","view","label","min","max","value","on","e","getBundleURL","bundleURL","getBaseURL","url","replace","err","matches","stack","match","getOrigin"],"version":3,"file":"index.0e0fbf38.js.map"}