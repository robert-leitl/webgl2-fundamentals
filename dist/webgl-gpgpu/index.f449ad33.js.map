{"mappings":"4xCAAMA,EAAA,aAAN,IAUIC,EACAC,EAVEC,EAAAH,EAAA,iBAYNI,OAAOC,iBAAiB,QAAQ,WAC5B,IAEIC,EAFEC,EAASC,SAASC,KAAKC,cAAc,MAO3CT,EAAS,IAAGE,EAAAQ,WAAYJ,EAAQD,GAAM,SAACM,GACnCA,EAAOC,YAIfT,OAAOC,iBAAiB,UAAU,WAC1BJ,IACIC,GACAY,aAAaZ,GAEjBA,EAAkBa,YAAW,WACzBb,EAAkB,KAClBD,EAAOe,WACR,0MC1BEL,6BAPPM,EAAAjB,EAAA,WAEAkB,GADAlB,EAAA,cACAA,EAAA,yDACAmB,EAAAnB,EAAA,sDACAoB,EAAApB,EAAA,qDACAqB,EAAArB,EAAA,mDA2CFsB,EAAO,IAAAC,QAuCPC,EAAK,IAAAD,QA4FLE,EAAsB,IAAAF,QAOtBG,EAAgB,IAAAH,QAkBhBI,EAAW,IAAAJ,QAOXK,EAAa,IAAAL,QAcbM,EAAc,IAAAN,QAuBdO,EAAmB,IAAAP,QAKnBQ,EAAuB,IAAAR,QAKvBS,EAAc,IAAAT,QA3PLZ,EAAN,iCAAMA,EAaGJ,EAAQD,OAAM2B,EAAMC,UAAAC,OAAA,QAAA,IAAAD,UAAA,GAAAA,UAAA,GAAG,2BAb1BvB,yBACT,cAAA,GAEAyB,EAAKC,IAAAC,KAAA,mBAAG,IACRC,EAAUF,IAAAC,KAAA,mBAAG,IACbE,EAAYH,IAAAC,KAAA,oBAAG,0BAEf,SAAS,CACLG,SAAU,EACVC,SAAU,CAAC,EAAG,EAAG,KACjBC,OAAQ1B,EAAK2B,GAAGC,aA+BpBvB,EAAOwB,IAAAR,MAuCPd,EAAKsB,IAAAR,MA4FLb,EAAsBqB,IAAAR,MAOtBZ,EAAgBoB,IAAAR,MAkBhBX,EAAWmB,IAAAR,MAOXV,EAAakB,IAAAR,MAcbT,EAAciB,IAAAR,MAuBdR,EAAmBgB,IAAAR,MAKnBP,EAAuBe,IAAAR,MAKvBN,EAAcc,IAAAR,MA7OVA,KAAK/B,OAASA,EACd+B,KAAKhC,KAAOA,EACZgC,KAAKL,OAASA,0BAEdK,KAAMd,EAAAuB,GAAIC,KAAVV,2BAlBK3B,EAAU,EAqBnBsC,IAAA,eAAA,WACIhC,EAAKiC,0BAA0BZ,KAAKa,GAAG5C,QACvC+B,KAAKa,GAAGC,SAAS,EAAG,EAAGd,KAAKa,GAAG5C,OAAO8C,MAAOf,KAAKa,GAAG5C,OAAO+C,gCAE5DhB,KAAMP,EAAAwB,GAAsBP,KAA5BV,SAGJW,IAAA,YAAA,eAAIO,EAAItB,UAAAC,OAAA,QAAA,IAAAD,UAAA,GAAAA,UAAA,GAAG,qCACDK,EAAYiB,EAAIC,EAAAC,qBAAGpB,KAAMF,gCACzBA,EAAOoB,GAEXC,EAAAC,qBAAEpB,KAAME,KAEVF,KAAKqB,gBAAgBC,YAAWH,EAAAC,qBAAGpB,KAAMC,2BAEzCD,KAAMhB,EAAAuC,GAAMb,KAAZV,MAEAwB,uBAAsB,SAACC,GAAM,OAAMC,EAADnD,IAAIkD,UAsC1Cd,IAAA,gBAAA,uCACUT,GAAc,OA7Ef7B,EAAN,GAGHyB,EAAK,IAAA6B,QACL1B,EAAU,IAAA0B,QACVzB,EAAY,IAAAyB,iBAoCZJ,IAEIvB,KAAKa,GAAGe,WAAW,EAAG,EAAG,EAAG,GAC5B5B,KAAKa,GAAGgB,MAAM7B,KAAKa,GAAGiB,iBAAmB9B,KAAKa,GAAGkB,kBACjD/B,KAAKa,GAAGmB,QAAQhC,KAAKa,GAAGoB,YACxBjC,KAAKa,GAAGmB,QAAQhC,KAAKa,GAAGqB,WACxBlC,KAAKa,GAAGsB,OAAOnC,KAAKa,GAAGuB,OACvBpC,KAAKa,GAAGwB,UAAUrC,KAAKa,GAAGyB,UAAWtC,KAAKa,GAAG0B,WAG7CvC,KAAKa,GAAGsB,OAAOnC,KAAKa,GAAG2B,oBACvBxC,KAAKa,GAAG4B,WAAWzC,KAAK0C,gBACxB1C,KAAKa,GAAG8B,gBAAgB3C,KAAK4C,mBAAmBC,YAChD7C,KAAKa,GAAGiC,UAAU9C,KAAK+C,iBAAiBzB,YAAatB,KAAKqB,gBAAgBC,aAC1EtB,KAAKa,GAAGmC,sBAAsBhD,KAAKa,GAAGoC,mBAAoBjD,KAAK4C,mBAAmBM,mBAClFlD,KAAKa,GAAGsC,uBAAuBnD,KAAKa,GAAGuC,QACvCpD,KAAKa,GAAGwC,WAAWrD,KAAKa,GAAGuC,OAAQ,EAAGpD,KAAKsD,eAC3CtD,KAAKa,GAAG0C,uBACRvD,KAAKa,GAAGmC,sBAAsBhD,KAAKa,GAAGoC,mBAAoB,MAC1DjD,KAAKa,GAAGmB,QAAQhC,KAAKa,GAAG2B,oBAGxBxC,KAAKa,GAAG4B,WAAWzC,KAAKwD,aACxBxD,KAAKa,GAAG8B,gBAAgB3C,KAAK4C,mBAAmBa,SAChDzD,KAAKa,GAAG6C,iBAAiB1D,KAAK2D,cAAcC,eAAe,EAAO5D,KAAK6D,aAAaD,eACpF5D,KAAKa,GAAG6C,iBAAiB1D,KAAK2D,cAAcG,cAAc,EAAO9D,KAAK6D,aAAaC,cACnF9D,KAAKa,GAAG6C,iBAAiB1D,KAAK2D,cAAcI,oBAAoB,EAAO/D,KAAK6D,aAAaE,oBACzF/D,KAAKa,GAAGwC,WAAWrD,KAAKa,GAAGuC,OAAQ,EAAGpD,KAAKsD,eAG3C,IAAMU,EAAehE,KAAK4C,mBAC1B5C,KAAK4C,mBAAqB5C,KAAKiE,gBAC/BjE,KAAKiE,gBAAkBD,WAO3BvD,IAEI,GADAT,KAAKa,GAAKb,KAAK/B,OAAOiG,WAAW,SAAU,CAAEC,WAAW,KACnDnE,KAAKa,GACN,MAAM,IAAIuD,MAAM,uBAIpBpE,KAAK0C,eAAcvB,EAAAkD,sBAAGrE,KAAMT,EAAA+E,GAAa5D,KAAnBV,KAAoBA,KAAKa,GAAI,sBAA0D,CAAC,kBAC9Gb,KAAKwD,YAAWrC,EAAAkD,sBAAGrE,KAAMT,EAAA+E,GAAa5D,KAAnBV,KAAoBA,KAAKa,GAAI,uBAGhDb,KAAK+C,iBAAmB,CACpBwB,cAAevE,KAAKa,GAAG2D,kBAAkBxE,KAAK0C,eAAgB,iBAC9D+B,WAAYzE,KAAKa,GAAG2D,kBAAkBxE,KAAK0C,eAAgB,cAC3DpB,YAAatB,KAAKa,GAAG6D,mBAAmB1E,KAAK0C,eAAgB,gBAEjE1C,KAAK2D,cAAgB,CACjBgB,WAAY3E,KAAKa,GAAG2D,kBAAkBxE,KAAKwD,YAAa,cACxDI,cAAe5D,KAAKa,GAAG6D,mBAAmB1E,KAAKwD,YAAa,iBAC5DM,aAAc9D,KAAKa,GAAG6D,mBAAmB1E,KAAKwD,YAAa,gBAC3DO,mBAAoB/D,KAAKa,GAAG6D,mBAAmB1E,KAAKwD,YAAa,uBAIrExD,KAAKsD,cAAgB,IACrB,IAAMsB,EAAY,IAAIC,aAAaC,MAAM9E,KAAKsD,eAAeyB,KAAK,GAAGC,KAAI,SAAAC,GAAK,OAAAH,MAAM,GAAGC,KAAK,GAAGC,KAAI,SAAAC,GAAK,OAAAC,KAAKC,eAAWC,QAClHC,EAAa,IAAIR,aAAaC,MAAM9E,KAAKsD,eAAeyB,KAAK,GAAGC,KAAI,SAAAC,GAAK,OAAAH,MAAM,GAAGC,KAAK,GAAGC,KAAI,SAAAC,GAAK,OAA0B,MAAT,EAAhBC,KAAKC,SAAe,SAAeC,QAG7IpF,KAAKsF,gBAAenE,EAAAkD,sBAAGrE,KAAMX,EAAAkG,GAAU7E,KAAhBV,KAAiBA,KAAKa,GAAI+D,EAAW5E,KAAKa,GAAG2E,cACpExF,KAAKyF,gBAAetE,EAAAkD,sBAAGrE,KAAMX,EAAAkG,GAAU7E,KAAhBV,KAAiBA,KAAKa,GAAI+D,EAAW5E,KAAKa,GAAG2E,cACpExF,KAAK0F,iBAAgBvE,EAAAkD,sBAAGrE,KAAMX,EAAAkG,GAAU7E,KAAhBV,KAAiBA,KAAKa,GAAIwE,EAAYrF,KAAKa,GAAG8E,aAGtE3F,KAAK4F,YAAWzE,EAAAkD,sBAAGrE,KAAMZ,EAAAyG,GAAenF,KAArBV,KAAsBA,KAAKa,GAAI,CAC9C,CAACb,KAAKsF,gBAAiBtF,KAAK+C,iBAAiBwB,eAC7C,CAACvE,KAAK0F,iBAAkB1F,KAAK+C,iBAAiB0B,cAElDzE,KAAK8F,YAAW3E,EAAAkD,sBAAGrE,KAAMZ,EAAAyG,GAAenF,KAArBV,KAAsBA,KAAKa,GAAI,CAC9C,CAACb,KAAKyF,gBAAiBzF,KAAK+C,iBAAiBwB,eAC7C,CAACvE,KAAK0F,iBAAkB1F,KAAK+C,iBAAiB0B,cAIlDzE,KAAK+F,SAAQ5E,EAAAkD,sBAAGrE,KAAMZ,EAAAyG,GAAenF,KAArBV,KAAsBA,KAAKa,GAAI,CAC3C,CAACb,KAAKsF,gBAAiBtF,KAAK2D,cAAcgB,cAE9C3E,KAAKgG,SAAQ7E,EAAAkD,sBAAGrE,KAAMZ,EAAAyG,GAAenF,KAArBV,KAAsBA,KAAKa,GAAI,CAC3C,CAACb,KAAKyF,gBAAiBzF,KAAK2D,cAAcgB,cAI9C3E,KAAKiG,mBAAkB9E,EAAAkD,sBAAGrE,KAAMb,EAAA+G,GAAqBxF,KAA3BV,KAA4BA,KAAKa,GAAIb,KAAKsF,iBACpEtF,KAAKmG,mBAAkBhF,EAAAkD,sBAAGrE,KAAMb,EAAA+G,GAAqBxF,KAA3BV,KAA4BA,KAAKa,GAAIb,KAAKyF,iBAEpEzF,KAAKqB,gBAAkB,CACnBC,YAAa,GAIjBtB,KAAK6D,aAAe,CAChBD,cAAejF,EAAK2B,GAAG8F,UAAUzH,EAAK2B,GAAG+F,QAAQ,CAAC,IAAK,IAAK,MAAO,EAAC,IAAK,IAAK,KAC9EvC,aAAcnF,EAAK2B,GAAGC,WACtBwD,mBAAoBpF,EAAK2B,GAAGC,YAIhCP,KAAKa,GAAGyF,WAAWtG,KAAKa,GAAG0F,aAAc,MACzCvG,KAAKa,GAAGyF,WAAWtG,KAAKa,GAAG2F,0BAA2B,MAGtDxG,KAAK4C,mBAAqB,CACtBC,WAAY7C,KAAK4F,YACjB1C,kBAAmBlD,KAAKmG,mBACxB1C,QAASzD,KAAKgG,UAElBhG,KAAKiE,gBAAkB,CACnBpB,WAAY7C,KAAK8F,YACjB5C,kBAAmBlD,KAAKiG,mBACxBxC,QAASzD,KAAK+F,UAGlB/F,KAAKtB,iCAELsB,KAAMR,EAAAiH,GAAkB/F,KAAxBV,8BACAA,KAAMP,EAAAwB,GAAsBP,KAA5BV,8BAEAA,KAAMN,EAAAgH,GAAahG,KAAnBV,MAEIA,KAAKL,QAAQK,KAAKL,OAAOK,eAGjCkG,EAAuBrF,EAAI8F,GACvB,IAAMC,EAAK/F,EAAGgG,0BAGd,OAFAhG,EAAGmC,sBAAsBnC,EAAGoC,mBAAoB2D,GAChD/F,EAAGiG,eAAejG,EAAG2F,0BAA2B,EAAGG,GAC5CC,WAGXf,EAAiBhF,EAAIkG,GACjB,IAAMC,EAAKnG,EAAGoG,oBACdpG,EAAG8B,gBAAgBqE,OACdE,GAAmB,EAAnBC,GAAmB,EAAnBC,OAAmBC,MAAxB,IAAG,IAAEC,EAAAC,EAAuBR,EAAWS,OAAAC,cAAlCP,GAAAI,EAAAC,EAAmBG,QAAAC,MAAnBT,GAAmB,EAAiB,CAApC,IAAKU,EAAAzG,EAAA0G,cAALP,EAAmBQ,MAAA,GAAZnB,EAAMiB,EAAA,GAAEG,EAAGH,EAAA,GACnB/G,EAAGyF,WAAWzF,EAAG0F,aAAcI,GAC/B9F,EAAGmH,wBAAwBD,GAC3BlH,EAAGoH,oBACCF,EACA,EACAlH,EAAGqH,OACH,EACA,EACA,aATHf,GAAmB,EAAnBC,EAAmBe,cAAnBjB,GAAmB,MAAnBK,EAAmBa,QAAnBb,EAAmBa,oBAAnBjB,QAAAC,GAYL,OAAOJ,WAGXzB,EAAY1E,EAAIwH,EAAYC,GACxB,IAAMC,EAAM1H,EAAG2H,eAGf,OAFA3H,EAAGyF,WAAWzF,EAAG0F,aAAcgC,GAC/B1H,EAAG4H,WAAW5H,EAAG0F,aAAc8B,EAAYC,GACpCC,WAGXG,EAAc7H,EAAI8H,EAAMC,GACpB,IAAMC,EAAShI,EAAG6H,aAAaC,GAK/B,GAJA9H,EAAGiI,aAAaD,EAAQD,GACxB/H,EAAGkI,cAAcF,GACDhI,EAAGmI,mBAAmBH,EAAQhI,EAAGoI,gBAG7C,OAAOJ,EAGXK,QAAQC,MAAMtI,EAAGuI,iBAAiBP,IAClChI,EAAGwI,aAAaR,YAGpBvE,EAAezD,EAAIyI,EAAeC,cACxBC,EAAU3I,EAAGyD,gBAcnB,GAZA,CAACzD,EAAG4I,cAAe5I,EAAG6I,iBAAiBC,SAAQ,SAAChB,EAAMiB,GAClD,IAAMf,EAAM1H,EAAAkD,sBAAA3C,EAASpC,EAAAoJ,GAAYhI,KAAAgB,EAACb,EAAI8H,EAAMW,EAAcM,IAC1D/I,EAAGgJ,aAAaL,EAASX,MAGzBU,GACA1I,EAAG0I,0BAA0BC,EAASD,EAA2B1I,EAAGiJ,kBAGxEjJ,EAAGkJ,YAAYP,GACC3I,EAAGmJ,oBAAoBR,EAAS3I,EAAGoJ,aAG/C,OAAOT,EAGXN,QAAQC,MAAMtI,EAAGqJ,kBAAkBV,IACnC3I,EAAGsJ,cAAcX,YAGrB/C,IACI9H,EAAK2B,GAAG8J,OAAOpK,KAAKqK,OAAOjK,SAAU,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAIJ,KAAKqK,OAAOhK,QACvE1B,EAAK2B,GAAGgK,QAAQtK,KAAKqK,OAAOhK,OAAQL,KAAK6D,aAAaC,uBAG1D7C,IACI,IAAMsJ,EAASvK,KAAKa,GAAG5C,OAAOuM,YAAcxK,KAAKa,GAAG5C,OAAOwM,aAC3D9L,EAAK2B,GAAGoK,YAAYxF,KAAKyF,GAAK,EAAGJ,EAAQ,GAAI,IAAKvK,KAAK6D,aAAaE,6BAGxE2C,IACI,GAAI1G,KAAKhC,KAAM,YACWgC,KAAKhC,KAAK4M,SAAS,CACrCC,KAAM,SACNC,MAAO,MACPC,KAAK,IACLC,IAAK,IACLlD,MAAO9H,KAAKqK,OAAOjK,SAAS,KAGlB6K,GAAG,UAAU,SAAAC,KAClBb,OAAOjK,SAAS,GAAK8K,EAAEpD,gCACtBtI,EAAAiH,GAAkB/F,KAAAgB,MAEN1B,KAAKhC,KAAK4M,SAAS,CACrCC,KAAM,SACNC,MAAO,MACPC,KAAK,IACLC,IAAK,IACLlD,MAAO9H,KAAKqK,OAAOjK,SAAS,KAGlB6K,GAAG,UAAU,SAAAC,KAClBb,OAAOjK,SAAS,GAAK8K,EAAEpD,gCACtBtI,EAAAiH,GAAkB/F,KAAAgB,oTC3RxCyJ,EAAOC,QAAQ,iHCAfD,EAAOC,QAAQ,2TCAfD,EAAOC,QAAQ,2SCAfD,EAAOC,QAAQ","sources":["src/webgl-gpgpu/app.js","src/webgl-gpgpu/webgl-gpgpu.js","src/webgl-gpgpu/shader/compute-fragment.glsl","src/webgl-gpgpu/shader/compute-vertex.glsl","src/webgl-gpgpu/shader/draw-fragment.glsl","src/webgl-gpgpu/shader/draw-vertex.glsl"],"sourcesContent":["import { Pane } from 'tweakpane';\nimport { WebGLGPGPU } from './webgl-gpgpu';\n\nlet DEBUG = false;\n\nif (process.env.NODE_ENV !== 'production') {\n    // Only runs in development and will be stripped in production builds.\n    DEBUG = true;\n}\n\nlet sketch;\nlet resizeTimeoutId;\n\nwindow.addEventListener('load', () => {\n    const canvas = document.body.querySelector('#c');\n\n    let pane;\n    if (DEBUG) {\n        pane = new Pane({ title: 'Settings' });\n    }\n\n    sketch = new WebGLGPGPU(canvas, pane, (sketch) => {\n        sketch.run(); \n    });\n});\n\nwindow.addEventListener('resize', () => {\n    if (sketch) {\n        if (resizeTimeoutId)\n            clearTimeout(resizeTimeoutId);\n\n        resizeTimeoutId = setTimeout(() => {\n            resizeTimeoutId = null;\n            sketch.resize();\n        }, 300);\n    }\n});\n\n\n","\nimport * as twgl from 'twgl.js';\nimport { m4 } from '../math/m4';\nimport computeFragmentShaderSource from './shader/compute-fragment.glsl';\nimport computeVertexShaderSource from './shader/compute-vertex.glsl';\nimport drawFragmentShaderSource from './shader/draw-fragment.glsl';\nimport drawVertexShaderSource from './shader/draw-vertex.glsl';\n\nexport class WebGLGPGPU {\n    oninit;\n\n    #time = 0;\n    #deltaTime = 0;\n    #isDestroyed = false;\n\n    camera = {\n        rotation: 0,\n        position: [0, 0, 100],\n        matrix: twgl.m4.identity()\n    };\n\n    constructor(canvas, pane, oninit = null) {\n        this.canvas = canvas;\n        this.pane = pane;\n        this.oninit = oninit;\n\n        this.#init();\n    }\n\n    resize() {\n        twgl.resizeCanvasToDisplaySize(this.gl.canvas);\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n\n        this.#updateProjectionMatrix();\n    }\n\n    run(time = 0) {\n        this.#deltaTime = time - this.#time;\n        this.#time = time;\n\n        if (this.#isDestroyed) return;\n\n        this.computeUniforms.u_deltaTime = this.#deltaTime;\n\n        this.#render();\n\n        requestAnimationFrame((t) => this.run(t));\n    }\n\n    #render() {\n        // Draw\n        this.gl.clearColor(0, 0, 0, 1);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        this.gl.disable(this.gl.DEPTH_TEST);\n        this.gl.disable(this.gl.CULL_FACE);\n        this.gl.enable(this.gl.BLEND);\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.DST_ALPHA);\n\n        // compute the new positions\n        this.gl.enable(this.gl.RASTERIZER_DISCARD);\n        this.gl.useProgram(this.computeProgram);\n        this.gl.bindVertexArray(this.currentRenderState.computeVAO);\n        this.gl.uniform1f(this.computeLocations.u_deltaTime, this.computeUniforms.u_deltaTime);\n        this.gl.bindTransformFeedback(this.gl.TRANSFORM_FEEDBACK, this.currentRenderState.transformFeedback);\n        this.gl.beginTransformFeedback(this.gl.POINTS);\n        this.gl.drawArrays(this.gl.POINTS, 0, this.NUM_PARTICLES);\n        this.gl.endTransformFeedback();\n        this.gl.bindTransformFeedback(this.gl.TRANSFORM_FEEDBACK, null);\n        this.gl.disable(this.gl.RASTERIZER_DISCARD);\n\n        // draw the particles\n        this.gl.useProgram(this.drawProgram);\n        this.gl.bindVertexArray(this.currentRenderState.drawVAO);\n        this.gl.uniformMatrix4fv(this.drawLocations.u_worldMatrix, false, this.drawUniforms.u_worldMatrix);\n        this.gl.uniformMatrix4fv(this.drawLocations.u_viewMatrix, false, this.drawUniforms.u_viewMatrix);\n        this.gl.uniformMatrix4fv(this.drawLocations.u_projectionMatrix, false, this.drawUniforms.u_projectionMatrix);\n        this.gl.drawArrays(this.gl.POINTS, 0, this.NUM_PARTICLES);\n\n        // swap the render states\n        const currentState = this.currentRenderState;\n        this.currentRenderState = this.nextRenderState;\n        this.nextRenderState = currentState;\n    }\n\n    destroy() {\n        this.#isDestroyed = true;\n    }\n\n    #init() {\n        this.gl = this.canvas.getContext('webgl2', { antialias: true });\n        if (!this.gl) {\n            throw new Error('No WebGL 2 context!')\n        }\n\n        // setup programs\n        this.computeProgram = this.#createProgram(this.gl, [computeVertexShaderSource, computeFragmentShaderSource], ['t_newPosition']);\n        this.drawProgram = this.#createProgram(this.gl, [drawVertexShaderSource, drawFragmentShaderSource]);\n\n        // find the locations\n        this.computeLocations = {\n            a_oldPosition: this.gl.getAttribLocation(this.computeProgram, 'a_oldPosition'),\n            a_velocity: this.gl.getAttribLocation(this.computeProgram, 'a_velocity'),\n            u_deltaTime: this.gl.getUniformLocation(this.computeProgram, 'u_deltaTime')\n        };\n        this.drawLocations = {\n            a_position: this.gl.getAttribLocation(this.drawProgram, 'a_position'),\n            u_worldMatrix: this.gl.getUniformLocation(this.drawProgram, 'u_worldMatrix'),\n            u_viewMatrix: this.gl.getUniformLocation(this.drawProgram, 'u_viewMatrix'),\n            u_projectionMatrix: this.gl.getUniformLocation(this.drawProgram, 'u_projectionMatrix')\n        };\n\n        // init the positions and velocities\n        this.NUM_PARTICLES = 10000;\n        const positions = new Float32Array(Array(this.NUM_PARTICLES).fill(0).map(_ => Array(3).fill(0).map(_ => Math.random())).flat());\n        const velocities = new Float32Array(Array(this.NUM_PARTICLES).fill(0).map(_ => Array(3).fill(0).map(_ => (Math.random() * 2 - 1) * 0.0001 )).flat());\n\n        // make the buffers\n        this.position1Buffer = this.#makeBuffer(this.gl, positions, this.gl.DYNAMIC_DRAW);\n        this.position2Buffer = this.#makeBuffer(this.gl, positions, this.gl.DYNAMIC_DRAW);\n        this.velocitiesBuffer = this.#makeBuffer(this.gl, velocities, this.gl.STATIC_DRAW);\n\n        // create the compute VAOs\n        this.compute1VAO = this.#makeVertexArray(this.gl, [\n            [this.position1Buffer, this.computeLocations.a_oldPosition],\n            [this.velocitiesBuffer, this.computeLocations.a_velocity]\n        ]);\n        this.compute2VAO = this.#makeVertexArray(this.gl, [\n            [this.position2Buffer, this.computeLocations.a_oldPosition],\n            [this.velocitiesBuffer, this.computeLocations.a_velocity]\n        ]);\n\n        // create the draw VAOs\n        this.draw1VAO = this.#makeVertexArray(this.gl, [\n            [this.position1Buffer, this.drawLocations.a_position]\n        ]);\n        this.draw2VAO = this.#makeVertexArray(this.gl, [\n            [this.position2Buffer, this.drawLocations.a_position]\n        ]);\n\n        // make the transform feedbacks\n        this.transformFeedback1 = this.#makeTransformFeedback(this.gl, this.position1Buffer);\n        this.transformFeedback2 = this.#makeTransformFeedback(this.gl, this.position2Buffer);\n\n        this.computeUniforms = {\n            u_deltaTime: 0\n        };\n\n        // init the global uniforms\n        this.drawUniforms = {\n            u_worldMatrix: twgl.m4.translate(twgl.m4.scaling([100, 100, 100]), [-.5, -.5, -.5]),\n            u_viewMatrix: twgl.m4.identity(),\n            u_projectionMatrix: twgl.m4.identity()\n        };\n\n        // unbind left over stuff\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        this.gl.bindBuffer(this.gl.TRANSFORM_FEEDBACK_BUFFER, null);\n\n        // this are the render states\n        this.currentRenderState = {\n            computeVAO: this.compute1VAO,\n            transformFeedback: this.transformFeedback2,\n            drawVAO: this.draw2VAO\n        };\n        this.nextRenderState = {\n            computeVAO: this.compute2VAO,\n            transformFeedback: this.transformFeedback1,\n            drawVAO: this.draw1VAO\n        };\n\n        this.resize();\n\n        this.#updateCameraMatrix();\n        this.#updateProjectionMatrix();\n\n        this.#initTweakpane();\n\n        if (this.oninit) this.oninit(this);\n    }\n\n    #makeTransformFeedback(gl, buffer) {\n        const tf = gl.createTransformFeedback();\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buffer);\n        return tf;\n    }\n\n    #makeVertexArray(gl, bufLocPairs) {\n        const va = gl.createVertexArray();\n        gl.bindVertexArray(va);\n        for (const [buffer, loc] of bufLocPairs) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            gl.enableVertexAttribArray(loc);\n            gl.vertexAttribPointer(\n                loc,      // attribute location\n                3,        // number of elements\n                gl.FLOAT, // type of data\n                false,    // normalize\n                0,        // stride (0 = auto)\n                0,        // offset\n            );\n        }\n        return va;\n    }\n\n    #makeBuffer(gl, sizeOrData, usage) {\n        const buf = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, buf);\n        gl.bufferData(gl.ARRAY_BUFFER, sizeOrData, usage);\n        return buf;\n    }\n\n    #createShader(gl, type, source) {\n        const shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n        if (success) {\n            return shader;\n        }\n\n        console.error(gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n    }\n\n    #createProgram(gl, shaderSources, transformFeedbackVaryings) {\n        const program = gl.createProgram();\n\n        [gl.VERTEX_SHADER, gl.FRAGMENT_SHADER].forEach((type, ndx) => {\n            const shader = this.#createShader(gl, type, shaderSources[ndx]);\n            gl.attachShader(program, shader);\n        });\n\n        if (transformFeedbackVaryings) {\n            gl.transformFeedbackVaryings(program, transformFeedbackVaryings, gl.SEPARATE_ATTRIBS);\n        }\n\n        gl.linkProgram(program);\n        const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n        if (success) {\n            return program;\n        }\n\n        console.error(gl.getProgramInfoLog(program));\n        gl.deleteProgram(program);\n    }\n\n    #updateCameraMatrix() {\n        twgl.m4.lookAt(this.camera.position, [0, 0, 0], [0, 1, 0], this.camera.matrix);\n        twgl.m4.inverse(this.camera.matrix, this.drawUniforms.u_viewMatrix);\n    }\n\n    #updateProjectionMatrix() {\n        const aspect = this.gl.canvas.clientWidth / this.gl.canvas.clientHeight;\n        twgl.m4.perspective(Math.PI / 4, aspect, 50, 150, this.drawUniforms.u_projectionMatrix);\n    }\n\n    #initTweakpane() {\n        if (this.pane) {\n            const cameraYSlider = this.pane.addBlade({\n                view: 'slider',\n                label: 'c.y',\n                min: -100,\n                max: 100,\n                value: this.camera.position[1],\n            });\n\n            cameraYSlider.on('change', e => {\n                this.camera.position[1] = e.value;\n                this.#updateCameraMatrix();\n            });\n            const cameraXSlider = this.pane.addBlade({\n                view: 'slider',\n                label: 'c.x',\n                min: -100,\n                max: 100,\n                value: this.camera.position[0],\n            });\n\n            cameraXSlider.on('change', e => {\n                this.camera.position[0] = e.value;\n                this.#updateCameraMatrix();\n            });\n        }\n    }\n}\n","#version 300 es\n\nprecision highp float;\n\nvoid main() {}\n","#version 300 es\n\nuniform float u_deltaTime;\n\nin vec3 a_oldPosition;\nin vec3 a_velocity;\n\nout vec3 t_newPosition;\n\nvoid main() {\n    t_newPosition = a_oldPosition + a_velocity * u_deltaTime;\n    t_newPosition = mod(t_newPosition, vec3(1., 1., 1.));\n}\n","#version 300 es\n\nprecision highp float;\n\nout vec4 outColor;\n\nin float v_size;\n\nvoid main() {\n    vec2 c = gl_PointCoord * 2. - 1.;\n    float mask = 1. - smoothstep(0.7, 0.9, length(c));\n    outColor = vec4(vec3(v_size) * mask, mask);\n}\n","#version 300 es\n\nuniform mat4 u_worldMatrix;\nuniform mat4 u_viewMatrix;\nuniform mat4 u_projectionMatrix;\n\nin vec3 a_position;\n\nout float v_size;\n\nvoid main() {\n    vec4 worldPosition = u_worldMatrix * vec4(a_position, 1.);\n    vec4 viewPosition = u_viewMatrix * worldPosition;\n    gl_Position = u_projectionMatrix * viewPosition;\n    float size = 1. - ((gl_Position.z / gl_Position.w) * .5 + .5);\n    gl_PointSize = size * 20.;\n    v_size = size;\n}\n"],"names":["require","sketch","resizeTimeoutId","_webglGpgpu","window","addEventListener","pane","canvas","document","body","querySelector","WebGLGPGPU","sketch1","run","clearTimeout","setTimeout","resize","_twglJs","_computeFragmentGlsl","_computeVertexGlsl","_drawFragmentGlsl","_drawVertexGlsl","_render","WeakSet","_init","_makeTransformFeedback","_makeVertexArray","_makeBuffer","_createShader","_createProgram","_updateCameraMatrix","_updateProjectionMatrix","_initTweakpane","oninit","arguments","length","_time","set","this","_deltaTime","_isDestroyed","rotation","position","matrix","m4","identity","add","init","call","key","resizeCanvasToDisplaySize","gl","viewport","width","height","updateProjectionMatrix","time","_helpers","classPrivateFieldGet","computeUniforms","u_deltaTime","render","requestAnimationFrame","t","_this","WeakMap","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","disable","DEPTH_TEST","CULL_FACE","enable","BLEND","blendFunc","SRC_ALPHA","DST_ALPHA","RASTERIZER_DISCARD","useProgram","computeProgram","bindVertexArray","currentRenderState","computeVAO","uniform1f","computeLocations","bindTransformFeedback","TRANSFORM_FEEDBACK","transformFeedback","beginTransformFeedback","POINTS","drawArrays","NUM_PARTICLES","endTransformFeedback","drawProgram","drawVAO","uniformMatrix4fv","drawLocations","u_worldMatrix","drawUniforms","u_viewMatrix","u_projectionMatrix","currentState","nextRenderState","getContext","antialias","Error","classPrivateMethodGet","createProgram","a_oldPosition","getAttribLocation","a_velocity","getUniformLocation","a_position","positions","Float32Array","Array","fill","map","_","Math","random","flat","velocities","position1Buffer","makeBuffer","DYNAMIC_DRAW","position2Buffer","velocitiesBuffer","STATIC_DRAW","compute1VAO","makeVertexArray","compute2VAO","draw1VAO","draw2VAO","transformFeedback1","makeTransformFeedback","transformFeedback2","translate","scaling","bindBuffer","ARRAY_BUFFER","TRANSFORM_FEEDBACK_BUFFER","updateCameraMatrix","initTweakpane","buffer","tf","createTransformFeedback","bindBufferBase","bufLocPairs","va","createVertexArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_value","slicedToArray","value","loc","enableVertexAttribArray","vertexAttribPointer","FLOAT","err","return","sizeOrData","usage","buf","createBuffer","bufferData","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","shaderSources","transformFeedbackVaryings","program","VERTEX_SHADER","FRAGMENT_SHADER","forEach","ndx","attachShader","SEPARATE_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","lookAt","camera","inverse","aspect","clientWidth","clientHeight","perspective","PI","addBlade","view","label","min","max","on","e","module","exports"],"version":3,"file":"index.f449ad33.js.map"}