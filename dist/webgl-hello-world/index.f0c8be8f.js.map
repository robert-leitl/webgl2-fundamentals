{"mappings":"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","sources":["src/webgl-hello-world/app.js","src/webgl-hello-world/webgl-hello-world.js","src/webgl-hello-world/shader/fragment.glsl","src/webgl-hello-world/shader/vertex.glsl"],"sourcesContent":["import { WebGLHelloWorld } from './webgl-hello-world';\nimport { Pane } from 'tweakpane';\n\nlet DEBUG = false;\n\nif (process.env.NODE_ENV !== 'production') {\n    // Only runs in development and will be stripped in production builds.\n    DEBUG = true;\n}\n\nlet sketch;\nlet resizeTimeoutId;\n\nwindow.addEventListener('load', () => {\n    const canvas = document.body.querySelector('#c');\n\n    let pane;\n    if (DEBUG) {\n        pane = new Pane({ title: 'Settings' });\n    }\n\n    sketch = new WebGLHelloWorld(canvas, pane, (sketch) => {\n        sketch.run(); \n    });\n});\n\nwindow.addEventListener('resize', () => {\n    if (sketch) {\n        if (resizeTimeoutId)\n            clearTimeout(resizeTimeoutId);\n\n        resizeTimeoutId = setTimeout(() => {\n            resizeTimeoutId = null;\n            sketch.resize();\n        }, 300);\n    }\n});\n\n\n","\nimport fragmentShaderSource from './shader/fragment.glsl';\nimport vertexShaderSource from './shader/vertex.glsl';\n\nexport class WebGLHelloWorld {\n    oninit;\n\n    #time = 0;\n    #isDestroyed = false;\n\n    constructor(canvas, pane, oninit = null) {\n        this.canvas = canvas;\n        this.pane = pane;\n        this.oninit = oninit;\n\n        this.#init();\n    }\n\n    resize() {\n        this.#resizeCanvasToDisplaySize(this.gl.canvas);\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n    }\n\n    run() {\n        if (this.#isDestroyed) return;\n\n        this.#render();\n\n        // update uniforms\n        this.gl.uniform4f(this.colorUniformLocation, 1, 0, 0, 1);\n        this.gl.uniform1f(this.timeUniformLocation, this.#time);\n\n        this.#time += 0.01;\n\n        requestAnimationFrame(() => this.run());\n    }\n\n    #render() {\n        // Draw\n        this.gl.clearColor(0, 0, 0, 1);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n        this.gl.useProgram(this.program);\n        this.gl.bindVertexArray(this.vertexArrayObject);\n        this.gl.drawArrays(this.gl.TRIANGLES, 0, 3);\n    }\n\n    destroy() {\n        this.#isDestroyed = true;\n    }\n\n    #init() {\n        this.gl = this.canvas.getContext('webgl2');\n        if (!this.gl) {\n            throw new Error('No WebGL 2 context!')\n        }\n\n        this.vertexShader = this.#createShader(this.gl, this.gl.VERTEX_SHADER, vertexShaderSource);\n        this.fragmentShader = this.#createShader(this.gl, this.gl.FRAGMENT_SHADER, fragmentShaderSource);\n        this.program = this.#createProgram(this.gl, this.vertexShader, this.fragmentShader);\n\n        // set of attributes\n        this.vertexArrayObject = this.gl.createVertexArray();\n        this.gl.bindVertexArray(this.vertexArrayObject);\n\n        // Postion Buffer\n        // find the position attribute within the compiled and linked program\n        const positionAttributeLocation = this.gl.getAttribLocation(this.program, 'a_position');\n        const positionBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, positionBuffer);\n        const positions = [0, 0, 0.5, 0, 0, 0.5];\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(positions), this.gl.STATIC_DRAW);\n        this.gl.enableVertexAttribArray(positionAttributeLocation);\n        // this also binds the positionBuffer to the attribute --> ARRAY_BUFFER is free\n        this.gl.vertexAttribPointer(positionAttributeLocation, 2, this.gl.FLOAT, false, 0, 0);\n\n        // Vertex Color Buffer\n        const vertexColorAttribLocation = this.gl.getAttribLocation(this.program, 'a_vertexColor');\n        const vertexColorBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertexColorBuffer);\n        const vertexColors = [\n            Math.random() * 255, Math.random() * 255, Math.random() * 255,\n            Math.random() * 255, Math.random() * 255, Math.random() * 255,\n            Math.random() * 255, Math.random() * 255, Math.random() * 255\n        ];\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Uint8Array(vertexColors), this.gl.STATIC_DRAW);\n        this.gl.enableVertexAttribArray(vertexColorAttribLocation);\n        this.gl.vertexAttribPointer(vertexColorAttribLocation, 3, this.gl.UNSIGNED_BYTE, true, 0, 0);\n\n        // Uniforms\n        this.colorUniformLocation = this.gl.getUniformLocation(this.program, 'u_color');\n        this.timeUniformLocation = this.gl.getUniformLocation(this.program, 'u_time');\n\n        this.resize();\n\n        this.#initTweakpane();\n\n        if (this.oninit) this.oninit(this);\n    }\n\n    #createShader(gl, type, source) {\n        const shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n        if (success) {\n            return shader;\n        }\n\n        console.error(gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n    }\n\n    #createProgram(gl, vertexShader, fragmentShader) {\n        const program = gl.createProgram();\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.linkProgram(program);\n        const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n        if (success) {\n            return program;\n        }\n\n        console.error(gl.getProgramInfoLog(program));\n        gl.deleteProgram(program);\n    }\n\n    #resizeCanvasToDisplaySize(canvas) {\n        // Lookup the size the browser is displaying the canvas in CSS pixels.\n        const displayWidth  = canvas.clientWidth;\n        const displayHeight = canvas.clientHeight;\n       \n        // Check if the canvas is not the same size.\n        const needResize = canvas.width  !== displayWidth ||\n                           canvas.height !== displayHeight;\n       \n        if (needResize) {\n          // Make the canvas the same size\n          canvas.width  = displayWidth;\n          canvas.height = displayHeight;\n        }\n       \n        return needResize;\n    }\n\n    #initTweakpane() {\n        if (this.pane) {\n            // init tweakpane folders and inputs\n        }\n    }\n}\n","#version 300 es\n\n// fragment shaders don't have a default precision so we need\n// to pick one. highp is a good default. It means \"high precision\"\nprecision highp float;\n\nuniform vec4 u_color;\nuniform float u_time;\n\nout vec4 outColor;\n\nin vec4 v_color;\n\nvoid main() {\n    float s = 0.5;\n    float f = (sin(u_time * 5.) * 0.5 + 1.) * s + (1. - s);\n    vec4 color = vec4(v_color.rgb * f, 1.);\n\n    outColor = color;\n}\n","#version 300 es\n\nin vec4 a_position;\nin vec3 a_vertexColor;\n\nout vec4 v_color;\n\nvoid main() {\n    v_color = vec4(a_vertexColor, 1.);\n    gl_Position = a_position;\n}\n"],"names":["sketch","resizeTimeoutId","_webglHelloWorld","require","_tweakpane","window","addEventListener","pane","canvas","document","body","querySelector","Pane","title","WebGLHelloWorld","sketch1","run","clearTimeout","setTimeout","resize","_fragmentGlsl","_vertexGlsl","_render","WeakSet","_init","_createShader","_createProgram","_resizeCanvasToDisplaySize","_initTweakpane","oninit","arguments","length","_time","set","this","_isDestroyed","add","init","call","key","resizeCanvasToDisplaySize","gl","viewport","width","height","_helpers","classPrivateFieldGet","render","uniform4f","colorUniformLocation","uniform1f","timeUniformLocation","requestAnimationFrame","_this","WeakMap","clearColor","clear","COLOR_BUFFER_BIT","useProgram","program","bindVertexArray","vertexArrayObject","drawArrays","TRIANGLES","getContext","Error","vertexShader","classPrivateMethodGet","createShader","VERTEX_SHADER","_vertexGlslDefault","default","fragmentShader","FRAGMENT_SHADER","_fragmentGlslDefault","createProgram","createVertexArray","positionAttributeLocation","getAttribLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","vertexColorAttribLocation","vertexColorBuffer","vertexColors","Math","random","Uint8Array","UNSIGNED_BYTE","getUniformLocation","initTweakpane","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","displayWidth","clientWidth","displayHeight","clientHeight","needResize","module","exports"],"version":3,"file":"index.f0c8be8f.js.map"}