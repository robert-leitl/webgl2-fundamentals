{"mappings":"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","sources":["src/webgl-instanced-drawing/app.js","src/webgl-instanced-drawing/webgl-instanced-drawing.js","src/webgl-instanced-drawing/shader/draw.frag","src/webgl-instanced-drawing/shader/draw.vert"],"sourcesContent":["import { Pane } from 'tweakpane';\nimport { WebGLInstancedDrawing } from './webgl-instanced-drawing';\n\nlet DEBUG = false;\n\nif (process.env.NODE_ENV !== 'production') {\n    // Only runs in development and will be stripped in production builds.\n    DEBUG = true;\n}\n\nlet sketch;\nlet resizeTimeoutId;\n\nwindow.addEventListener('load', () => {\n    const canvas = document.body.querySelector('#c');\n\n    let pane;\n    if (DEBUG) {\n        pane = new Pane({ title: 'Settings' });\n    }\n\n    sketch = new WebGLInstancedDrawing(canvas, pane, (sketch) => {\n        sketch.run(); \n    });\n});\n\nwindow.addEventListener('resize', () => {\n    if (sketch) {\n        if (resizeTimeoutId)\n            clearTimeout(resizeTimeoutId);\n\n        resizeTimeoutId = setTimeout(() => {\n            resizeTimeoutId = null;\n            sketch.resize();\n        }, 300);\n    }\n});\n\n\n","\nimport * as twgl from 'twgl.js';\nimport { m4 } from '../math/m4';\nimport drawFragmentShaderSource from './shader/draw.frag';\nimport drawVertexShaderSource from './shader/draw.vert';\n\nexport class WebGLInstancedDrawing {\n    oninit;\n\n    #time = 0;\n    #deltaTime = 0;\n    #isDestroyed = false;\n\n    camera = {\n        rotation: 0,\n        position: [0, 0, 150],\n        matrix: twgl.m4.identity()\n    };\n\n    constructor(canvas, pane, oninit = null) {\n        this.canvas = canvas;\n        this.pane = pane;\n        this.oninit = oninit;\n\n        this.#init();\n    }\n\n    resize() {\n        twgl.resizeCanvasToDisplaySize(this.gl.canvas);\n        \n        // When you need to set the viewport to match the size of the canvas's\n        // drawingBuffer this will always be correct\n        this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n        //this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n\n        this.#updateProjectionMatrix();\n    }\n\n    run(time = 0) {\n        this.#deltaTime = time - this.#time;\n        this.#time = time;\n\n        if (this.#isDestroyed) return;\n\n        this.drawUniforms.u_deltaTime = this.#deltaTime;\n\n        this.instanceMatrices.forEach((mat, ndx) => {\n            twgl.m4.rotateY(mat, this.#deltaTime * 0.0005 * (ndx + 1), mat);\n        });\n\n        this.#render();\n\n        requestAnimationFrame((t) => this.run(t));\n    }\n\n    #render() {\n        // Draw\n        this.gl.clearColor(0, 0, 0, 1);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        this.gl.enable(this.gl.DEPTH_TEST);\n        this.gl.enable(this.gl.CULL_FACE);\n\n        // draw the particles\n        this.gl.useProgram(this.drawProgram);\n        this.gl.bindVertexArray(this.cubeVAO);\n        // upload the instance matrix buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.matrixBuffer);\n        this.gl.bufferSubData(this.gl.ARRAY_BUFFER, 0, this.instanceMatricesArray);\n        this.gl.uniformMatrix4fv(this.drawLocations.u_worldMatrix, false, this.drawUniforms.u_worldMatrix);\n        this.gl.uniformMatrix4fv(this.drawLocations.u_viewMatrix, false, this.drawUniforms.u_viewMatrix);\n        this.gl.uniformMatrix4fv(this.drawLocations.u_projectionMatrix, false, this.drawUniforms.u_projectionMatrix);\n        //this.gl.drawElements(this.gl.TRIANGLES, this.cubeBuffers.numElements, this.gl.UNSIGNED_SHORT, 0);\n        this.gl.drawElementsInstanced(\n            this.gl.TRIANGLES,\n            this.cubeBuffers.numElements,\n            this.gl.UNSIGNED_SHORT,\n            0,\n            this.numInstances\n        )\n    }\n\n    destroy() {\n        this.#isDestroyed = true;\n    }\n\n    #init() {\n        /** @type {WebGLRenderingContext} */\n        this.gl = this.canvas.getContext('webgl2', { antialias: true, alpha: false });\n        if (!this.gl) {\n            throw new Error('No WebGL 2 context!')\n        }\n\n        // setup programs\n        this.drawProgram = this.#createProgram(this.gl, [drawVertexShaderSource, drawFragmentShaderSource]);\n\n        // find the locations\n        this.drawLocations = {\n            a_position: this.gl.getAttribLocation(this.drawProgram, 'a_position'),\n            a_normal: this.gl.getAttribLocation(this.drawProgram, 'a_normal'),\n            a_uv: this.gl.getAttribLocation(this.drawProgram, 'a_uv'),\n            a_instanceMatrix: this.gl.getAttribLocation(this.drawProgram, 'a_instanceMatrix'),\n            u_worldMatrix: this.gl.getUniformLocation(this.drawProgram, 'u_worldMatrix'),\n            u_viewMatrix: this.gl.getUniformLocation(this.drawProgram, 'u_viewMatrix'),\n            u_projectionMatrix: this.gl.getUniformLocation(this.drawProgram, 'u_projectionMatrix'),\n            u_deltaTime: this.gl.getUniformLocation(this.drawProgram, 'u_deltaTime')\n        };\n\n        console.log(this.drawLocations);\n\n        // create cube VAO\n        this.cubeBuffers = twgl.primitives.createCubeBuffers(this.gl);\n        this.cubeVAO = this.#makeVertexArray(this.gl, [\n            [this.cubeBuffers.position, this.drawLocations.a_position, 3],\n            [this.cubeBuffers.normal, this.drawLocations.a_normal, 3],\n            [this.cubeBuffers.texcoord, this.drawLocations.a_uv, 2],\n        ], this.cubeBuffers.indices);\n\n\n        // instances setup\n        this.numInstances = 9;\n        this.instanceMatricesArray = new Float32Array(this.numInstances * 16);\n        this.instanceMatrices = [];\n        for(let i=0; i<this.numInstances; ++i) {\n            const x = i % 3 - 1;\n            const y = Math.floor(i / 3) - 1;\n            const instanceMatrix = twgl.m4.translation([x * 30, y * 30, 0]);\n            const instanceMatrixArray = new Float32Array(this.instanceMatricesArray.buffer, i * 16 * 4, 16);\n            instanceMatrixArray.set(instanceMatrix);\n            this.instanceMatrices.push(instanceMatrixArray);\n        }\n        this.matrixBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.matrixBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.instanceMatricesArray.byteLength, this.gl.DYNAMIC_DRAW);\n        const mat4AttribSlotCount = 4;\n        const bytesPerMatrix = 16 * 4;\n        for(let j=0; j<mat4AttribSlotCount; ++j) {\n            const loc = this.drawLocations.a_instanceMatrix + j;\n            this.gl.enableVertexAttribArray(loc);\n            this.gl.vertexAttribPointer(\n                loc,\n                4,\n                this.gl.FLOAT,\n                false,\n                bytesPerMatrix, // stride, num bytes to advance to get to next set of values\n                j * 4 * 4 // one row = 4 values each 4 bytes\n            );\n            this.gl.vertexAttribDivisor(loc, 1); // it sets this attribute to only advance to the next value once per instance\n        }\n\n        // init the global uniforms\n        this.drawUniforms = {\n            u_worldMatrix: twgl.m4.translate(twgl.m4.scaling([20, 20, 20]), [0, 0, 0]),\n            u_viewMatrix: twgl.m4.identity(),\n            u_projectionMatrix: twgl.m4.identity()\n        };\n\n        this.resize();\n\n        this.#updateCameraMatrix();\n        this.#updateProjectionMatrix();\n\n        this.#initTweakpane();\n\n        if (this.oninit) this.oninit(this);\n    }\n\n    #makeVertexArray(gl, bufLocNumElmPairs, indices) {\n        const va = gl.createVertexArray();\n        gl.bindVertexArray(va);\n        for (const [buffer, loc, numElem] of bufLocNumElmPairs) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            gl.enableVertexAttribArray(loc);\n            gl.vertexAttribPointer(\n                loc,      // attribute location\n                numElem,        // number of elements\n                gl.FLOAT, // type of data\n                false,    // normalize\n                0,        // stride (0 = auto)\n                0,        // offset\n            );\n        }\n        if (indices) {\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indices);\n        }\n        return va;\n    }\n\n    #createShader(gl, type, source) {\n        const shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n        if (success) {\n            return shader;\n        }\n\n        console.error(gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n    }\n\n    #createProgram(gl, shaderSources, transformFeedbackVaryings) {\n        const program = gl.createProgram();\n\n        [gl.VERTEX_SHADER, gl.FRAGMENT_SHADER].forEach((type, ndx) => {\n            const shader = this.#createShader(gl, type, shaderSources[ndx]);\n            gl.attachShader(program, shader);\n        });\n\n        if (transformFeedbackVaryings) {\n            gl.transformFeedbackVaryings(program, transformFeedbackVaryings, gl.SEPARATE_ATTRIBS);\n        }\n\n        gl.linkProgram(program);\n        const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n        if (success) {\n            return program;\n        }\n\n        console.error(gl.getProgramInfoLog(program));\n        gl.deleteProgram(program);\n    }\n\n    #updateCameraMatrix() {\n        twgl.m4.lookAt(this.camera.position, [0, 0, 0], [0, 1, 0], this.camera.matrix);\n        twgl.m4.inverse(this.camera.matrix, this.drawUniforms.u_viewMatrix);\n    }\n\n    #updateProjectionMatrix() {\n        const aspect = this.gl.canvas.clientWidth / this.gl.canvas.clientHeight;\n        twgl.m4.perspective(Math.PI / 4, aspect, 2, 250, this.drawUniforms.u_projectionMatrix);\n    }\n\n    #initTweakpane() {\n        if (this.pane) {\n            const cameraYSlider = this.pane.addBlade({\n                view: 'slider',\n                label: 'c.y',\n                min: -100,\n                max: 100,\n                value: this.camera.position[1],\n            });\n\n            cameraYSlider.on('change', e => {\n                this.camera.position[1] = e.value;\n                this.#updateCameraMatrix();\n            });\n            const cameraXSlider = this.pane.addBlade({\n                view: 'slider',\n                label: 'c.x',\n                min: -100,\n                max: 100,\n                value: this.camera.position[0],\n            });\n\n            cameraXSlider.on('change', e => {\n                this.camera.position[0] = e.value;\n                this.#updateCameraMatrix();\n            });\n        }\n    }\n}\n","#version 300 es\n\nprecision highp float;\n\nuniform float u_deltaTime;\n\nin vec3 v_normal;\nin vec2 v_uv;\n\nout vec4 outColor;\n\nvoid main() {\n    vec3 n = normalize(v_normal);\n    outColor = vec4(v_normal, 1.) + vec4(v_uv, 0.5, 0.5);\n}\n","#version 300 es\n\nuniform mat4 u_worldMatrix;\nuniform mat4 u_viewMatrix;\nuniform mat4 u_projectionMatrix;\n\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_uv;\nin mat4 a_instanceMatrix;\n\nout vec3 v_normal;\nout vec2 v_uv;\n\nvoid main() {\n    v_uv = a_uv;\n    v_normal = a_normal;\n    gl_Position = u_projectionMatrix * u_viewMatrix * a_instanceMatrix * u_worldMatrix * vec4(a_position, 1.);\n}\n"],"names":["require","sketch","resizeTimeoutId","_webglInstancedDrawing","window","addEventListener","pane","canvas","document","body","querySelector","WebGLInstancedDrawing","sketch1","run","clearTimeout","setTimeout","resize","_twglJs","_drawFrag","_drawVert","_render","WeakSet","_init","_makeVertexArray","_createShader","_createProgram","_updateCameraMatrix","_updateProjectionMatrix","_initTweakpane","oninit","arguments","length","_time","set","this","_deltaTime","_isDestroyed","rotation","position","matrix","m4","identity","add","init","call","key","resizeCanvasToDisplaySize","gl","viewport","drawingBufferWidth","drawingBufferHeight","updateProjectionMatrix","time","_helpers","classPrivateFieldGet","drawUniforms","u_deltaTime","instanceMatrices","forEach","mat","ndx","rotateY","_this","render","requestAnimationFrame","t","WeakMap","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","CULL_FACE","useProgram","drawProgram","bindVertexArray","cubeVAO","bindBuffer","ARRAY_BUFFER","matrixBuffer","bufferSubData","instanceMatricesArray","uniformMatrix4fv","drawLocations","u_worldMatrix","u_viewMatrix","u_projectionMatrix","drawElementsInstanced","TRIANGLES","cubeBuffers","numElements","UNSIGNED_SHORT","numInstances","getContext","antialias","alpha","Error","classPrivateMethodGet","createProgram","a_position","getAttribLocation","a_normal","a_uv","a_instanceMatrix","getUniformLocation","console","log","primitives","createCubeBuffers","makeVertexArray","normal","texcoord","indices","Float32Array","i","x","y","Math","floor","instanceMatrix","translation","instanceMatrixArray","buffer","push","createBuffer","bufferData","byteLength","DYNAMIC_DRAW","j","loc","enableVertexAttribArray","vertexAttribPointer","FLOAT","vertexAttribDivisor","translate","scaling","updateCameraMatrix","initTweakpane","bufLocNumElmPairs","va","createVertexArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_value","slicedToArray","value","numElem","err","return","ELEMENT_ARRAY_BUFFER","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","deleteShader","shaderSources","transformFeedbackVaryings","program","VERTEX_SHADER","FRAGMENT_SHADER","attachShader","SEPARATE_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","lookAt","camera","inverse","aspect","clientWidth","clientHeight","perspective","PI","addBlade","view","label","min","max","on","e","module","exports"],"version":3,"file":"index.9787d8d2.js.map"}