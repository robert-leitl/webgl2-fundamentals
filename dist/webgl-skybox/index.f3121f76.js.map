{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-f6815f690a8ee3da.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","src/webgl-skybox/app.js","src/webgl-skybox/webgl-skybox.js","src/webgl-skybox/shader/fragment.glsl","src/webgl-skybox/shader/vertex.glsl","src/webgl-skybox/shader/skybox-fragment.glsl","src/webgl-skybox/shader/skybox-vertex.glsl","node_modules/@parcel/runtime-js/lib/runtime-4c23dff65ca3b69f.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","node_modules/@parcel/runtime-js/lib/runtime-fae25226686857c7.js","node_modules/@parcel/runtime-js/lib/runtime-72010500fe326fe6.js","node_modules/@parcel/runtime-js/lib/runtime-26abd65cff96c628.js","node_modules/@parcel/runtime-js/lib/runtime-ff8beabf0380a609.js","node_modules/@parcel/runtime-js/lib/runtime-97207318f407981b.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"fUEoC\\\":\\\"index.f3121f76.js\\\",\\\"9io3L\\\":\\\"posx.28f4b747.jpg\\\",\\\"7v880\\\":\\\"negx.ba3120bc.jpg\\\",\\\"VsYcq\\\":\\\"posy.ab3d8fa5.jpg\\\",\\\"gtLvT\\\":\\\"negy.6959de6a.jpg\\\",\\\"fRegG\\\":\\\"posz.aa426500.jpg\\\",\\\"6tnEg\\\":\\\"negz.2804daa2.jpg\\\",\\\"9LU3i\\\":\\\"index.ba31ca7d.js\\\",\\\"9TbUc\\\":\\\"index.5ed48ace.js\\\",\\\"2G3CA\\\":\\\"index.15f73c8a.js\\\",\\\"eRuGw\\\":\\\"index.3eb9ea76.js\\\"}\"));","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","import { Pane } from 'tweakpane';\nimport { WebGLSkybox } from './webgl-skybox';\n\nlet DEBUG = false;\n\nif (process.env.NODE_ENV !== 'production') {\n    // Only runs in development and will be stripped in production builds.\n    DEBUG = true;\n}\n\nlet sketch;\nlet resizeTimeoutId;\n\nwindow.addEventListener('load', () => {\n    const canvas = document.body.querySelector('#c');\n\n    let pane;\n    if (DEBUG) {\n        pane = new Pane({ title: 'Settings' });\n    }\n\n    sketch = new WebGLSkybox(canvas, pane, (sketch) => {\n        sketch.run(); \n    });\n});\n\nwindow.addEventListener('resize', () => {\n    if (sketch) {\n        if (resizeTimeoutId)\n            clearTimeout(resizeTimeoutId);\n\n        resizeTimeoutId = setTimeout(() => {\n            resizeTimeoutId = null;\n            sketch.resize();\n        }, 300);\n    }\n});\n\n\n","\nimport { m4 } from '../math/m4';\nimport chroma from 'chroma-js';\nimport * as twgl from 'twgl.js';\nimport fragmentShaderSource from './shader/fragment.glsl';\nimport vertexShaderSource from './shader/vertex.glsl';\nimport skyboxFragmentShaderSource from './shader/skybox-fragment.glsl';\nimport skyboxVertexShaderSource from './shader/skybox-vertex.glsl';\n\nexport class WebGLSkybox {\n    oninit;\n\n    #time = 0;\n    #isDestroyed = false;\n\n    constructor(canvas, pane, oninit = null) {\n        this.canvas = canvas;\n        this.pane = pane;\n        this.oninit = oninit;\n\n        this.#init();\n    }\n\n    resize() {\n        twgl.resizeCanvasToDisplaySize(this.gl.canvas);\n\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        \n        // set the projection matrix\n        this.#updateProjectionMatrix();\n    }\n\n    run() {\n        this.lastFrameTime = performance.now();\n        this.#animate(this.lastFrameTime);\n    }\n\n    #animate(time) {\n        const delta = time - this.lastFrameTime;\n        this.lastFrameTime = time;\n\n        if (this.#isDestroyed) return;\n\n        // enable backface culling\n        this.gl.enable(this.gl.CULL_FACE);\n        // enable the z-depth tests to discard pixels occluded by other pixels\n        this.gl.enable(this.gl.DEPTH_TEST);\n\n        this.#render();\n\n        // animation models\n        this.rotation[1] += (delta / 30000) * Math.PI * 2;\n        this.rotation[2] += (delta / 20000) * Math.PI * 2;\n        this.#updateModelMatrix();\n\n        requestAnimationFrame(t => this.#animate(t));\n    }\n\n    #render() {\n        // Draw\n        this.gl.clearColor(0, 0, 0, 1);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n\n        this.gl.useProgram(this.program);\n\n        // Set the uniforms that are the same for all objects.\n        twgl.setUniforms(this.uniformSetters, this.uniformsThatAreTheSameForAllObjects);\n\n        /////////////// Draw object\n\n        this.gl.bindVertexArray(this.objectVertexArrayObject);\n\n        // Set the matrix uniform\n        this.uniformsThatAreComputedForEachObject.u_world = this.modelMatrix;\n        m4.transpose(m4.inverse(this.modelMatrix), this.uniformsThatAreComputedForEachObject.u_worldInverseTranspose);\n        twgl.setUniforms(this.uniformSetters, this.uniformsThatAreComputedForEachObject);\n\n        // Set the uniforms that are specific to the this object.\n        twgl.setUniforms(this.uniformSetters, this.material1Uniforms);\n        \n        // Draw the geometry.\n        this.gl.drawElements(this.gl.TRIANGLES, this.objectBuffers.numElements, this.gl.UNSIGNED_SHORT, 0);\n\n\n\n\n        /////////////// Draw skybox\n\n        // let our quad pass the depth test at 1.0\n        this.gl.depthFunc(this.gl.LEQUAL);\n\n        this.gl.useProgram(this.skyboxProgram);\n        twgl.setUniforms(this.skyboxUniformSetters, { \n            u_cubeMap: this.cubeMapTexture,\n            u_viewProjectionInverse: this.viewProjectionInverse\n        });\n        this.gl.bindVertexArray(this.skyboxVertexArrayObject);\n        this.gl.drawElements(this.gl.TRIANGLES, this.skyboxBuffers.numElements, this.gl.UNSIGNED_SHORT, 0);\n    }\n\n    destroy() {\n        this.#isDestroyed = true;\n    }\n\n    degToRad(d) {\n        return d * Math.PI / 180;\n    }\n\n    rand(min, max) {\n        if (max === undefined) {\n            max = min;\n            min = 0;\n        }\n        return min + Math.random() * (max - min);\n    };\n    \n    randInt(range) {\n        return Math.floor(Math.random() * range);\n    };\n\n    #init() {\n        this.gl = this.canvas.getContext('webgl2');\n        const gl = this.gl;\n\n        if (!this.gl) {\n            throw new Error('No WebGL 2 context!')\n        }\n\n        // Tell the twgl to match position with a_position,\n        // normal with a_normal etc..\n        twgl.setAttributePrefix(\"a_\");\n\n        // setup GLSL program (compiles shader, links program, look up locations)\n        this.program = twgl.createProgramFromSources(gl, [vertexShaderSource, fragmentShaderSource]);\n        this.uniformSetters = twgl.createUniformSetters(gl, this.program);\n        const attribSetters  = twgl.createAttributeSetters(gl, this.program);\n\n        this.skyboxProgram = twgl.createProgramFromSources(gl, [skyboxVertexShaderSource, skyboxFragmentShaderSource]);\n        this.skyboxUniformSetters = twgl.createUniformSetters(gl, this.skyboxProgram);\n        const skyboxAttribSetters  = twgl.createAttributeSetters(gl, this.skyboxProgram);\n\n        //////////////////////// Object VAO\n        this.objectBuffers = twgl.primitives.createTorusBuffers(this.gl, 20, 10, 64, 64);\n        const objectAttribs = {\n            a_position: { buffer: this.objectBuffers.position, numComponents: 3, },\n            a_normal:   { buffer: this.objectBuffers.normal,   numComponents: 3, },\n            a_texcoord: { buffer: this.objectBuffers.texcoord, numComponents: 2, },\n        };\n        this.objectVertexArrayObject = twgl.createVAOAndSetAttributes(gl, attribSetters, objectAttribs, this.objectBuffers.indices);\n\n        //////////////////////// Skybox VAO\n        this.skyboxBuffers = twgl.primitives.createXYQuadBuffers(this.gl);\n        const skyboxAttribs = {\n            a_position: { buffer: this.skyboxBuffers.position, numComponents: 2 },\n        };\n        this.skyboxVertexArrayObject = twgl.createVAOAndSetAttributes(gl, skyboxAttribSetters, skyboxAttribs, this.skyboxBuffers.indices);\n\n\n        // Create a texture.\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // fill texture with 3x2 pixels\n        const level = 0;\n        const internalFormat = gl.LUMINANCE;\n        const width = 8;\n        const height = 8;\n        const border = 0;\n        const format = gl.LUMINANCE;\n        const type = gl.UNSIGNED_BYTE;\n        const data = new Uint8Array([\n            255, 128, 255, 128, 255, 128, 255, 128, \n            128, 255, 128, 255, 128, 255, 128, 255,\n            255, 128, 255, 128, 255, 128, 255, 128, \n            128, 255, 128, 255, 128, 255, 128, 255,\n            255, 128, 255, 128, 255, 128, 255, 128, \n            128, 255, 128, 255, 128, 255, 128, 255,\n            255, 128, 255, 128, 255, 128, 255, 128, \n            128, 255, 128, 255, 128, 255, 128, 255,\n        ]);\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, data);\n        \n        // set the filtering so we don't need mips and it's not filtered\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        this.#createCubeMap(this.gl);\n\n        this.material1Uniforms = {\n            u_colorMult:             chroma.hsv(0, 0, 1).gl(),\n            u_ambient:               [0.4, 0.4, 0.41, 1],\n            u_diffuse:               texture,\n            u_specular:              [1, 1, 1, 1],\n            u_shininess:             10,\n            u_specularFactor:        .9\n        };\n\n        // init the transformation properties\n        this.origin = [0, 0, 0];\n        this.translation = [0, 0, 0];\n        this.scale = [1, 1, 1];\n        this.rotation = [0, 0, 0];\n        this.#updateModelMatrix();\n\n        // init global matrices\n        this.projectionMatrix = m4.identity();\n        this.viewMatrix = m4.identity();\n        this.cameraMatrix = m4.identity();\n        this.viewProjectionInverse = m4.identity();\n\n        this.planeModelMatrix = m4.translation(0, -15, 0);\n\n        // init projection\n        this.#updateProjectionMatrix();\n\n        // init camera\n        this.cameraRotationY = 0;\n        this.#updateCameraMatrix();\n\n        this.uniformsThatAreTheSameForAllObjects = {\n            u_projection:            this.projectionMatrix,\n            u_view:                  this.viewMatrix,\n            u_lightWorldPos:         [-100, 100, 100],\n            u_viewInverse:           this.cameraMatrix,\n            u_lightColor:            [1, 1, 1, 1],\n            u_cubeMap:               this.cubeMapTexture\n        };\n    \n        this.uniformsThatAreComputedForEachObject = {\n            u_world:                 m4.identity(),\n            u_worldInverseTranspose: m4.identity(),\n        };\n\n        this.resize();\n\n        this.#initTweakpane();\n\n        if (this.oninit) this.oninit(this);\n    }\n\n    #createCubeMap(gl) {\n        this.envMapInfos = [\n            {\n                target: gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                url: new URL('../assets/cubemap/posx.jpg', import.meta.url)\n            },\n            {\n                target: gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                url: new URL('../assets/cubemap/negx.jpg', import.meta.url)\n            },\n            {\n                target: gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                url: new URL('../assets/cubemap/posy.jpg', import.meta.url)\n            },\n            {\n                target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                url: new URL('../assets/cubemap/negy.jpg', import.meta.url)\n            },\n            {\n                target: gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n                url: new URL('../assets/cubemap/posz.jpg', import.meta.url)\n            },\n            {\n                target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,\n                url: new URL('../assets/cubemap/negz.jpg', import.meta.url)\n            }\n        ];\n\n        this.cubeMapTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.cubeMapTexture);\n\n        this.envMapInfos.forEach(info => {\n            const {target, url} = info;\n\n            const level = 0;\n            const internalFormat = gl.RGBA;\n            const size = 2048;\n            const border = 0;\n            const type = gl.UNSIGNED_BYTE;\n            const format = gl.RGBA;\n\n            gl.texImage2D(target, level, internalFormat, size, size, border, format, type, null);\n            \n            const faceImg = new Image();\n            faceImg.src = url;\n            faceImg.addEventListener('load', () => {\n                gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.cubeMapTexture);\n                gl.texImage2D(target, level, internalFormat, format, type, faceImg);\n                gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n            });\n        });\n\n        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n    }\n\n    #updateProjectionMatrix() {\n        const aspect = this.gl.canvas.clientWidth / this.gl.canvas.clientHeight;\n        const zNear = 1;\n        const zFar = 2000;\n        const fov = 75 * (Math.PI / 180);\n        m4.perspective(fov, aspect, zNear, zFar, this.projectionMatrix);\n        this.#updateViewProjectionInverse();\n    }\n\n    #updateCameraMatrix() {\n       // init the camera matrix\n       m4.yRotation(this.cameraRotationY, this.cameraMatrix);\n       //m4.xRotate(this.cameraMatrix, this.degToRad(-45), this.cameraMatrix);\n       m4.translate(this.cameraMatrix, 0, 0, 100, this.cameraMatrix);\n\n       // init the view matrix\n       m4.inverse(this.cameraMatrix, this.viewMatrix);\n\n       this.#updateViewProjectionInverse();\n    }\n\n    #updateViewProjectionInverse() {\n        const viewMatrixRotationOnly = [...this.viewMatrix];\n        // clear the translation\n        viewMatrixRotationOnly[12] = 0;\n        viewMatrixRotationOnly[13] = 0;\n        viewMatrixRotationOnly[14] = 0;\n\n        const viewProjectionMatrix = m4.multiply(this.projectionMatrix, viewMatrixRotationOnly);\n        m4.inverse(viewProjectionMatrix, this.viewProjectionInverse);\n    }\n\n    #updateModelMatrix() {\n        this.modelMatrix = m4.translation(this.translation[0], this.translation[1], this.translation[2]);\n        this.modelMatrix = m4.xRotate(this.modelMatrix, this.rotation[0]);\n        this.modelMatrix = m4.yRotate(this.modelMatrix, this.rotation[1]);\n        this.modelMatrix = m4.zRotate(this.modelMatrix, this.rotation[2]);\n        this.modelMatrix = m4.scale(this.modelMatrix, this.scale[0], this.scale[1], this.scale[2]);\n        this.modelMatrix = m4.translate(this.modelMatrix, -this.origin[0], -this.origin[1], -this.origin[2]);\n    }\n\n    #initTweakpane() {\n        if (this.pane) {\n            // init tweakpane folders and inputs\n\n            const cameraRYSlider = this.pane.addBlade({\n                view: 'slider',\n                label: 'camera RY',\n                min: 0,\n                max: 2 * Math.PI,\n                value: 0,\n            });\n\n            cameraRYSlider.on('change', e => {\n                this.cameraRotationY = e.value;\n                this.#updateCameraMatrix();\n            });\n        }\n    }\n}\n","#version 300 es\nprecision highp float;\n \nin vec4 v_position;\nin vec2 v_texCoord;\nin vec3 v_normal;\nin vec3 v_surfaceToLight;\nin vec3 v_surfaceToView;\n \nuniform vec4 u_lightColor;\nuniform vec4 u_ambient;\nuniform sampler2D u_diffuse;\nuniform samplerCube u_cubeMap;\nuniform vec4 u_specular;\nuniform float u_shininess;\nuniform float u_specularFactor;\nuniform vec4 u_colorMult;\n \nout vec4 outColor;\n \nvec4 lit(float l ,float h, float m) {\n  return vec4(1.0,\n              max(l, 0.0),\n              (l > 0.0) ? pow(max(0.0, h), m) : 0.0,\n              1.0);\n}\n \nvoid main() {\n    vec4 diffuseColor = min(vec4(1.), texture(u_diffuse, fract(v_texCoord * vec2(2.,1.))) * u_colorMult + vec4(0.1));\n    vec3 a_normal = normalize(v_normal);\n    vec3 surfaceToLight = normalize(v_surfaceToLight);\n    vec3 surfaceToView = normalize(v_surfaceToView);\n    vec3 halfVector = normalize(surfaceToLight + surfaceToView);\n    vec4 litR = lit(dot(a_normal, surfaceToLight), dot(a_normal, halfVector), u_shininess);\n\n    vec3 r = dot(a_normal, surfaceToView) * a_normal * 2. - surfaceToView;\n    vec4 env = texture(u_cubeMap, r);\n\n    diffuseColor *= env;\n\n    outColor = vec4((u_lightColor * (diffuseColor * litR.y + diffuseColor * u_ambient + u_specular * litR.y * litR.z * u_specularFactor)).rgb, diffuseColor.a);\n}","#version 300 es\n \nuniform mat4 u_projection;\nuniform mat4 u_view;\nuniform vec3 u_lightWorldPos;\nuniform mat4 u_world;\nuniform mat4 u_viewInverse;\nuniform mat4 u_worldInverseTranspose;\n \nin vec4 a_position;\nin vec3 a_normal;\nin vec2 a_texcoord;\n \nout vec4 v_position;\nout vec2 v_texCoord;\nout vec3 v_normal;\nout vec3 v_surfaceToLight;\nout vec3 v_surfaceToView;\n \nvoid main() {\n    vec4 worldPosition = u_world * a_position;\n    v_texCoord = a_texcoord;\n    v_position = u_projection * u_view * worldPosition;\n    v_normal = (u_worldInverseTranspose * vec4(a_normal, 0)).xyz;\n    v_surfaceToLight = u_lightWorldPos - worldPosition.xyz;\n    v_surfaceToView = (u_viewInverse[3] - worldPosition).xyz;\n    gl_Position = v_position;\n}","#version 300 es\nprecision highp float;\n\nin vec4 v_position;\n \nuniform mat4 u_viewProjectionInverse;\nuniform samplerCube u_cubeMap;\n \nout vec4 outColor;\n\nvoid main() {\n    vec4 d = u_viewProjectionInverse * v_position;\n    outColor = texture(u_cubeMap, normalize(d.xyz / d.w));\n}","#version 300 es\n \nin vec4 a_position;\n\nout vec4 v_position;\n \nvoid main() {\n    v_position = a_position;\n    gl_Position = vec4(a_position.xy, 1., 1.);\n}","module.exports = require('./helpers/bundle-url').getBundleURL('fUEoC') + \"../\" + require('./helpers/bundle-manifest').resolve(\"9io3L\");","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","module.exports = require('./helpers/bundle-url').getBundleURL('fUEoC') + \"../\" + require('./helpers/bundle-manifest').resolve(\"7v880\");","module.exports = require('./helpers/bundle-url').getBundleURL('fUEoC') + \"../\" + require('./helpers/bundle-manifest').resolve(\"VsYcq\");","module.exports = require('./helpers/bundle-url').getBundleURL('fUEoC') + \"../\" + require('./helpers/bundle-manifest').resolve(\"gtLvT\");","module.exports = require('./helpers/bundle-url').getBundleURL('fUEoC') + \"../\" + require('./helpers/bundle-manifest').resolve(\"fRegG\");","module.exports = require('./helpers/bundle-url').getBundleURL('fUEoC') + \"../\" + require('./helpers/bundle-manifest').resolve(\"6tnEg\");"],"names":["require","register","JSON","parse","mapping","module","exports","pairs","keys","Object","i","length","resolve","id","resolved","Error","sketch","resizeTimeoutId","_webglSkybox","window","addEventListener","pane","canvas","document","body","querySelector","WebGLSkybox","sketch1","run","clearTimeout","setTimeout","resize","_m4","_chromaJs","_twglJs","_fragmentGlsl","_vertexGlsl","_skyboxFragmentGlsl","_skyboxVertexGlsl","_animate","WeakSet","_render","_init","_createCubeMap","_updateProjectionMatrix","_updateCameraMatrix","_updateViewProjectionInverse","_updateModelMatrix","_initTweakpane","oninit","arguments","_time","set","this","_isDestroyed","add","init","call","key","resizeCanvasToDisplaySize","gl","viewport","width","height","updateProjectionMatrix","lastFrameTime","performance","now","animate","d","Math","PI","min","max","undefined","random","range","floor","WeakMap","time","delta","_helpers","classPrivateFieldGet","enable","CULL_FACE","DEPTH_TEST","render","rotation","updateModelMatrix","requestAnimationFrame","t","classPrivateMethodGet","_this","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","useProgram","program","setUniforms","uniformSetters","uniformsThatAreTheSameForAllObjects","bindVertexArray","objectVertexArrayObject","uniformsThatAreComputedForEachObject","u_world","modelMatrix","transpose","m4","inverse","u_worldInverseTranspose","material1Uniforms","drawElements","TRIANGLES","objectBuffers","numElements","UNSIGNED_SHORT","depthFunc","LEQUAL","skyboxProgram","skyboxUniformSetters","u_cubeMap","cubeMapTexture","u_viewProjectionInverse","viewProjectionInverse","skyboxVertexArrayObject","skyboxBuffers","getContext","setAttributePrefix","createProgramFromSources","createUniformSetters","attribSetters","createAttributeSetters","skyboxAttribSetters","primitives","createTorusBuffers","objectAttribs","a_position","buffer","position","numComponents","a_normal","normal","a_texcoord","texcoord","createVAOAndSetAttributes","indices","createXYQuadBuffers","skyboxAttribs","texture","createTexture","bindTexture","TEXTURE_2D","internalFormat","LUMINANCE","format","type","UNSIGNED_BYTE","data","Uint8Array","pixelStorei","UNPACK_ALIGNMENT","texImage2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","createCubeMap","u_colorMult","_chromaJsDefault","default","hsv","u_ambient","u_diffuse","u_specular","u_shininess","u_specularFactor","origin","translation","scale","projectionMatrix","identity","viewMatrix","cameraMatrix","planeModelMatrix","cameraRotationY","updateCameraMatrix","u_projection","u_view","u_lightWorldPos","u_viewInverse","u_lightColor","initTweakpane","envMapInfos","target","TEXTURE_CUBE_MAP_POSITIVE_X","url","URL","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","TEXTURE_CUBE_MAP","forEach","info","RGBA","faceImg","Image","src","_this1","generateMipmap","LINEAR_MIPMAP_LINEAR","aspect","clientWidth","clientHeight","fov","perspective","updateViewProjectionInverse","yRotation","translate","viewMatrixRotationOnly","toConsumableArray","viewProjectionMatrix","multiply","xRotate","yRotate","zRotate","addBlade","view","label","value","on","e","getBundleURL","bundleURL","getBaseURL","replace","err","matches","stack","match","getOrigin"],"version":3,"file":"index.f3121f76.js.map"}